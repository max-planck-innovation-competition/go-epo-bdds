package epo_docdb

import "encoding/xml"

// Yesorno
// added by Seb
type Yesorno string

// Code generated by xgen. DO NOT EDIT.

// Exchangedocument ...
type Exchangedocument struct {
	// XMLName                    xml.Name `json:"-" xml:"exchange-document"`
	CorrectioncodeAttr         string                 `json:",omitempty" xml:"correction-code,attr,omitempty"`
	CountryAttr                string                 `json:",omitempty" xml:"country,attr"`
	DateproducedAttr           int                    `json:",omitempty" xml:"date-produced,attr,omitempty"`
	DateaddeddocdbAttr         int                    `json:",omitempty" xml:"date-added-docdb,attr,omitempty"`
	DateofpreviousexchangeAttr int                    `json:",omitempty" xml:"date-of-previous-exchange,attr,omitempty"`
	DateoflastexchangeAttr     int                    `json:",omitempty" xml:"date-of-last-exchange,attr,omitempty"`
	DatepublAttr               int                    `json:",omitempty" xml:"date-publ,attr,omitempty"`
	DocnumberAttr              string                 `json:",omitempty" xml:"doc-number,attr,omitempty"`
	DtdversionAttr             string                 `json:",omitempty" xml:"dtd-version,attr,omitempty"`
	FileAttr                   string                 `json:",omitempty" xml:"file,attr,omitempty"`
	FilereferenceidAttr        string                 `json:",omitempty" xml:"file-reference-id,attr,omitempty"`
	IdAttr                     string                 `json:",omitempty" xml:"id,attr,omitempty"`
	FamilyidAttr               string                 `json:",omitempty" xml:"family-id,attr,omitempty"`
	DocidAttr                  string                 `json:"id,omitempty" xml:"doc-id,attr,omitempty"` // doc id is the "unique and stable" identifier
	IsrepresentativeAttr       string                 `json:",omitempty" xml:"is-representative,attr,omitempty"`
	KindAttr                   string                 `json:",omitempty" xml:"kind,attr,omitempty"`
	LangAttr                   string                 `json:",omitempty" xml:"lang,attr,omitempty"`
	OriginatingofficeAttr      string                 `json:",omitempty" xml:"originating-office,attr,omitempty"`
	StatusAttr                 string                 `json:",omitempty" xml:"status,attr,omitempty"`
	SystemAttr                 string                 `json:",omitempty" xml:"system,attr,omitempty"`
	ExchBibliographicdata      *BibliographicdataType `json:",omitempty" xml:"bibliographic-data"`
	ExchAbstract               []*AbstractType        `json:",omitempty" xml:"abstract"`
	ExchPatentfamily           *PatentfamilyType      `json:",omitempty" xml:"patent-family"`
	ExchangeDocument           string                 `json:",omitempty" xml:"exchange-document"`
}

// SearchreportdataType ...
type SearchreportdataType struct {
	XMLName                xml.Name                `json:"-" xml:"search-report-data"`
	IdAttr                 string                  `json:",omitempty" xml:"id,attr,omitempty"`
	LangAttr               string                  `json:",omitempty" xml:"lang,attr,omitempty"`
	SrepofficeAttr         string                  `json:",omitempty" xml:"srep-office,attr"`
	DateproducedAttr       string                  `json:",omitempty" xml:"date-produced,attr"`
	SreptypeAttr           string                  `json:",omitempty" xml:"srep-type,attr,omitempty"`
	StatusAttr             string                  `json:",omitempty" xml:"status,attr,omitempty"`
	Docpage                []*DocpageType          `json:",omitempty" xml:"doc-page"`
	ExchSrepinfo           *SrepinfoType           `json:",omitempty" xml:"srep-info"`
	ExchSrepforpub         *SrepforpubType         `json:",omitempty" xml:"srep-for-pub"`
	ExchSrepwrittenopinion *SrepwrittenopinionType `json:",omitempty" xml:"srep-written-opinion"`
}

// Searchreportdata is Attributes :
//   - id="srep"
//   - lang="en" or "fr" or "de"
//   - srep-office = CC (=search authority
//   - date-produced = date finished by the examiner
//   - srep-type="CC-sr" or "isr" or "CC-suppl" etc
type Searchreportdata *SearchreportdataType

// PrioritydateType ...
type PrioritydateType struct {
	XMLName           xml.Name `json:"-" xml:"priority-date"`
	PriorityvalidAttr string   `json:",omitempty" xml:"priority-valid,attr,omitempty"`
	Value             string   `json:",omitempty" xml:",chardata"`
}

// Prioritydate is Rule 70.10: Any published application ... shall be accompanied by ...
//
//	its claimed priority date (if any).
//	In respect of the priority date of any such document, the report may indicate
//	that, in the opinion of the International Preliminary Examining Authority,
//	such date has not been validly claimed.
type Prioritydate *PrioritydateType

// ComplianceunityinventionType ...
type ComplianceunityinventionType struct {
	XMLName           xml.Name `json:"-" xml:"compliance-unity-invention"`
	UnitycompliedAttr string   `json:",omitempty" xml:"unity-complied,attr"`
	P                 []*PType `json:",omitempty" xml:"p"`
}

// Complianceunityinvention is (PCT/ISA/237 ) - Box No. IV Lack of unity of invention
//
//	(3) This Authority considers that the requirement of unity of invention in
//	accordance with Rule 13.1, 13.2 and 13.3 is
//
//	complied with
//	not complied with for the following reasons
type Complianceunityinvention *ComplianceunityinventionType

// InvitationpayadditionalfeesType ...
type InvitationpayadditionalfeesType struct {
	XMLName          xml.Name `json:"-" xml:"invitation-pay-additional-fees"`
	UnityfeecodeAttr *IntType `json:",omitempty" xml:"unity-fee-code,attr"`
}

// Invitationpayadditionalfees is In response to the invitation (Form PCT/ISA/206) to pay additional fees the
//
//	applicant has:
//
//	Attribute values:
//
//	(PCT/ISA/237 )
//	1 = paid additional fees
//	2 = paid additional fees under protest
//	3 = not paid additional fees
//	4 = not used
//
//	(PCT/IPEA/409 and PCT/IPEA/408 )
//	1 = restricted the claims
//	2 = paid additional fees
//	3 = paid additional fees under protest
//	4 = neither restricted nor paid additional fees
type Invitationpayadditionalfees *InvitationpayadditionalfeesType

// SequencelistingcomputerreadableformType ...
type SequencelistingcomputerreadableformType struct {
	XMLName          xml.Name `json:"-" xml:"sequence-listing-computer-readable-form"`
	NotcompliantAttr string   `json:",omitempty" xml:"not-compliant,attr"`
}

// Sequencelistingcomputerreadableform is The computer readable form
//
//	has not been furnished
//	does not comply with the standard
type Sequencelistingcomputerreadableform *SequencelistingcomputerreadableformType

// SequencelistingwrittenformType ...
type SequencelistingwrittenformType struct {
	XMLName          xml.Name `json:"-" xml:"sequence-listing-written-form"`
	NotcompliantAttr string   `json:",omitempty" xml:"not-compliant,attr"`
}

// Sequencelistingwrittenform is The written form
//
//	has not been furnished
//	does not comply with the standard
type Sequencelistingwrittenform *SequencelistingwrittenformType

// PriorityopinionType ...
type PriorityopinionType struct {
	XMLName        xml.Name            `json:"-" xml:"priority-opinion"`
	VaridAttr      string              `json:",omitempty" xml:"varid,attr,omitempty"`
	Earlierappl    *EarlierapplType    `json:",omitempty" xml:"earlier-appl"`
	Claiminvalid   *ClaiminvalidType   `json:",omitempty" xml:"claim-invalid"`
	Additionalinfo *AdditionalinfoType `json:",omitempty" xml:"additional-info"`
}

// Priorityopinion is (PCT/ISA/237 - Box II) - Priority
type Priorityopinion *PriorityopinionType

// EarlierapplType ...
type EarlierapplType struct {
	XMLName      xml.Name `json:"-" xml:"earlier-appl"`
	PriocodeAttr *IntType `json:",omitempty" xml:"prio-code,attr"`
}

// Earlierappl is (PCT/ISA/237 - Box II)
//
//	Priority
//
//	1. The following document has not yet been furnished:
//
//	Attribute value:
//	1 = copy of the earlier application whose priority has been claimed
//	(Rules 43bis.1 and 66.7(a)).
//
//	2 = translation of the earlier application whose priority has been claimed
//	(Rules 43bis.1 and 66.7(b)).
//
//	Consequently it has not been possible to consider the validity of the priority
//	claim. This opinion has nevertheless been established on the assumption that the
//	relevant date is the claimed priority date.
type Earlierappl *EarlierapplType

// TranslationofapplType ...
type TranslationofapplType struct {
	XMLName  xml.Name `json:"-" xml:"translation-of-appl"`
	LangAttr string   `json:",omitempty" xml:"lang,attr"`
}

// Translationofappl is 1. With regard to the language, this opinion has been established on the basis of
//
//	the international application in the language in which it was filed, unless
//	otherwise indicated under this item.
//
//	This opinion has been established on the basis of a translation from the original
//	language into the following language________________ , which is the language of
//	a translation furnished for the purposes of international search
//	(under Rules 12.3 and 23.1(b)).
type Translationofappl *TranslationofapplType

// SreppatentfamilyType ...
type SreppatentfamilyType struct {
	XMLName              xml.Name                 `json:"-" xml:"srep-patent-family"`
	IdAttr               string                   `json:",omitempty" xml:"id,attr,omitempty"`
	Priorityapplication  *PriorityapplicationType `json:",omitempty" xml:"priority-application"`
	ExchSrepfamilymember []*SrepfamilymemberType  `json:",omitempty" xml:"srep-family-member"`
	Text                 *string                  `json:",omitempty" xml:"text"`
}

// Sreppatentfamily is Patent family member.
//
//	(ST.32:B345)
type Sreppatentfamily *SreppatentfamilyType

// SrepinfoType ...
type SrepinfoType struct {
	XMLName                  xml.Name                    `json:"-" xml:"srep-info"`
	TotalpagecountAttr       string                      `json:",omitempty" xml:"total-page-count,attr,omitempty"`
	Docpage                  []*DocpageType              `json:",omitempty" xml:"doc-page"`
	Correspondenceaddress    *CorrespondenceaddressType  `json:",omitempty" xml:"correspondence-address"`
	Filereferenceid          *FilereferenceidType        `json:",omitempty" xml:"file-reference-id"`
	ExchApplicationreference []*ApplicationreferenceType `json:",omitempty" xml:"application-reference"`
	Dateofearliestpriority   *DateofearliestpriorityType `json:",omitempty" xml:"date-of-earliest-priority"`
	Applicantname            *ApplicantnameType          `json:",omitempty" xml:"applicant-name"`
	Srepestablished          *SrepestablishedType        `json:",omitempty" xml:"srep-established"`
	Srepprotestfees          *SrepprotestfeesType        `json:",omitempty" xml:"srep-protest-fees"`
	Sreprequestdate          *SreprequestdateType        `json:",omitempty" xml:"srep-request-date"`
	Sreprequestnumber        *SreprequestnumberType      `json:",omitempty" xml:"srep-request-number"`
	Sreppriorartdocs         []*SreppriorartdocsType     `json:",omitempty" xml:"srep-prior-art-docs"`
	Srepbasis                *SrepbasisType              `json:",omitempty" xml:"srep-basis"`
	Srepclaimsinfo           *SrepclaimsinfoType         `json:",omitempty" xml:"srep-claims-info"`
	ExchSrepunityofinvention *SrepunityofinventionType   `json:",omitempty" xml:"srep-unity-of-invention"`
	ExchSrepinventiontitle   *SrepinventiontitleType     `json:",omitempty" xml:"srep-invention-title"`
	Srepabstract             *SrepabstractType           `json:",omitempty" xml:"srep-abstract"`
	Srepfiguretopublish      *SrepfiguretopublishType    `json:",omitempty" xml:"srep-figure-to-publish"`
	Srepinfoadmin            *SrepinfoadminType          `json:",omitempty" xml:"srep-info-admin"`
	Srepotherinfo            *SrepotherinfoType          `json:",omitempty" xml:"srep-other-info"`
	Text                     []*string                   `json:",omitempty" xml:"text"`
}

// SrepabstractType ...
type SrepabstractType struct {
	XMLName         xml.Name      `json:"-" xml:"srep-abstract"`
	AbsapprovalAttr string        `json:",omitempty" xml:"abs-approval,attr,omitempty"`
	Abstract        *AbstractType `json:",omitempty" xml:"abstract"`
}

// SrepinventiontitleType ...
type SrepinventiontitleType struct {
	XMLName            xml.Name            `json:"-" xml:"srep-invention-title"`
	TitleapprovalAttr  string              `json:",omitempty" xml:"title-approval,attr,omitempty"`
	ExchInventiontitle *InventiontitleType `json:",omitempty" xml:"invention-title"`
}

// SrepinformationType ...
type SrepinformationType struct {
	XMLName      xml.Name `json:"-" xml:"srep-information"`
	SrepcodeAttr string   `json:",omitempty" xml:"srep-code,attr,omitempty"`
	Value        string   `json:",omitempty" xml:",chardata"`
}

// Srepinformation ...
type Srepinformation *SrepinformationType

// ElectronicsignatureType ...
type ElectronicsignatureType struct {
	XMLName           xml.Name               `json:"-" xml:"electronic-signature"`
	DateAttr          int                    `json:",omitempty" xml:"date,attr"`
	PlacesignedAttr   string                 `json:",omitempty" xml:"place-signed,attr,omitempty"`
	Basicsignature    *BasicsignatureType    `json:",omitempty" xml:"basic-signature"`
	Enhancedsignature *EnhancedsignatureType `json:",omitempty" xml:"enhanced-signature"`
}

// Electronicsignature is ***
//
//	A signature represented by electronic means
type Electronicsignature *ElectronicsignatureType

// FaximageType ...
type FaximageType struct {
	XMLName  xml.Name `json:"-" xml:"fax-image"`
	FileAttr string   `json:",omitempty" xml:"file,attr"`
}

// Faximage is A TIFF image of a signature
type Faximage *FaximageType

// SrepfiguretopublishType ...
type SrepfiguretopublishType struct {
	XMLName         xml.Name             `json:"-" xml:"srep-figure-to-publish"`
	FiginfoAttr     string               `json:",omitempty" xml:"figinfo,attr,omitempty"`
	Figuretopublish *FiguretopublishType `json:",omitempty" xml:"figure-to-publish"`
}

// Srepfiguretopublish is Attribute "figinfo" might in other sources be represented as
//
//	1 = as suggested by the applicant
//	2 = because the applicant failed to suggest a figure
//	3 = because this figure better characterizes the invention
//	4 = none of the figures is to be published with the abstract
//
//	Enumerated values will map to these as follows:
//	1 = "chosen-by-applicant"
//	2 = "chosen-by-office"
//	3 = "changed-by-office"
//	4 = "none"
type Srepfiguretopublish *SrepfiguretopublishType

// SearchfeeprotestType ...
type SearchfeeprotestType struct {
	XMLName     xml.Name `json:"-" xml:"search-fee-protest"`
	ProtestAttr string   `json:",omitempty" xml:"protest,attr,omitempty"`
}

// Searchfeeprotest is Remark on protest
//
//	Attribute values:
//	no = No protest accompanied the payment of additional search fees
//	yes = The additional search fees were accompanied by the applicant's protest.
type Searchfeeprotest *SearchfeeprotestType

// SequencelistingfilingtimeType ...
type SequencelistingfilingtimeType struct {
	XMLName          xml.Name `json:"-" xml:"sequence-listing-filing-time"`
	TimeoffilingAttr string   `json:",omitempty" xml:"time-of-filing,attr,omitempty"`
	Value            string   `json:",omitempty" xml:",chardata"`
}

// Sequencelistingfilingtime is c. time of filing/furnishing
type Sequencelistingfilingtime *SequencelistingfilingtimeType

// SequencelistingmaterialformatType ...
type SequencelistingmaterialformatType struct {
	XMLName            xml.Name `json:"-" xml:"sequence-listing-material-format"`
	MaterialformatAttr string   `json:",omitempty" xml:"material-format,attr,omitempty"`
}

// Sequencelistingmaterialformat is b. format of material
type Sequencelistingmaterialformat *SequencelistingmaterialformatType

// SequencelistingmaterialtypeType ...
type SequencelistingmaterialtypeType struct {
	XMLName          xml.Name `json:"-" xml:"sequence-listing-material-type"`
	MaterialtypeAttr string   `json:",omitempty" xml:"material-type,attr,omitempty"`
}

// Sequencelistingmaterialtype is a. type of material
type Sequencelistingmaterialtype *SequencelistingmaterialtypeType

// BasislanguageforsearchType ...
type BasislanguageforsearchType struct {
	XMLName         xml.Name `json:"-" xml:"basis-language-for-search"`
	TranslationAttr string   `json:",omitempty" xml:"translation,attr,omitempty"`
}

// Basislanguageforsearch is +++++++++++++++++++++++++++++++++++++++
//
//	PCT ISR
//	PCT/ISA/210
//	Box 1: Basis of the Report
//	a. With regard to the language, the international search was carried out on the
//	basis of the international application in the language in which it was field,
//	unless otherwise indicated under this item.
//
//	attribute value = "no":
//
//	The international search was carried out on the basis of a translation of the
//	international application furnished to this Authority (Rule 23.1(b)).
//	+++++++++++++++++++++++++++++++++++++++
//	EPO
type Basislanguageforsearch *BasislanguageforsearchType

// SreppriorartdocsType ...
type SreppriorartdocsType struct {
	XMLName        xml.Name              `json:"-" xml:"srep-prior-art-docs"`
	PriorartAttr   string                `json:",omitempty" xml:"prior-art,attr"`
	Docpage        []*DocpageType        `json:",omitempty" xml:"doc-page"`
	Priorartxmldoc []*PriorartxmldocType `json:",omitempty" xml:"prior-art-xml-doc"`
}

// Sreppriorartdocs is This part preceded by - on old PCT/ISA/210 :
//
//	This international search report has been prepared by this ISA and is transmitted
//	to the applicant according to Article 18.
//	A copy is being transmitted to the International Bureau.
//
//	This international search report consists of a total of ______ sheets.
//	It is also accompanied by a copy of each prior art document cited in this report.
//	(This text will need modification for electronic transmission of the SR).
//
//	If the attribute value is "yes" then the prior art may accompany the SR as paper,
//	image data, or xml (application-body) data
//	+++++++++++++++++++++++++++++++++++++++
type Sreppriorartdocs *SreppriorartdocsType

// PriorartxmldocType ...
type PriorartxmldocType struct {
	XMLName      xml.Name `json:"-" xml:"prior-art-xml-doc"`
	IdAttr       string   `json:",omitempty" xml:"id,attr,omitempty"`
	FileAttr     string   `json:",omitempty" xml:"file,attr"`
	LangAttr     string   `json:",omitempty" xml:"lang,attr,omitempty"`
	CarriersAttr string   `json:",omitempty" xml:"carriers,attr,omitempty"`
	StatusAttr   string   `json:",omitempty" xml:"status,attr,omitempty"`
}

// Priorartxmldoc is XML version prior art document, if any
//
//	To be checked may be application-body.
//	+++++++++++++++++++++++++++++++++++++++
type Priorartxmldoc *PriorartxmldocType

// SrepprotestfeesType ...
type SrepprotestfeesType struct {
	XMLName         xml.Name `json:"-" xml:"srep-protest-fees"`
	SrepprotestAttr string   `json:",omitempty" xml:"srep-protest,attr,omitempty"`
}

// Srepprotestfees is +++++++++++++++++++++++++++++++++++++++
//
//	PCT ISR
//	Form PCT/ISA/220 (January 2004)
//	Old form check box 3
//	+++++++++++++++++++++++++++++++++++++++
//	srep-protest-fees:
//	With regard to the protest against payment of (an) additional fee(s)
//	under Rule 40.2, the applicant is notified that:
//
//	if yes:
//	the protest together with the decision thereon has been transmitted to the
//	International Bureau together with the applicant s request to forward the texts
//	of both the protest and the decision thereon to the designated Offices.
//
//	if no:
//	no decision has been made yet on the protest; the applicant will be notified
//	as soon as a decision is made.
//	-
//	Sytlesheet note: this data is followed by Reminders and Notes (if printed)
//	otherwise put a link in to the relevant text.
//	+++++++++++++++++++++++++++++++++++++++
type Srepprotestfees *SrepprotestfeesType

// SrepestablishedType ...
type SrepestablishedType struct {
	XMLName             xml.Name `json:"-" xml:"srep-established"`
	SrepestablishedAttr string   `json:",omitempty" xml:"srep-established,attr,omitempty"`
}

// Srepestablished is *******************************************************************************
//
//	END OF EP SR
//
//	The following elements (to maths section) are for PCT (ISR) use only and
//	are kept in if EPO use this DTD to process ISR data.
//	*******************************************************************************
//	+++++++++++++++++++++++++++++++++++++++
//	PCT ISR
//	Form PCT/ISA/220 (January 2004)
//	Old form check boxes 1 and 2
//	+++++++++++++++++++++++++++++++++++++++
//
//	srep-established:
//
//	If yes:
//	The applicant is hereby notified that the international search report and the
//	written opinion of the International Searching Authority have been established
//	and are transmitted herewith.
//
//	Filing of amendments and statement under Article 19:
//	The applicant is entitled, if he so wishes, to amend the claims of the
//	international application (see Rule 46):
//	When? The time limit for filing such amendments is normally two months from the
//	date of transmittal of the international search report.
//	Where? Directly to the International Bureau of WIPO, 34 chemin des Colombettes
//	1211 Geneva 20, Switzerland, Facsimile No.: +41 22 740 14 35
//
//	if no:
//	The applicant is hereby notified that no international search report will be
//	established and that the declaration under Article 17(2)(a) to that effect and
//	the written opinion of the International Searching Authority are transmitted
//	herewith.
//	+++++++++++++++++++++++++++++++++++++++
type Srepestablished *SrepestablishedType

// BibliographicdataType is IFD tag = 132; ST.30 tag = 151
type BibliographicdataType struct {
	// XMLName                       xml.Name `json:"-" xml:"bibliographic-data"`
	IdAttr                        string                        `json:",omitempty" xml:"id,attr,omitempty"`
	LangAttr                      string                        `json:",omitempty" xml:"lang,attr,omitempty"`
	CountryAttr                   string                        `json:",omitempty" xml:"country,attr,omitempty"`
	StatusAttr                    string                        `json:",omitempty" xml:"status,attr,omitempty"`
	ExchPublicationreference      []*PublicationreferenceType   `json:",omitempty" xml:"publication-reference"`
	ExchPreviouslyfiledapp        *PreviouslyfiledappType       `json:",omitempty" xml:"previously-filed-app"`
	ExchPrecedingpublicationdate  *PrecedingpublicationdateType `json:",omitempty" xml:"preceding-publication-date"`
	ExchDateofcomingintoforce     *DateofcomingintoforceType    `json:",omitempty" xml:"date-of-coming-into-force"`
	ExchExtendedkindcode          *Extendedkindcode             `json:",omitempty" xml:"extended-kind-code"`
	ExchClassificationipc         *ClassificationipcType        `json:",omitempty" xml:"classification-ipc"`
	ExchClassificationsipcr       *ClassificationsipcrType      `json:",omitempty" xml:"classifications-ipcr"`
	ExchClassificationnational    *ClassificationnationalType   `json:",omitempty" xml:"classification-national"`
	ExchPatentclassifications     *PatentclassificationsType    `json:",omitempty" xml:"patent-classifications"`
	ExchApplicationreference      []*ApplicationreferenceType   `json:",omitempty" xml:"application-reference"`
	ExchLanguageoffiling          *LanguageoffilingType         `json:",omitempty" xml:"language-of-filing"`
	ExchLanguageofpublication     *LanguageofpublicationType    `json:",omitempty" xml:"language-of-publication"`
	ExchPriorityclaims            *PriorityclaimsType           `json:",omitempty" xml:"priority-claims"`
	ExchParties                   *PartiesType                  `json:",omitempty" xml:"parties"`
	ExchDesignationofstates       *DesignationofstatesType      `json:",omitempty" xml:"designation-of-states"`
	ExchInventiontitle            []*InventiontitleType         `json:",omitempty" xml:"invention-title"`
	ExchDatesofpublicavailability *Datesofpublicavailability    `json:",omitempty" xml:"dates-of-public-availability"`
	ExchSt50republication         *St50republicationType        `json:",omitempty" xml:"st50-republication"`
	ExchReferencescited           *ReferencescitedType          `json:",omitempty" xml:"references-cited"`
}

// Bibliographicdata is Bibliographic data covers all information printed on the first page, excluding abstracts.
type Bibliographicdata *BibliographicdataType

// St50republicationType ...
type St50republicationType struct {
	XMLName              xml.Name                `json:"-" xml:"st50-republication"`
	StatusAttr           string                  `json:",omitempty" xml:"status,attr,omitempty"`
	Typeofcorrection     *TypeofcorrectionType   `json:",omitempty" xml:"type-of-correction"`
	Republicationcode    *RepublicationcodeType  `json:",omitempty" xml:"republication-code"`
	Cancellationdate     *CancellationdateType   `json:",omitempty" xml:"cancellation-date"`
	Modifications        *ModificationsType      `json:",omitempty" xml:"modifications"`
	Republicationnotes   *RepublicationnotesType `json:",omitempty" xml:"republication-notes"`
	ExchCorrectionnotice *CorrectionnoticeType   `json:",omitempty" xml:"correction-notice"`
}

// St50republication ...
type St50republication *St50republicationType

// RepublicationnoteType ...
type RepublicationnoteType struct {
	XMLName      xml.Name `json:"-" xml:"republication-note"`
	SequenceAttr string   `json:",omitempty" xml:"sequence,attr,omitempty"`
	LangAttr     string   `json:",omitempty" xml:"lang,attr,omitempty"`
	Value        string   `json:",omitempty" xml:",chardata"`
}

// Republicationnote ...
type Republicationnote *RepublicationnoteType

// ModifiedpartType ...
type ModifiedpartType struct {
	XMLName          xml.Name              `json:"-" xml:"modified-part"`
	SequenceAttr     string                `json:",omitempty" xml:"sequence,attr,omitempty"`
	LangAttr         string                `json:",omitempty" xml:"lang,attr,omitempty"`
	Modifiedpartname *ModifiedpartnameType `json:",omitempty" xml:"modified-part-name"`
	Modifieditem     []*ModifieditemType   `json:",omitempty" xml:"modified-item"`
}

// Modifiedpart is Part of the document other than bibliography affected by the correction information (ST.32 : B155EP)
type Modifiedpart *ModifiedpartType

// ModifieditemType ...
type ModifieditemType struct {
	XMLName      xml.Name `json:"-" xml:"modified-item"`
	SequenceAttr string   `json:",omitempty" xml:"sequence,attr,omitempty"`
	Value        string   `json:",omitempty" xml:",chardata"`
}

// Modifieditem ...
type Modifieditem *ModifieditemType

// InidcodeType ...
type InidcodeType struct {
	XMLName      xml.Name `json:"-" xml:"inid-code"`
	SequenceAttr string   `json:",omitempty" xml:"sequence,attr,omitempty"`
	Value        string   `json:",omitempty" xml:",chardata"`
}

// Inidcode is INID-codes affected by the correction information (ST.32 : B153)
type Inidcode *InidcodeType

// ReferencescitedType ...
type ReferencescitedType struct {
	XMLName      xml.Name        `json:"-" xml:"references-cited"`
	StatusAttr   string          `json:",omitempty" xml:"status,attr,omitempty"`
	Text         *string         `json:",omitempty" xml:"text"`
	ExchCitation []*CitationType `json:",omitempty" xml:"citation"`
}

// Referencescited is Origin of the citation is indicated as follows
//
//	SEA Originates from the Search report
//	APP Cited by the Applicant
//	EXA Revealed during the Examination phase
//	OPP Revealed during the Opposition phase
//	115 Article 115 (Observation by third parties)
//	OTH Other documents of interest (cited in compte rendu but not in search report)
//	CH2 cited during PCT chapter II (preliminary examination)
//	Attribute "sequence" indicates the sequence within "srep-phase"
//	Sequence will restart with every new "srep-phase"
//	Patent citations are exchanged in "patcit", as a patent document-id
//	NPL citations are exchanged in "nplcit", as a string of freetext with embedded reference to patent
//	document or NPL
//	Patent document-ids and NPL reference numbers embedded in the NPL citation are extracted and exchanged
//	in "corresponding-docs"
//	Categories are exchanged in "category" in a concatenated string, one occurrence of "category" per
//	citation
type Referencescited *ReferencescitedType

// CitationType ...
type CitationType struct {
	XMLName               xml.Name                 `json:"-" xml:"citation"`
	IdAttr                string                   `json:",omitempty" xml:"id,attr,omitempty"`
	CitedphaseAttr        string                   `json:",omitempty" xml:"cited-phase,attr,omitempty"`
	NameAttr              string                   `json:",omitempty" xml:"name,attr,omitempty"`
	CiteddateAttr         int                      `json:",omitempty" xml:"cited-date,attr,omitempty"`
	CitedbyAttr           string                   `json:",omitempty" xml:"cited-by,attr,omitempty"`
	SrepofficeAttr        string                   `json:",omitempty" xml:"srep-office,attr,omitempty"`
	SequenceAttr          string                   `json:",omitempty" xml:"sequence,attr,omitempty"`
	Patcit                *PatcitType              `json:",omitempty" xml:"patcit"`
	Nplcit                *NplcitType              `json:",omitempty" xml:"nplcit"`
	Relpassage            []*RelpassageType        `json:",omitempty" xml:"rel-passage"`
	Category              []*CategoryType          `json:",omitempty" xml:"category"`
	Relclaims             []*string                `json:",omitempty" xml:"rel-claims"`
	ExchCorrespondingdocs []*CorrespondingdocsType `json:",omitempty" xml:"corresponding-docs"`
}

// Citation is *******************************
//
//	CITATIONS
//	*******************************
//	Grouping tag for patent literature (patcit) or non-patent literature (nplcit) plus data related to those
//	citations.
type Citation *CitationType

// PriorityclaimType ...
type PriorityclaimType struct {
	XMLName                     xml.Name                  `json:"-" xml:"priority-claim"`
	IdAttr                      string                    `json:",omitempty" xml:"id,attr,omitempty"`
	DataformatAttr              string                    `json:",omitempty" xml:"data-format,attr,omitempty"`
	StatusAttr                  string                    `json:",omitempty" xml:"status,attr,omitempty"`
	SequenceAttr                string                    `json:",omitempty" xml:"sequence,attr,omitempty"`
	Documentid                  *DocumentidType           `json:",omitempty" xml:"document-id"`
	Officeoffiling              *OfficeoffilingType       `json:",omitempty" xml:"office-of-filing"`
	Prioritydocrequested        *PrioritydocrequestedType `json:",omitempty" xml:"priority-doc-requested"`
	Prioritydocattached         *PrioritydocattachedType  `json:",omitempty" xml:"priority-doc-attached"`
	ExchPrioritylinkagetype     string                    `json:",omitempty" xml:"priority-linkage-type"`
	ExchPriorityactiveindicator string                    `json:",omitempty" xml:"priority-active-indicator"`
}

// Priorityclaim is Priority-claim, IFD tags :
//
//	080 = country;
//	090 = doc-number;
//	180 = kind-code (generated from kind in combination with linkage-type);
//	100= date;
//	Priority-claim,ST.30 tags :
//	330 = country;
//	310 = doc-number;
//	A31 = kind-code;
//	320 = date;
//	Notes on Contents :
//	When data-format = "original", ONLY the priority-number
//	DOCDB keeps record of very early publications; where possible these are grouped into families; in these
//	instances :
//	doc-number = suffixed by letter 'T';
//	date = all zeroes;
//	priority-linkage-type = 'T';
//	DOCDB has reformatted PCT applications for reasons of standardisation, in these instances :
//	country = country of filing;
//	doc-number = numerical string, preceded by year indication;
//	kind = 'W';
//	Linkage type and active indicator serve EPO internal business needs :
//	priority-linkage-type = 1 byte indication of priority relation, eg. '1' = "for continuation";
//	priority-active-indicate = Y or N included in the priority picture that defines EPO simple patent
//	family;
//	Attributes used :
//	sequence = sequence as printed on the published document;
//	data-format = "docdb" - standardised following the DOCDB standardisation rules - then exchange of a full
//	set of reference;
//	data-format= "epodoc" - format as represented in espacenet, concatenated in "doc-number";
//	data-format = "original" - as supplied by the provider - then exchange of "doc-number" only;
//	NOTE THAT "sequence" restarts with every change of "data-format"
//	priority claims in different formats but with identical sequence numbers cannot be guaranteed to be
//	representations of one and the same entity
type Priorityclaim *PriorityclaimType

// AgentType ...
type AgentType struct {
	XMLName      xml.Name           `json:"-" xml:"agent"`
	SequenceAttr string             `json:",omitempty" xml:"sequence,attr"`
	ReptypeAttr  string             `json:",omitempty" xml:"rep-type,attr"`
	Addressbook  []*AddressbookType `json:",omitempty" xml:"addressbook"`
}

// Agent is Agent or common representative (Rules 90.1, 90.2)
type Agent *AgentType

// DeceasedinventorType ...
type DeceasedinventorType struct {
	XMLName          xml.Name          `json:"-" xml:"deceased-inventor"`
	SequenceAttr     string            `json:",omitempty" xml:"sequence,attr"`
	LangAttr         string            `json:",omitempty" xml:"lang,attr,omitempty"`
	DataformatAttr   string            `json:",omitempty" xml:"data-format,attr,omitempty"`
	ExchInventorname *InventornameType `json:",omitempty" xml:"inventor-name"`
}

// Deceasedinventor is Deceased inventor name
type Deceasedinventor *DeceasedinventorType

// InventorType ...
type InventorType struct {
	XMLName          xml.Name              `json:"-" xml:"inventor"`
	SequenceAttr     string                `json:",omitempty" xml:"sequence,attr,omitempty"`
	DesignationAttr  string                `json:",omitempty" xml:"designation,attr,omitempty"`
	DataformatAttr   string                `json:",omitempty" xml:"data-format,attr,omitempty"`
	StatusAttr       string                `json:",omitempty" xml:"status,attr,omitempty"`
	ExchInventorname []*InventornameType   `json:",omitempty" xml:"inventor-name"`
	Address          *AddressType          `json:",omitempty" xml:"address"`
	Residence        *ResidenceType        `json:",omitempty" xml:"residence"`
	Designatedstates *DesignatedstatesType `json:",omitempty" xml:"designated-states"`
}

// InventornameType ...
type InventornameType struct {
	XMLName        xml.Name `json:"-" xml:"inventor-name"`
	LangAttr       string   `json:",omitempty" xml:"lang,attr,omitempty"`
	DataformatAttr string   `json:",omitempty" xml:"data-format,attr,omitempty"`
	ExchNameGroup  *NameGroup
}

// Inventorname is Inventor name (without address information)
type Inventorname *InventornameType

// ApplicantType ...
type ApplicantType struct {
	XMLName                    xml.Name                        `json:"-" xml:"applicant"`
	SequenceAttr               string                          `json:",omitempty" xml:"sequence,attr,omitempty"`
	ApptypeAttr                string                          `json:",omitempty" xml:"app-type,attr,omitempty"`
	DesignationAttr            string                          `json:",omitempty" xml:"designation,attr,omitempty"`
	DataformatAttr             string                          `json:",omitempty" xml:"data-format,attr,omitempty"`
	StatusAttr                 string                          `json:",omitempty" xml:"status,attr,omitempty"`
	ExchApplicantname          []*ApplicantnameType            `json:",omitempty" xml:"applicant-name"`
	Address                    *AddressType                    `json:",omitempty" xml:"address"`
	Nationality                *NationalityType                `json:",omitempty" xml:"nationality"`
	Residence                  *ResidenceType                  `json:",omitempty" xml:"residence"`
	Usrights                   []*UsrightsType                 `json:",omitempty" xml:"us-rights"`
	Designatedstates           *DesignatedstatesType           `json:",omitempty" xml:"designated-states"`
	Designatedstatesasinventor *DesignatedstatesasinventorType `json:",omitempty" xml:"designated-states-as-inventor"`
}

// Applicant is DOCDB only keeps a record of applicant-name and country of residence; address is only available
//
//	sporadically
//	address is included in applicant data-format="docdba"
//	country of residence in applicant data-format="docdb"
//	Attributes used on "applicant" level
//	sequence = sequence as printed on the published document;
//	NOTE THAT "sequence" restarts with every change of "data-format"
//	applicants in different format but with identical sequence numbers cannot be guaranteed to be
//	representations of one and the same
//	Attributes used on "applicant-name" level
//	data-format = "docdb", standardised following DOCDB primary standardisation rules;
//	data-format = "docdba", standardised following DOCDB secondary rules (translation upper-case);
//	data-format = "original", as supplied by the provider, converted to UTF8;
//	IFD tags, applicant :
//	121 = name "docdb";
//	120 = name "docdba";
//	973 = name "original";
//	123 = address;
//	122 = residence;
//	ST.30 tags, applicant :
//	710 = name;
//	714 = country of residence;
type Applicant *ApplicantType

// UsrightsType ...
type UsrightsType struct {
	XMLName            xml.Name `json:"-" xml:"us-rights"`
	TodeadinventorAttr string   `json:",omitempty" xml:"to-dead-inventor,attr"`
	KindAttr           string   `json:",omitempty" xml:"kind,attr"`
	Value              string   `json:",omitempty" xml:",chardata"`
}

// Usrights is ***
//
//	This person is successor to the rights of an inventor who is deceased, insane, or
//	legally incapacitated, for the purposes of the designation of the United States
//	of America
type Usrights *UsrightsType

// ApplicantnameType ...
type ApplicantnameType struct {
	XMLName        xml.Name `json:"-" xml:"applicant-name"`
	LangAttr       string   `json:",omitempty" xml:"lang,attr,omitempty"`
	DataformatAttr string   `json:",omitempty" xml:"data-format,attr,omitempty"`
	Name           *NameType
}

// Applicantname is The name of the applicant (without address information)
type Applicantname *ApplicantnameType

// InventiontitleType ...
type InventiontitleType struct {
	XMLName        xml.Name   `json:"-" xml:"invention-title"`
	IdAttr         string     `json:",omitempty" xml:"id,attr,omitempty"`
	LangAttr       string     `json:",omitempty" xml:"lang,attr,omitempty"`
	DataformatAttr string     `json:",omitempty" xml:"data-format,attr,omitempty"`
	StatusAttr     string     `json:",omitempty" xml:"status,attr,omitempty"`
	B              []*BType   `json:",omitempty" xml:"b"`
	I              []*IType   `json:",omitempty" xml:"i"`
	U              []*UType   `json:",omitempty" xml:"u"`
	Sup            []*SupType `json:",omitempty" xml:"sup"`
	Sub            []*SubType `json:",omitempty" xml:"sub"`
	Value          string     `json:",omitempty" xml:",chardata"`
}

// Inventiontitle is Invention title, text embedded in tag itself,
//
//	Invention title, IFD tags :
//	130 = data-format "docdb";
//	954 = data-format "original";
//	131 = language;
//	Invention title, ST.30 tags :
//	541 = title;
//	540 = language;
//	Attributes used :
//	lang=language-code, when natural language;
//	data-format="docdb", when natural language;
//	data-format="original", when original language character set, converted to UTF8;
type Inventiontitle *InventiontitleType

// Extendedkindcode ...
type Extendedkindcode struct {
	XMLName    xml.Name `json:"-" xml:"extended-kind-code"`
	StatusAttr string   `json:",omitempty" xml:"status,attr,omitempty"`
	Value      string   `json:",omitempty" xml:",chardata"`
}

// DesignationofstatesType ...
type DesignationofstatesType struct {
	XMLName                           xml.Name                               `json:"-" xml:"designation-of-states"`
	StatusAttr                        string                                 `json:",omitempty" xml:"status,attr,omitempty"`
	ExchDesignationpct                *DesignationpctType                    `json:",omitempty" xml:"designation-pct"`
	ExchDesignationepc                *DesignationepcType                    `json:",omitempty" xml:"designation-epc"`
	ExchContractingstates             *ContractingstatesType                 `json:",omitempty" xml:"contracting-states"`
	Precautionarydesignationstatement *PrecautionarydesignationstatementType `json:",omitempty" xml:"precautionary-designation-statement"`
	ExchExclusionfromdesignation      *ExclusionfromdesignationType          `json:",omitempty" xml:"exclusion-from-designation"`
}

// Designationofstates is Desigation PCT, IFD tags :
//
//	081 = designated country;
//	082 = designated country for a regional patent;
//	Designation EPC, IFD tags :
//	081 = contracting-states;
//	083 = extension-states;
//	Designation other authorities, e.g. ARIPO, OAPI
//	081 = contracting states;
//	Designation of states not exchanged in ST.30;
type Designationofstates *DesignationofstatesType

// Datesofpublicavailability ...
type Datesofpublicavailability struct {
	XMLName                              xml.Name                              `json:"-" xml:"dates-of-public-availability"`
	StatusAttr                           string                                `json:",omitempty" xml:"status,attr,omitempty"`
	ExchGazettereference                 *ExchangegazettereferenceType         `json:",omitempty" xml:"gazette-reference"`
	ExchAbstractreference                *AbstractreferenceType                `json:",omitempty" xml:"abstract-reference"`
	ExchSupplementalsreppub              *Supplementalsreppub                  `json:",omitempty" xml:"supplemental-srep-pub"`
	ExchGazettepubannouncement           *Gazettepubannouncement               `json:",omitempty" xml:"gazette-pub-announcement"`
	ExchModifiedfirstpagepub             *ModifiedfirstpagepubType             `json:",omitempty" xml:"modified-first-page-pub"`
	ExchModifiedcompletespecpub          *ModifiedcompletespecpubType          `json:",omitempty" xml:"modified-complete-spec-pub"`
	ExchUnexaminednotprintedwithoutgrant *UnexaminednotprintedwithoutgrantType `json:",omitempty" xml:"unexamined-not-printed-without-grant"`
	ExchExaminednotprintedwithoutgrant   *ExaminednotprintedwithoutgrantType   `json:",omitempty" xml:"examined-not-printed-without-grant"`
	ExchUnexaminedprintedwithoutgrant    *UnexaminedprintedwithoutgrantType    `json:",omitempty" xml:"unexamined-printed-without-grant"`
	ExchExaminedprintedwithoutgrant      *ExaminedprintedwithoutgrantType      `json:",omitempty" xml:"examined-printed-without-grant"`
	ExchPrintedwithgrant                 *PrintedwithgrantType                 `json:",omitempty" xml:"printed-with-grant"`
	ExchClaimsonlyavailable              *ClaimsonlyavailableType              `json:",omitempty" xml:"claims-only-available"`
	ExchNotprintedwithgrant              *NotprintedwithgrantType              `json:",omitempty" xml:"not-printed-with-grant"`
	Termofgrant                          *TermofgrantType                      `json:",omitempty" xml:"term-of-grant"`
	ExchInvalidationofpatent             *InvalidationofpatentType             `json:",omitempty" xml:"invalidation-of-patent"`
	ExchPrintedasamended                 *PrintedasamendedType                 `json:",omitempty" xml:"printed-as-amended"`
}

// PrintedwithgrantType ...
type PrintedwithgrantType struct {
	XMLName    xml.Name             `json:"-" xml:"printed-with-grant"`
	LangAttr   string               `json:",omitempty" xml:"lang,attr,omitempty"`
	Documentid *DocumentidPrintType `json:",omitempty" xml:"document-id"`
	Text       *string              `json:",omitempty" xml:"text"`
}

// Printedwithgrant is Date of publication by printing or similar process of a document, on which grant has taken place on or
//
//	before the said date.
//	(INID 45, ST.32:B450)
type Printedwithgrant *PrintedwithgrantType

// AbstractreferenceType ...
type AbstractreferenceType struct {
	XMLName    xml.Name             `json:"-" xml:"abstract-reference"`
	LangAttr   string               `json:",omitempty" xml:"lang,attr,omitempty"`
	Documentid *DocumentidPrintType `json:",omitempty" xml:"document-id"`
	Text       *string              `json:",omitempty" xml:"text"`
}

// ModifiedcompletespecpubType ...
type ModifiedcompletespecpubType struct {
	XMLName    xml.Name             `json:"-" xml:"modified-complete-spec-pub"`
	LangAttr   string               `json:",omitempty" xml:"lang,attr,omitempty"`
	Documentid *DocumentidPrintType `json:",omitempty" xml:"document-id"`
	Text       *string              `json:",omitempty" xml:"text"`
}

// ModifiedfirstpagepubType ...
type ModifiedfirstpagepubType struct {
	XMLName    xml.Name             `json:"-" xml:"modified-first-page-pub"`
	LangAttr   string               `json:",omitempty" xml:"lang,attr,omitempty"`
	Documentid *DocumentidPrintType `json:",omitempty" xml:"document-id"`
	Text       *string              `json:",omitempty" xml:"text"`
}

// NotprintedwithgrantType ...
type NotprintedwithgrantType struct {
	XMLName    xml.Name             `json:"-" xml:"not-printed-with-grant"`
	LangAttr   string               `json:",omitempty" xml:"lang,attr,omitempty"`
	Documentid *DocumentidPrintType `json:",omitempty" xml:"document-id"`
	Text       *string              `json:",omitempty" xml:"text"`
}

// Notprintedwithgrant is Not printed document with grant
//
//	(INID 47, ST.32:B470)
type Notprintedwithgrant *NotprintedwithgrantType

// ClaimsonlyavailableType ...
type ClaimsonlyavailableType struct {
	XMLName    xml.Name             `json:"-" xml:"claims-only-available"`
	LangAttr   string               `json:",omitempty" xml:"lang,attr,omitempty"`
	Documentid *DocumentidPrintType `json:",omitempty" xml:"document-id"`
	Text       *string              `json:",omitempty" xml:"text"`
}

// Claimsonlyavailable is Document claims only available. (INID 46, ST.32 B460)
type Claimsonlyavailable *ClaimsonlyavailableType

// ExaminedprintedwithoutgrantType ...
type ExaminedprintedwithoutgrantType struct {
	XMLName    xml.Name             `json:"-" xml:"examined-printed-without-grant"`
	LangAttr   string               `json:",omitempty" xml:"lang,attr,omitempty"`
	Documentid *DocumentidPrintType `json:",omitempty" xml:"document-id"`
	Text       *string              `json:",omitempty" xml:"text"`
}

// Examinedprintedwithoutgrant is Examined, printed document without grant.
//
//	(INID 44, ST.32:B440)
type Examinedprintedwithoutgrant *ExaminedprintedwithoutgrantType

// UnexaminedprintedwithoutgrantType ...
type UnexaminedprintedwithoutgrantType struct {
	XMLName    xml.Name             `json:"-" xml:"unexamined-printed-without-grant"`
	LangAttr   string               `json:",omitempty" xml:"lang,attr,omitempty"`
	Documentid *DocumentidPrintType `json:",omitempty" xml:"document-id"`
	Text       *string              `json:",omitempty" xml:"text"`
}

// Unexaminedprintedwithoutgrant is Unexamined, printed document without grant.
//
//	(INID 43, ST.32:B430)
type Unexaminedprintedwithoutgrant *UnexaminedprintedwithoutgrantType

// ExaminednotprintedwithoutgrantType ...
type ExaminednotprintedwithoutgrantType struct {
	XMLName    xml.Name             `json:"-" xml:"examined-not-printed-without-grant"`
	LangAttr   string               `json:",omitempty" xml:"lang,attr,omitempty"`
	Documentid *DocumentidPrintType `json:",omitempty" xml:"document-id"`
	Text       *string              `json:",omitempty" xml:"text"`
}

// Examinednotprintedwithoutgrant is Examined, not printed document without grant.
//
//	(INID 42, ST.32:B420)
type Examinednotprintedwithoutgrant *ExaminednotprintedwithoutgrantType

// UnexaminednotprintedwithoutgrantType ...
type UnexaminednotprintedwithoutgrantType struct {
	XMLName    xml.Name             `json:"-" xml:"unexamined-not-printed-without-grant"`
	LangAttr   string               `json:",omitempty" xml:"lang,attr,omitempty"`
	Documentid *DocumentidPrintType `json:",omitempty" xml:"document-id"`
	Text       *string              `json:",omitempty" xml:"text"`
}

// Unexaminednotprintedwithoutgrant is Unexamined, not printed document without grant.
//
//	(INID 41, ST.32:B410)
type Unexaminednotprintedwithoutgrant *UnexaminednotprintedwithoutgrantType

// ExchangegazettereferenceType ...
type ExchangegazettereferenceType struct {
	XMLName     xml.Name        `json:"-" xml:"gazette-reference"`
	IdAttr      string          `json:",omitempty" xml:"id,attr,omitempty"`
	CountryAttr string          `json:",omitempty" xml:"country,attr,omitempty"`
	LangAttr    string          `json:",omitempty" xml:"lang,attr,omitempty"`
	Gazettenum  *GazettenumType `json:",omitempty" xml:"gazette-num"`
	Date        int             `json:",omitempty" xml:"date"`
	Text        *string         `json:",omitempty" xml:"text"`
}

// Gazettereference is Information about an office's gazette or bulletin - paper, electronic, etc.
//
//	where, the details of the patent publication are also given.
//	Examples WIPO gazette and EPO Bulletin The date is mandatory.
//	(ST.32:B405)
type Gazettereference *ExchangegazettereferenceType

// PatentclassificationsType ...
type PatentclassificationsType struct {
	XMLName              xml.Name                    `json:"-" xml:"patent-classifications"`
	IDAttr               string                      `json:",omitempty" xml:"ID,attr,omitempty"`
	Patentclassification []*PatentclassificationType `json:",omitempty" xml:"patent-classification"`
	Combinationset       []*CombinationsetType       `json:",omitempty" xml:"combination-set"`
}

// Patentclassifications is This sequence will contain at least one of patent-classification or one of combination-set
//
//	patent-classifications - e.g. CPC, CPCNO, FI, FTERM, DOCUS
//	combination-sets - e.g. patent-classifications in sequence
type Patentclassifications *PatentclassificationsType

// CombinationsetType ...
type CombinationsetType struct {
	XMLName         xml.Name               `json:"-" xml:"combination-set"`
	IDAttr          string                 `json:",omitempty" xml:"ID,attr,omitempty"`
	StatusAttr      string                 `json:",omitempty" xml:"status,attr,omitempty"`
	SequenceAttr    string                 `json:",omitempty" xml:"sequence,attr"`
	Groupnumber     string                 `json:",omitempty" xml:"group-number"`
	Combinationrank []*CombinationrankType `json:",omitempty" xml:"combination-rank"`
}

// Combinationset ...
type Combinationset *CombinationsetType

// Classificationscheme ...
type Classificationscheme struct {
	XMLName    xml.Name `json:"-" xml:"classification-scheme"`
	OfficeAttr string   `json:",omitempty" xml:"office,attr"`
	SchemeAttr string   `json:",omitempty" xml:"scheme,attr"`
	Edition    string   `json:",omitempty" xml:"edition"`
	Date       string   `json:",omitempty" xml:"date"`
}

// Class ...
type Class struct {
	XMLName       xml.Name `json:"-" xml:"class"`
	ClasstypeAttr string   `json:",omitempty" xml:"class-type,attr,omitempty"`
}

// Actiondate ...
type Actiondate struct {
	XMLName xml.Name `json:"-" xml:"action-date"`
	Date    string   `json:",omitempty" xml:"date"`
}

// PatentclassificationType ...
type PatentclassificationType struct {
	XMLName                  xml.Name              `json:"-" xml:"patent-classification"`
	IDAttr                   string                `json:",omitempty" xml:"ID,attr,omitempty"`
	StatusAttr               string                `json:",omitempty" xml:"status,attr,omitempty"`
	SequenceAttr             string                `json:",omitempty" xml:"sequence,attr,omitempty"`
	Classificationscheme     *Classificationscheme `json:",omitempty" xml:"classification-scheme"`
	Classificationsymbol     string                `json:",omitempty" xml:"classification-symbol"`
	Section                  string                `json:",omitempty" xml:"section"`
	Class                    *ClassType            `json:",omitempty" xml:"class"`
	Subclass                 string                `json:",omitempty" xml:"subclass"`
	Maingroup                string                `json:",omitempty" xml:"main-group"`
	Subgroup                 string                `json:",omitempty" xml:"subgroup"`
	Classificationlevel      string                `json:",omitempty" xml:"classification-level"`
	Symbolposition           string                `json:",omitempty" xml:"symbol-position"`
	Classificationvalue      string                `json:",omitempty" xml:"classification-value"`
	Classificationstatus     string                `json:",omitempty" xml:"classification-status"`
	Classificationdatasource string                `json:",omitempty" xml:"classification-data-source"`
	Generatingoffice         string                `json:",omitempty" xml:"generating-office"`
	Actiondate               *ActiondateType       `json:",omitempty" xml:"action-date"`
}

// Patentclassification is Notes on Contents
//
//	scheme = EC office = EP - from A through H
//	scheme = ICO office = EP - from K through Z
//	scheme = IDT office = EP "indeling der techniek"
//	scheme = ECNO office = cc
//	scheme = DOCUS office = US
//	scheme = FI office = JP
//	scheme = FTERM office = JP
//	From Jan/2013 onwards
//	schemes EC, ICO, IDT, ECNO discontinued
//	schemes CPC and CPCNO introduced
type Patentclassification *PatentclassificationType

// ClassificationipcType ...
type ClassificationipcType struct {
	XMLName                 xml.Name                       `json:"-" xml:"classification-ipc"`
	IdAttr                  string                         `json:",omitempty" xml:"id,attr,omitempty"`
	StatusAttr              string                         `json:",omitempty" xml:"status,attr,omitempty"`
	Edition                 *EditionType                   `json:",omitempty" xml:"edition"`
	Mainclassification      []*MainclassificationType      `json:",omitempty" xml:"main-classification"`
	Furtherclassification   []*FurtherclassificationType   `json:",omitempty" xml:"further-classification"`
	Additionalinfo          []*AdditionalinfoType          `json:",omitempty" xml:"additional-info"`
	Linkedindexingcodegroup []*LinkedindexingcodegroupType `json:",omitempty" xml:"linked-indexing-code-group"`
	Unlinkedindexingcode    []*UnlinkedindexingcodeType    `json:",omitempty" xml:"unlinked-indexing-code"`
	Text                    []*string                      `json:",omitempty" xml:"text"`
}

// Classificationipc is IFD tag = 070
//
//	ST.30 tags are :
//	511 = main-classification;
//	512 = further-classification;
//	513 = additonal info;
//	514 = linked-indexing-code-group;
//	515 = unlinked-indexing-code;
//	510 = text;
//	Notes on Contents
//	when qualified by 'A' : main-classification;
//	when qualified by 'B' : further-classification;
//	when qualified by '-' : additional-info;
//	when qualified by 'J' through 'Y' : linked-indexing-code-group;
//	when qualified by 'Z' : unlinked-indexing-code;
//	when qualified by none of the above : text;
//	edition is generally included in the symbol;
type Classificationipc *ClassificationipcType

// ApplicationreferenceType ...
type ApplicationreferenceType struct {
	XMLName              xml.Name        `json:"-" xml:"application-reference"`
	IdAttr               string          `json:",omitempty" xml:"id,attr,omitempty"`
	DocidAttr            string          `json:",omitempty" xml:"doc-id,attr,omitempty"`
	AppltypeAttr         string          `json:",omitempty" xml:"appl-type,attr,omitempty"`
	IsrepresentativeAttr string          `json:",omitempty" xml:"is-representative,attr,omitempty"`
	DataformatAttr       string          `json:",omitempty" xml:"data-format,attr,omitempty"`
	StatusAttr           string          `json:",omitempty" xml:"status,attr,omitempty"`
	Documentid           *DocumentidType `json:",omitempty" xml:"document-id"`
}

// Applicationreference is NOTE - these annotations have no bearance on"application-reference" unless referred to INSIDE element
//
//	"bibliographic-data"
//
//	Application-reference, IFD tags :
//	040 = doc-number;
//	070 = kind-code;
//	050 = date
//	country is not included as separate entity;
//	Application-reference,ST.30 tags :
//	A21 = country;
//	210 = doc-number;
//	221 = kind-code;
//	220 = date;
//	Notes on Contents :
//	Defined "repeatable" to be able to cater for multiple formats;
//	when data-format = "original", application-reference will contain ONLY the application-number
//	DOCDB keeps record of very early publications; in these instances
//	doc-number = suffixed by letter 'D';
//	date = all zeroes;
//	DOCDB contains "exotic" kind-codes introduced for internal EPO business purposes, in these instances
//	kind = 'D', 'K', 'L', 'M', 'N', 'Q';
//	DOCDB has reformatted PCT applications for reasons of standardisation, in these instances :
//	country = country of filing;
//	doc-number = numerical string, preceded by year indication;
//	kind = 'W';
//	Attributes used :
//	data-format = "docdb" - standardised following DOCDB standardisation rules - then exchange of a full set
//	of reference;
//	data-format= "epodoc" - format as represented in espacenet; concatenated in "doc-number"
//	data-format = "original" - as supplied by the provider - then exchange of "doc-number" only;
//	is-representative, identifies whether this application is the family representative in the EPO simple
//	patent family
type Applicationreference *ApplicationreferenceType

// PreviouslyfiledappType ...
type PreviouslyfiledappType struct {
	XMLName    xml.Name `json:"-" xml:"previously-filed-app"`
	StatusAttr string   `json:",omitempty" xml:"status,attr,omitempty"`
	Value      string   `json:",omitempty" xml:",chardata"`
}

// Previouslyfiledapp ...
type Previouslyfiledapp *PreviouslyfiledappType

// DateofcomingintoforceType ...
type DateofcomingintoforceType struct {
	XMLName    xml.Name `json:"-" xml:"date-of-coming-into-force"`
	StatusAttr string   `json:",omitempty" xml:"status,attr,omitempty"`
	Date       int      `json:",omitempty" xml:"date"`
}

// Dateofcomingintoforce is Date of coming into force of DE utility model = "Eintragungstag"
//
//	IFD tag = 151; not in ST.30
type Dateofcomingintoforce *DateofcomingintoforceType

// PrecedingpublicationdateType ...
type PrecedingpublicationdateType struct {
	XMLName    xml.Name `json:"-" xml:"preceding-publication-date"`
	StatusAttr string   `json:",omitempty" xml:"status,attr,omitempty"`
	Date       int      `json:",omitempty" xml:"date"`
}

// Precedingpublicationdate is IFD tag = 150; not in ST.30
type Precedingpublicationdate *PrecedingpublicationdateType

// LanguageofpublicationType ...
type LanguageofpublicationType struct {
	XMLName    xml.Name `json:"-" xml:"language-of-publication"`
	StatusAttr string   `json:",omitempty" xml:"status,attr,omitempty"`
	Value      string   `json:",omitempty" xml:",chardata"`
}

// Languageofpublication is Publication language, ISO639 language code, e.g, en,de,ja, etc.
//
//	(INID 26, ST.32:B260)
type Languageofpublication *LanguageofpublicationType

// LanguageoffilingType ...
type LanguageoffilingType struct {
	XMLName    xml.Name `json:"-" xml:"language-of-filing"`
	StatusAttr string   `json:",omitempty" xml:"status,attr,omitempty"`
	Value      string   `json:",omitempty" xml:",chardata"`
}

// Languageoffiling is Filing language, ISO639 language code, e.g, en,de,ja, etc.
//
//	(INID 25, ST.32:B250)
type Languageoffiling *LanguageoffilingType

// ClassificationnationalType ...
type ClassificationnationalType struct {
	XMLName                 xml.Name                       `json:"-" xml:"classification-national"`
	IdAttr                  string                         `json:",omitempty" xml:"id,attr,omitempty"`
	StatusAttr              string                         `json:",omitempty" xml:"status,attr,omitempty"`
	Country                 string                         `json:",omitempty" xml:"country"`
	Edition                 *EditionType                   `json:",omitempty" xml:"edition"`
	Mainclassification      []*MainclassificationType      `json:",omitempty" xml:"main-classification"`
	Furtherclassification   []*FurtherclassificationType   `json:",omitempty" xml:"further-classification"`
	Additionalinfo          []*AdditionalinfoType          `json:",omitempty" xml:"additional-info"`
	Linkedindexingcodegroup []*LinkedindexingcodegroupType `json:",omitempty" xml:"linked-indexing-code-group"`
	Unlinkedindexingcode    []*UnlinkedindexingcodeType    `json:",omitempty" xml:"unlinked-indexing-code"`
	Text                    []*string                      `json:",omitempty" xml:"text"`
}

// Classificationnational is Domestic or national classification.
//
//	IFD tag = 071; ST.30 not available
type Classificationnational *ClassificationnationalType

// FurtherclassificationType ...
type FurtherclassificationType struct {
	XMLName      xml.Name `json:"-" xml:"further-classification"`
	IdAttr       string   `json:",omitempty" xml:"id,attr,omitempty"`
	SequenceAttr string   `json:",omitempty" xml:"sequence,attr,omitempty"`
	Value        string   `json:",omitempty" xml:",chardata"`
}

// Furtherclassification is Further/secondary classification ST.32 equivalency = B512/B522
type Furtherclassification *FurtherclassificationType

// ClassificationsipcrType ...
type ClassificationsipcrType struct {
	XMLName            xml.Name                  `json:"-" xml:"classifications-ipcr"`
	IdAttr             string                    `json:",omitempty" xml:"id,attr,omitempty"`
	StatusAttr         string                    `json:",omitempty" xml:"status,attr,omitempty"`
	DataformatAttr     string                    `json:",omitempty" xml:"data-format,attr,omitempty"`
	Classificationipcr []*ClassificationipcrType `json:",omitempty" xml:"classification-ipcr"`
}

// Classificationsipcr is ***********
//
//	Classification IPCR - NEW IPCR8
//	(INID 53, ST.32:B530)
type Classificationsipcr *ClassificationsipcrType

// ClassificationipcrType ...
type ClassificationipcrType struct {
	XMLName                  xml.Name                      `json:"-" xml:"classification-ipcr"`
	IdAttr                   string                        `json:",omitempty" xml:"id,attr,omitempty"`
	SequenceAttr             string                        `json:",omitempty" xml:"sequence,attr,omitempty"`
	Ipcversionindicator      *IpcversionindicatorType      `json:",omitempty" xml:"ipc-version-indicator"`
	Classificationlevel      *ClassificationlevelType      `json:",omitempty" xml:"classification-level"`
	Section                  *SectionType                  `json:",omitempty" xml:"section"`
	Class                    *ClassType                    `json:",omitempty" xml:"class"`
	Subclass                 *SubclassType                 `json:",omitempty" xml:"subclass"`
	Maingroup                *MaingroupType                `json:",omitempty" xml:"main-group"`
	Subgroup                 *SubgroupType                 `json:",omitempty" xml:"subgroup"`
	Symbolposition           *SymbolpositionType           `json:",omitempty" xml:"symbol-position"`
	Classificationvalue      *ClassificationvalueType      `json:",omitempty" xml:"classification-value"`
	Actiondate               *ActiondateType               `json:",omitempty" xml:"action-date"`
	Generatingoffice         *GeneratingofficeType         `json:",omitempty" xml:"generating-office"`
	Classificationstatus     *ClassificationstatusType     `json:",omitempty" xml:"classification-status"`
	Classificationdatasource *ClassificationdatasourceType `json:",omitempty" xml:"classification-data-source"`
	Text                     *string                       `json:",omitempty" xml:"text"`
}

// Classificationipcr is *******************************
//
//   - IPC DATA - NEW IPC8
//     *******************************
//     International Patent Classification (IPC) data;
//
//   - to be implemented in 2006
//
//   - use B510 for until week 52, 2005
//
//   - see: http://www.wipo.int/scit/en/standards/pdf/03-08-01.pdf:
//
//     Industrial property offices are asked to implement this new version of Standard ST.8 for all patent
//     documents with a publication date from January 1, 2006, onwards. For patent documents published prior to
//     that date, the previous version of the Standard should continue to be used.
//     . . .
//     This recording convention provides that symbols of the International Patent Classification (IPC) should
//     be
//     presented on machine-readable records for the exchange of information in machine-readable form in a
//     fixed-length field in 50 positions, each part of the Int. Cl. symbol being recorded in specific
//     positions and in the manner prescribed.
//
//   - this can be recorded within the <text> tag.
//
//     Position(s) Content Values
//
//     1 Section A-H
//     23 Class 01-99
//     4 Subclass A-Z
//     5 to 8 Main Group (right aligned) 1-9999, blank
//     9 Separating character / ("Slash")
//     10 to 15 Subgroup (left aligned) 00-999999 blank
//     16 to 19 For future use 4 blanks
//     20 to 27 Version indicator YYYYMMDD date format
//     28 Classification level C, A, S
//     29 First or later position of symbol F, L
//     30 Classification value (inventive or non-inventive) I, N
//     31 to 38 Action date YYYYMMDD date format
//     39 Original or reclassified data BRVD
//     40 Source of classification data H M G
//     41-42 Generating office AA ZZ (ST.3)
//     43-50 For future use 8 blanks
type Classificationipcr *ClassificationipcrType

// PublicationreferenceType ...
type PublicationreferenceType struct {
	XMLName        xml.Name        `json:"-" xml:"publication-reference"`
	IdAttr         string          `json:",omitempty" xml:"id,attr,omitempty"`
	DocidAttr      string          `json:",omitempty" xml:"doc-id,attr,omitempty"`
	DataformatAttr string          `json:",omitempty" xml:"data-format,attr,omitempty"`
	StatusAttr     string          `json:",omitempty" xml:"status,attr,omitempty"`
	SequenceAttr   string          `json:",omitempty" xml:"sequence,attr,omitempty"`
	Documentid     *DocumentidType `json:",omitempty" xml:"document-id"`
}

// Publicationreference is Publication-reference, IFD tags
//
//	010 = country
//	030 = doc-number
//	020 = kind
//	060 = date
//	Publication-reference, ST.30 tags
//	190 = country
//	110 = doc-number
//	221 = kind
//	A40 = date
//	Notes on Contents :
//	Defined "repeatable"
//	to be able to cater for multiple formats in the future, e.g. data-format="docdb" and
//	data-format="epodoc".
//	DOCDB keeps record of very early publications, in those instances
//	date = all zeroes
//	DOCDB exchanges "withdrawn" publications, in those instances
//	date = not supplied
//	DE utility models: publication-date = "Bekanntmachunstag"
//	"Modifications of full specification/first page", eg. A8
//	multiple publication stages per publication-id possible
//	extending key with publication-date provides unique and unambiguous reference
//	Attributes used
//	data-format="docdb", standardised following DOCDB prime standardisation rules
//	Provisions for future use :
//	defined "repeatable" to be able to exchange more than one representation, eg.
//	data-format="epodoc" etc.
type Publicationreference *PublicationreferenceType

// AbstractType ...
type AbstractType struct {
	XMLName            xml.Name          `json:"-" xml:"abstract"`
	IdAttr             string            `json:",omitempty" xml:"id,attr,omitempty"`
	LangAttr           string            `json:",omitempty" xml:"lang,attr,omitempty"`
	StatusAttr         string            `json:",omitempty" xml:"status,attr,omitempty"`
	CountryAttr        string            `json:",omitempty" xml:"country,attr,omitempty"`
	DocnumberAttr      string            `json:",omitempty" xml:"doc-number,attr,omitempty"`
	KindAttr           string            `json:",omitempty" xml:"kind,attr,omitempty"`
	DateAttr           int               `json:",omitempty" xml:"date,attr,omitempty"`
	DataformatAttr     string            `json:",omitempty" xml:"data-format,attr,omitempty"`
	AbstractsourceAttr string            `json:",omitempty" xml:"abstract-source,attr,omitempty"`
	Docpage            []*DocpageType    `json:",omitempty" xml:"doc-page"`
	Abstproblem        *AbstproblemType  `json:",omitempty" xml:"abst-problem"`
	Abstsolution       *AbstsolutionType `json:",omitempty" xml:"abst-solution"`
	ExchP              []*ExchpType      `json:",omitempty" xml:"p"`
}

// Abstract is Abstract, text embedded in "p";
//
//	Notes on contents :
//	publication may have more than one abstract
//	multiple formats :
//	"docdb" - natural language abstract, eg. EN, FR etc.
//	"original" - original language character set, converted to UTF8
//	multiple sources :
//	"national office"
//	"transcript" - English transcript of non-English abstract
//	"translation" - English translation of non-English abstract
//	"EPO" - abstract in DE, FR, or EN as provided with EP publication
//	"PAJ" - Patent Abstract of Japan, in English language
//	Abstract, IFD tags; not in ST.30 :
//	136 = data-format "docdb";
//	137 = data-format "original";
//	Attributes used :
//	lang=abstract language (only supplied with data-format "docdb")
//	country=publication country
//	doc-number=publication number
//	kind=publication kind-code
//	date=publication-date
//	data-format="docdb" or "original"
//	abstract-source=one of the above listed sources
type Abstract *AbstractType

// AbstsolutionType ...
type AbstsolutionType struct {
	XMLName xml.Name `json:"-" xml:"abst-solution"`
	IdAttr  string   `json:",omitempty" xml:"id,attr,omitempty"`
	P       []*PType `json:",omitempty" xml:"p"`
}

// AbstproblemType ...
type AbstproblemType struct {
	XMLName xml.Name `json:"-" xml:"abst-problem"`
	IdAttr  string   `json:",omitempty" xml:"id,attr,omitempty"`
	P       []*PType `json:",omitempty" xml:"p"`
}

// ExchpType ...
type ExchpType struct {
	XMLName          xml.Name                `json:"-" xml:"p"`
	IdAttr           string                  `json:",omitempty" xml:"id,attr,omitempty"`
	NumAttr          string                  `json:",omitempty" xml:"num,attr,omitempty"`
	O                []*OType                `json:",omitempty" xml:"o"`
	B                []*BType                `json:",omitempty" xml:"b"`
	I                []*IType                `json:",omitempty" xml:"i"`
	U                []*UType                `json:",omitempty" xml:"u"`
	Sup              []*SupType              `json:",omitempty" xml:"sup"`
	Sub              []*SubType              `json:",omitempty" xml:"sub"`
	Smallcaps        []*SmallcapsType        `json:",omitempty" xml:"smallcaps"`
	Br               []*BrType               `json:",omitempty" xml:"br"`
	Pre              []*PreType              `json:",omitempty" xml:"pre"`
	Dl               []*DlType               `json:",omitempty" xml:"dl"`
	Ul               []*UlType               `json:",omitempty" xml:"ul"`
	Ol               []*OlType               `json:",omitempty" xml:"ol"`
	Crossref         []*CrossrefType         `json:",omitempty" xml:"crossref"`
	Figref           []*FigrefType           `json:",omitempty" xml:"figref"`
	Patcit           []*PatcitType           `json:",omitempty" xml:"patcit"`
	Nplcit           []*NplcitType           `json:",omitempty" xml:"nplcit"`
	Biodeposit       []*BiodepositType       `json:",omitempty" xml:"bio-deposit"`
	Img              []*ImgType              `json:",omitempty" xml:"img"`
	Chemistry        []*ChemistryType        `json:",omitempty" xml:"chemistry"`
	Maths            []*MathsType            `json:",omitempty" xml:"maths"`
	Tables           []*TablesType           `json:",omitempty" xml:"tables"`
	Tableexternaldoc []*TableexternaldocType `json:",omitempty" xml:"table-external-doc"`
	Value            string                  `json:",omitempty" xml:",chardata"`
}

// PType ...
type PType struct {
	XMLName          xml.Name                `json:"-" xml:"p"`
	IdAttr           string                  `json:",omitempty" xml:"id,attr,omitempty"`
	NumAttr          string                  `json:",omitempty" xml:"num,attr"`
	B                []*BType                `json:",omitempty" xml:"b"`
	I                []*IType                `json:",omitempty" xml:"i"`
	U                []*UType                `json:",omitempty" xml:"u"`
	Sup              []*SupType              `json:",omitempty" xml:"sup"`
	Sub              []*SubType              `json:",omitempty" xml:"sub"`
	Smallcaps        []*SmallcapsType        `json:",omitempty" xml:"smallcaps"`
	Br               []*BrType               `json:",omitempty" xml:"br"`
	Pre              []*PreType              `json:",omitempty" xml:"pre"`
	Dl               []*DlType               `json:",omitempty" xml:"dl"`
	Ul               []*UlType               `json:",omitempty" xml:"ul"`
	Ol               []*OlType               `json:",omitempty" xml:"ol"`
	Crossref         []*CrossrefType         `json:",omitempty" xml:"crossref"`
	Figref           []*FigrefType           `json:",omitempty" xml:"figref"`
	Patcit           []*PatcitType           `json:",omitempty" xml:"patcit"`
	Nplcit           []*NplcitType           `json:",omitempty" xml:"nplcit"`
	Biodeposit       []*BiodepositType       `json:",omitempty" xml:"bio-deposit"`
	Img              []*ImgType              `json:",omitempty" xml:"img"`
	Chemistry        []*ChemistryType        `json:",omitempty" xml:"chemistry"`
	Maths            []*MathsType            `json:",omitempty" xml:"maths"`
	Tables           []*TablesType           `json:",omitempty" xml:"tables"`
	Tableexternaldoc []*TableexternaldocType `json:",omitempty" xml:"table-external-doc"`
	Value            string                  `json:",omitempty" xml:",chardata"`
}

// TableexternaldocType ...
type TableexternaldocType struct {
	XMLName          xml.Name `json:"-" xml:"table-external-doc"`
	IdAttr           string   `json:",omitempty" xml:"id,attr,omitempty"`
	FileAttr         string   `json:",omitempty" xml:"file,attr"`
	LangAttr         string   `json:",omitempty" xml:"lang,attr,omitempty"`
	StatusAttr       string   `json:",omitempty" xml:"status,attr,omitempty"`
	DoccodeAttr      string   `json:",omitempty" xml:"doc-code,attr,omitempty"`
	DateoffilingAttr int      `json:",omitempty" xml:"date-of-filing,attr,omitempty"`
	CarriersAttr     string   `json:",omitempty" xml:"carriers,attr,omitempty"`
	ExternaltypeAttr string   `json:",omitempty" xml:"external-type,attr,omitempty"`
	Value            string   `json:",omitempty" xml:",chardata"`
}

// Tableexternaldoc is *******************************
//
//	TABLE EXTERNAL - NOT USED
//	*******************************
//	References a stand-alone table authored with the table-external DTD.
//	This is unlikely to be used by the EPO
type Tableexternaldoc *TableexternaldocType

// TablesType ...
type TablesType struct {
	XMLName xml.Name   `json:"-" xml:"tables"`
	IdAttr  string     `json:",omitempty" xml:"id,attr,omitempty"`
	NumAttr string     `json:",omitempty" xml:"num,attr"`
	Img     *ImgType   `json:",omitempty" xml:"img"`
	Table   *TableType `json:",omitempty" xml:"table"`
}

// Tables is *********************************
//
//	TABLES
//	*********************************
//	This is image data or coded according to OASIS Exchange model with modified cell
//	'entry' content.
//
//	EPO required usage:
//	- id="tabl0001" etc.
//	- If parent element is abstract: id="tabla01";
//	- num="0001" etc.
//	- tables may be images or marked up. Mark up should be the default
type Tables *TablesType

// TableType ...
type TableType struct {
	XMLName      xml.Name `json:"-" xml:"table"`
	ExchTableAtt *TableAtt
	FrameAttr    string        `json:",omitempty" xml:"frame,attr,omitempty"`
	ColsepAttr   *Yesorno      `json:",omitempty" xml:"colsep,attr,omitempty"`
	RowsepAttr   *Yesorno      `json:",omitempty" xml:"rowsep,attr,omitempty"`
	PgwideAttr   *Yesorno      `json:",omitempty" xml:"pgwide,attr,omitempty"`
	Title        *TitleType    `json:",omitempty" xml:"title"`
	Tgroup       []*TgroupType `json:",omitempty" xml:"tgroup"`
}

// TitleType ...
type TitleType struct {
	XMLName   xml.Name         `json:"-" xml:"title"`
	B         []*BType         `json:",omitempty" xml:"b"`
	I         []*IType         `json:",omitempty" xml:"i"`
	U         []*UType         `json:",omitempty" xml:"u"`
	Sup       []*SupType       `json:",omitempty" xml:"sup"`
	Sub       []*SubType       `json:",omitempty" xml:"sub"`
	Smallcaps []*SmallcapsType `json:",omitempty" xml:"smallcaps"`
}

// TgroupType ...
type TgroupType struct {
	XMLName       xml.Name `json:"-" xml:"tgroup"`
	ExchTgroupAtt *TgroupAtt
	ColsAttr      *IntType       `json:",omitempty" xml:"cols,attr"`
	ColsepAttr    *Yesorno       `json:",omitempty" xml:"colsep,attr,omitempty"`
	RowsepAttr    *Yesorno       `json:",omitempty" xml:"rowsep,attr,omitempty"`
	AlignAttr     string         `json:",omitempty" xml:"align,attr,omitempty"`
	Colspec       []*ColspecType `json:",omitempty" xml:"colspec"`
	Thead         *TheadType     `json:",omitempty" xml:"thead"`
	Tbody         *TbodyType     `json:",omitempty" xml:"tbody"`
}

// ColspecType ...
type ColspecType struct {
	XMLName        xml.Name `json:"-" xml:"colspec"`
	ExchColspecAtt *ColspecAtt
	ColnumAttr     *IntType `json:",omitempty" xml:"colnum,attr,omitempty"`
	ColnameAttr    string   `json:",omitempty" xml:"colname,attr,omitempty"`
	ColwidthAttr   string   `json:",omitempty" xml:"colwidth,attr,omitempty"`
	ColsepAttr     *Yesorno `json:",omitempty" xml:"colsep,attr,omitempty"`
	RowsepAttr     *Yesorno `json:",omitempty" xml:"rowsep,attr,omitempty"`
	AlignAttr      string   `json:",omitempty" xml:"align,attr,omitempty"`
	CharAttr       string   `json:",omitempty" xml:"char,attr,omitempty"`
	CharoffAttr    string   `json:",omitempty" xml:"charoff,attr,omitempty"`
}

// TheadType ...
type TheadType struct {
	XMLName      xml.Name `json:"-" xml:"thead"`
	ExchTheadAtt *TheadAtt
	ValignAttr   string     `json:",omitempty" xml:"valign,attr,omitempty"`
	Row          []*RowType `json:",omitempty" xml:"row"`
}

// TbodyType ...
type TbodyType struct {
	XMLName      xml.Name `json:"-" xml:"tbody"`
	ExchTbodyAtt *TbodyAtt
	ValignAttr   string     `json:",omitempty" xml:"valign,attr,omitempty"`
	Row          []*RowType `json:",omitempty" xml:"row"`
}

// RowType ...
type RowType struct {
	XMLName    xml.Name `json:"-" xml:"row"`
	ExchRowAtt *RowAtt
	RowsepAttr *Yesorno     `json:",omitempty" xml:"rowsep,attr,omitempty"`
	ValignAttr string       `json:",omitempty" xml:"valign,attr,omitempty"`
	Entry      []*EntryType `json:",omitempty" xml:"entry"`
}

// EntryType ...
type EntryType struct {
	XMLName      xml.Name `json:"-" xml:"entry"`
	ExchEntryAtt *EntryAtt
	ColnameAttr  string            `json:",omitempty" xml:"colname,attr,omitempty"`
	NamestAttr   string            `json:",omitempty" xml:"namest,attr,omitempty"`
	NameendAttr  string            `json:",omitempty" xml:"nameend,attr,omitempty"`
	MorerowsAttr *IntType          `json:",omitempty" xml:"morerows,attr,omitempty"`
	ColsepAttr   *Yesorno          `json:",omitempty" xml:"colsep,attr,omitempty"`
	RowsepAttr   *Yesorno          `json:",omitempty" xml:"rowsep,attr,omitempty"`
	AlignAttr    string            `json:",omitempty" xml:"align,attr,omitempty"`
	CharAttr     string            `json:",omitempty" xml:"char,attr,omitempty"`
	CharoffAttr  string            `json:",omitempty" xml:"charoff,attr,omitempty"`
	ValignAttr   string            `json:",omitempty" xml:"valign,attr,omitempty"`
	B            []*BType          `json:",omitempty" xml:"b"`
	I            []*IType          `json:",omitempty" xml:"i"`
	U            []*UType          `json:",omitempty" xml:"u"`
	O            []*OType          `json:",omitempty" xml:"o"`
	Sup          []*SupType        `json:",omitempty" xml:"sup"`
	Sub          []*SubType        `json:",omitempty" xml:"sub"`
	Smallcaps    []*SmallcapsType  `json:",omitempty" xml:"smallcaps"`
	Br           []*BrType         `json:",omitempty" xml:"br"`
	Patcit       []*PatcitType     `json:",omitempty" xml:"patcit"`
	Nplcit       []*NplcitType     `json:",omitempty" xml:"nplcit"`
	Biodeposit   []*BiodepositType `json:",omitempty" xml:"bio-deposit"`
	Crossref     []*CrossrefType   `json:",omitempty" xml:"crossref"`
	Figref       []*FigrefType     `json:",omitempty" xml:"figref"`
	Img          []*ImgType        `json:",omitempty" xml:"img"`
	Dl           []*DlType         `json:",omitempty" xml:"dl"`
	Ul           []*UlType         `json:",omitempty" xml:"ul"`
	Ol           []*OlType         `json:",omitempty" xml:"ol"`
	Chemistry    []*ChemistryType  `json:",omitempty" xml:"chemistry"`
	Maths        []*MathsType      `json:",omitempty" xml:"maths"`
}

// Title ...
type Title *TitleType

// Tgroup ...
type Tgroup *TgroupType

// Colspec ...
type Colspec *ColspecType

// Thead ...
type Thead *TheadType

// Tbody ...
type Tbody *TbodyType

// Row ...
type Row *RowType

// Entry ...
type Entry *EntryType

// Table ...
type Table *TableType

// DlType ...
type DlType struct {
	XMLName     xml.Name `json:"-" xml:"dl"`
	IdAttr      string   `json:",omitempty" xml:"id,attr,omitempty"`
	TsizeAttr   string   `json:",omitempty" xml:"tsize,attr,omitempty"`
	CompactAttr string   `json:",omitempty" xml:"compact,attr,omitempty"`
	Dt          *DtType  `json:",omitempty" xml:"dt"`
	Dd          *DdType  `json:",omitempty" xml:"dd"`
}

// Dl is *******************************
//
//	LISTS
//	*******************************
//	DEFINTION LISTS
//	*******************************
//	EPO required usage:
//	- For dl elements in the main part of the document: id="dl0001"
//	- If parent element is abstract: id="dla01" BUT contractors
//	should, if possible, not use in abstracts.
//	(It is not used in PatXML in abstracts)
//	- tsize: the "gutter" size in mm between the the dt and the dd
type Dl *DlType

// UlType ...
type UlType struct {
	XMLName       xml.Name  `json:"-" xml:"ul"`
	IdAttr        string    `json:",omitempty" xml:"id,attr,omitempty"`
	ListstyleAttr string    `json:",omitempty" xml:"list-style,attr,omitempty"`
	CompactAttr   string    `json:",omitempty" xml:"compact,attr,omitempty"`
	Li            []*LiType `json:",omitempty" xml:"li"`
}

// Ul is *******************************
//
//	UNORDERED LISTS:
//	*******************************
//
//	List-style may be empty for lists with no bullet or other symbol
//	default list-style is 'bullets'.
//
//	EPO required usage:
//	- for ul element in the description: id="ul0001"
//	- If parent element is abstract: id="ula01"; BUT contractors
//	should, if possible, not use in abstracts just type in the
//	numbers as text (not used in PatXML)
//	- list-style: "none" means "none" or other type of symbol;
//	that is if the applicant used
//	some other symbol use this and then in the body of the text enter that symbol
//	- bullet and dash may be used
//	- compact
//
//
//	EPO style: indent whole list 6mm from left margin
//
//	Example:
//	<ul id="ul0001" list-style="bullet">
type Ul *UlType

// LiType ...
type LiType struct {
	XMLName    xml.Name          `json:"-" xml:"li"`
	IdAttr     string            `json:",omitempty" xml:"id,attr,omitempty"`
	NumAttr    string            `json:",omitempty" xml:"num,attr,omitempty"`
	B          []*BType          `json:",omitempty" xml:"b"`
	I          []*IType          `json:",omitempty" xml:"i"`
	U          []*UType          `json:",omitempty" xml:"u"`
	O          []*OType          `json:",omitempty" xml:"o"`
	Sup        []*SupType        `json:",omitempty" xml:"sup"`
	Sub        []*SubType        `json:",omitempty" xml:"sub"`
	Smallcaps  []*SmallcapsType  `json:",omitempty" xml:"smallcaps"`
	Br         []*BrType         `json:",omitempty" xml:"br"`
	Pre        []*PreType        `json:",omitempty" xml:"pre"`
	Patcit     []*PatcitType     `json:",omitempty" xml:"patcit"`
	Nplcit     []*NplcitType     `json:",omitempty" xml:"nplcit"`
	Biodeposit []*BiodepositType `json:",omitempty" xml:"bio-deposit"`
	Crossref   []*CrossrefType   `json:",omitempty" xml:"crossref"`
	Figref     []*FigrefType     `json:",omitempty" xml:"figref"`
	Img        []*ImgType        `json:",omitempty" xml:"img"`
	Dl         []*DlType         `json:",omitempty" xml:"dl"`
	Ul         []*UlType         `json:",omitempty" xml:"ul"`
	Ol         []*OlType         `json:",omitempty" xml:"ol"`
	Chemistry  []*ChemistryType  `json:",omitempty" xml:"chemistry"`
	Maths      []*MathsType      `json:",omitempty" xml:"maths"`
}

// Li is LIST ITEM
//
//	EPO required usage:
//	- DO NOT USE ID
type Li *LiType

// MathsType ...
type MathsType struct {
	XMLName xml.Name  `json:"-" xml:"maths"`
	IdAttr  string    `json:",omitempty" xml:"id,attr,omitempty"`
	NumAttr string    `json:",omitempty" xml:"num,attr"`
	Img     *ImgType  `json:",omitempty" xml:"img"`
	Math    *MathType `json:",omitempty" xml:"math"`
}

// Maths is *******************************************************************************
//
//	*******************************
//	MATHEMATICS
//	*******************************
//
//	This is image data or coded according to mathml, version 2
//
//	The top-level element "math" contains MathML encoded
//	mathematics. The "math" element has the browser info
//	attributes if it is also the browser interface element.
//
//	EPO required usage:
//	- id="math0001"
//	- If parent element is abstract: id="matha01";
//	- num 0001, 0002, etc.
type Maths *MathsType

// MathType ...
type MathType struct {
	XMLName            xml.Name `json:"-" xml:"math"`
	DisplayAttr        string   `json:",omitempty" xml:"display,attr,omitempty"`
	ExchMathExpression []*MathExpression
}

// Mi ...
type Mi *MiType

// MiType ...
type MiType struct {
	XMLName            xml.Name          `json:"-" xml:"mi"`
	XlinkHrefAttr      interface{}       `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string            `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string            `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string            `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string            `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string            `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string            `json:",omitempty" xml:"other,attr,omitempty"`
	FontsizeAttr       string            `json:",omitempty" xml:"fontsize,attr,omitempty"`
	FontweightAttr     string            `json:",omitempty" xml:"fontweight,attr,omitempty"`
	FontstyleAttr      string            `json:",omitempty" xml:"fontstyle,attr,omitempty"`
	FontfamilyAttr     string            `json:",omitempty" xml:"fontfamily,attr,omitempty"`
	ColorAttr          string            `json:",omitempty" xml:"color,attr,omitempty"`
	MathvariantAttr    string            `json:",omitempty" xml:"mathvariant,attr,omitempty"`
	MathsizeAttr       string            `json:",omitempty" xml:"mathsize,attr,omitempty"`
	MathcolorAttr      string            `json:",omitempty" xml:"mathcolor,attr,omitempty"`
	MathbackgroundAttr string            `json:",omitempty" xml:"mathbackground,attr,omitempty"`
	Mglyph             []*MglyphType     `json:",omitempty" xml:"mglyph"`
	Malignmark         []*MalignmarkType `json:",omitempty" xml:"malignmark"`
}

// Mglyph ...
type Mglyph *MglyphType

// MglyphType ...
type MglyphType struct {
	XMLName        xml.Name `json:"-" xml:"mglyph"`
	AltAttr        string   `json:",omitempty" xml:"alt,attr,omitempty"`
	FontfamilyAttr string   `json:",omitempty" xml:"fontfamily,attr,omitempty"`
	IndexAttr      string   `json:",omitempty" xml:"index,attr,omitempty"`
}

// Malignmark ...
type Malignmark *MalignmarkType

// MalignmarkType ...
type MalignmarkType struct {
	XMLName  xml.Name `json:"-" xml:"malignmark"`
	EdgeAttr string   `json:",omitempty" xml:"edge,attr,omitempty"`
}

// Mn ...
type Mn *MnType

// MnType ...
type MnType struct {
	XMLName            xml.Name          `json:"-" xml:"mn"`
	XlinkHrefAttr      interface{}       `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string            `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string            `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string            `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string            `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string            `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string            `json:",omitempty" xml:"other,attr,omitempty"`
	FontsizeAttr       string            `json:",omitempty" xml:"fontsize,attr,omitempty"`
	FontweightAttr     string            `json:",omitempty" xml:"fontweight,attr,omitempty"`
	FontstyleAttr      string            `json:",omitempty" xml:"fontstyle,attr,omitempty"`
	FontfamilyAttr     string            `json:",omitempty" xml:"fontfamily,attr,omitempty"`
	ColorAttr          string            `json:",omitempty" xml:"color,attr,omitempty"`
	MathvariantAttr    string            `json:",omitempty" xml:"mathvariant,attr,omitempty"`
	MathsizeAttr       string            `json:",omitempty" xml:"mathsize,attr,omitempty"`
	MathcolorAttr      string            `json:",omitempty" xml:"mathcolor,attr,omitempty"`
	MathbackgroundAttr string            `json:",omitempty" xml:"mathbackground,attr,omitempty"`
	Mglyph             []*MglyphType     `json:",omitempty" xml:"mglyph"`
	Malignmark         []*MalignmarkType `json:",omitempty" xml:"malignmark"`
}

// Mo ...
type Mo *MoType

// MoType ...
type MoType struct {
	XMLName            xml.Name          `json:"-" xml:"mo"`
	XlinkHrefAttr      interface{}       `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string            `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string            `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string            `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string            `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string            `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string            `json:",omitempty" xml:"other,attr,omitempty"`
	FontsizeAttr       string            `json:",omitempty" xml:"fontsize,attr,omitempty"`
	FontweightAttr     string            `json:",omitempty" xml:"fontweight,attr,omitempty"`
	FontstyleAttr      string            `json:",omitempty" xml:"fontstyle,attr,omitempty"`
	FontfamilyAttr     string            `json:",omitempty" xml:"fontfamily,attr,omitempty"`
	ColorAttr          string            `json:",omitempty" xml:"color,attr,omitempty"`
	MathvariantAttr    string            `json:",omitempty" xml:"mathvariant,attr,omitempty"`
	MathsizeAttr       string            `json:",omitempty" xml:"mathsize,attr,omitempty"`
	MathcolorAttr      string            `json:",omitempty" xml:"mathcolor,attr,omitempty"`
	MathbackgroundAttr string            `json:",omitempty" xml:"mathbackground,attr,omitempty"`
	FormAttr           string            `json:",omitempty" xml:"form,attr,omitempty"`
	FenceAttr          string            `json:",omitempty" xml:"fence,attr,omitempty"`
	SeparatorAttr      string            `json:",omitempty" xml:"separator,attr,omitempty"`
	LspaceAttr         string            `json:",omitempty" xml:"lspace,attr,omitempty"`
	RspaceAttr         string            `json:",omitempty" xml:"rspace,attr,omitempty"`
	StretchyAttr       string            `json:",omitempty" xml:"stretchy,attr,omitempty"`
	SymmetricAttr      string            `json:",omitempty" xml:"symmetric,attr,omitempty"`
	MaxsizeAttr        string            `json:",omitempty" xml:"maxsize,attr,omitempty"`
	MinsizeAttr        string            `json:",omitempty" xml:"minsize,attr,omitempty"`
	LargeopAttr        string            `json:",omitempty" xml:"largeop,attr,omitempty"`
	MovablelimitsAttr  string            `json:",omitempty" xml:"movablelimits,attr,omitempty"`
	AccentAttr         string            `json:",omitempty" xml:"accent,attr,omitempty"`
	Mglyph             []*MglyphType     `json:",omitempty" xml:"mglyph"`
	Malignmark         []*MalignmarkType `json:",omitempty" xml:"malignmark"`
}

// Mtext ...
type Mtext *Mstring

// Mstring ...
type Mstring struct {
	XMLName            xml.Name          `json:"-" xml:"mtext"`
	XlinkHrefAttr      interface{}       `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string            `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string            `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string            `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string            `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string            `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string            `json:",omitempty" xml:"other,attr,omitempty"`
	FontsizeAttr       string            `json:",omitempty" xml:"fontsize,attr,omitempty"`
	FontweightAttr     string            `json:",omitempty" xml:"fontweight,attr,omitempty"`
	FontstyleAttr      string            `json:",omitempty" xml:"fontstyle,attr,omitempty"`
	FontfamilyAttr     string            `json:",omitempty" xml:"fontfamily,attr,omitempty"`
	ColorAttr          string            `json:",omitempty" xml:"color,attr,omitempty"`
	MathvariantAttr    string            `json:",omitempty" xml:"mathvariant,attr,omitempty"`
	MathsizeAttr       string            `json:",omitempty" xml:"mathsize,attr,omitempty"`
	MathcolorAttr      string            `json:",omitempty" xml:"mathcolor,attr,omitempty"`
	MathbackgroundAttr string            `json:",omitempty" xml:"mathbackground,attr,omitempty"`
	Mglyph             []*MglyphType     `json:",omitempty" xml:"mglyph"`
	Malignmark         []*MalignmarkType `json:",omitempty" xml:"malignmark"`
}

// Ms ...
type Ms *MsType

// MsType ...
type MsType struct {
	XMLName            xml.Name          `json:"-" xml:"ms"`
	XlinkHrefAttr      interface{}       `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string            `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string            `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string            `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string            `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string            `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string            `json:",omitempty" xml:"other,attr,omitempty"`
	FontsizeAttr       string            `json:",omitempty" xml:"fontsize,attr,omitempty"`
	FontweightAttr     string            `json:",omitempty" xml:"fontweight,attr,omitempty"`
	FontstyleAttr      string            `json:",omitempty" xml:"fontstyle,attr,omitempty"`
	FontfamilyAttr     string            `json:",omitempty" xml:"fontfamily,attr,omitempty"`
	ColorAttr          string            `json:",omitempty" xml:"color,attr,omitempty"`
	MathvariantAttr    string            `json:",omitempty" xml:"mathvariant,attr,omitempty"`
	MathsizeAttr       string            `json:",omitempty" xml:"mathsize,attr,omitempty"`
	MathcolorAttr      string            `json:",omitempty" xml:"mathcolor,attr,omitempty"`
	MathbackgroundAttr string            `json:",omitempty" xml:"mathbackground,attr,omitempty"`
	LquoteAttr         string            `json:",omitempty" xml:"lquote,attr,omitempty"`
	RquoteAttr         string            `json:",omitempty" xml:"rquote,attr,omitempty"`
	Mglyph             []*MglyphType     `json:",omitempty" xml:"mglyph"`
	Malignmark         []*MalignmarkType `json:",omitempty" xml:"malignmark"`
}

// Mspace ...
type Mspace *MspaceType

// MspaceType ...
type MspaceType struct {
	XMLName       xml.Name    `json:"-" xml:"mspace"`
	WidthAttr     string      `json:",omitempty" xml:"width,attr,omitempty"`
	HeightAttr    string      `json:",omitempty" xml:"height,attr,omitempty"`
	DepthAttr     string      `json:",omitempty" xml:"depth,attr,omitempty"`
	LinebreakAttr string      `json:",omitempty" xml:"linebreak,attr,omitempty"`
	XlinkHrefAttr interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr     string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr     string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr        string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr      string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr     string      `json:",omitempty" xml:"other,attr,omitempty"`
}

// Mrow ...
type Mrow *MrowType

// MrowType ...
type MrowType struct {
	XMLName            xml.Name    `json:"-" xml:"mrow"`
	XlinkHrefAttr      interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchPresExpression []*PresExpression
}

// Mprescripts ...
type Mprescripts *MprescriptsType

// MprescriptsType ...
type MprescriptsType struct {
	XMLName xml.Name `json:"-" xml:"mprescripts"`
}

// None ...
type None *NoneType

// NoneType ...
type NoneType struct {
	XMLName xml.Name `json:"-" xml:"none"`
}

// Mfrac ...
type Mfrac *MfracType

// MfracType ...
type MfracType struct {
	XMLName               xml.Name    `json:"-" xml:"mfrac"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	BevelledAttr          string      `json:",omitempty" xml:"bevelled,attr,omitempty"`
	NumalignAttr          string      `json:",omitempty" xml:"numalign,attr,omitempty"`
	DenomalignAttr        string      `json:",omitempty" xml:"denomalign,attr,omitempty"`
	LinethicknessAttr     string      `json:",omitempty" xml:"linethickness,attr,omitempty"`
	ExchTwoPresExpression []*TwoPresExpression
}

// Msqrt ...
type Msqrt *MsqrtType

// MsqrtType ...
type MsqrtType struct {
	XMLName            xml.Name    `json:"-" xml:"msqrt"`
	XlinkHrefAttr      interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchPresExpression []*PresExpression
}

// Mroot ...
type Mroot *MrootType

// MrootType ...
type MrootType struct {
	XMLName               xml.Name    `json:"-" xml:"mroot"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchTwoPresExpression []*TwoPresExpression
}

// Menclose ...
type Menclose *MencloseType

// MencloseType ...
type MencloseType struct {
	XMLName            xml.Name    `json:"-" xml:"menclose"`
	XlinkHrefAttr      interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string      `json:",omitempty" xml:"other,attr,omitempty"`
	NotationAttr       string      `json:",omitempty" xml:"notation,attr,omitempty"`
	ExchPresExpression []*PresExpression
}

// Mstyle ...
type Mstyle *MstyleType

// MstyleType ...
type MstyleType struct {
	XMLName                    xml.Name    `json:"-" xml:"mstyle"`
	XlinkHrefAttr              interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr              string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr                  string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr                  string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                     string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr                   string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr                  string      `json:",omitempty" xml:"other,attr,omitempty"`
	FontsizeAttr               string      `json:",omitempty" xml:"fontsize,attr,omitempty"`
	FontweightAttr             string      `json:",omitempty" xml:"fontweight,attr,omitempty"`
	FontstyleAttr              string      `json:",omitempty" xml:"fontstyle,attr,omitempty"`
	FontfamilyAttr             string      `json:",omitempty" xml:"fontfamily,attr,omitempty"`
	ColorAttr                  string      `json:",omitempty" xml:"color,attr,omitempty"`
	MathvariantAttr            string      `json:",omitempty" xml:"mathvariant,attr,omitempty"`
	MathsizeAttr               string      `json:",omitempty" xml:"mathsize,attr,omitempty"`
	MathcolorAttr              string      `json:",omitempty" xml:"mathcolor,attr,omitempty"`
	MathbackgroundAttr         string      `json:",omitempty" xml:"mathbackground,attr,omitempty"`
	FormAttr                   string      `json:",omitempty" xml:"form,attr,omitempty"`
	FenceAttr                  string      `json:",omitempty" xml:"fence,attr,omitempty"`
	SeparatorAttr              string      `json:",omitempty" xml:"separator,attr,omitempty"`
	LspaceAttr                 string      `json:",omitempty" xml:"lspace,attr,omitempty"`
	RspaceAttr                 string      `json:",omitempty" xml:"rspace,attr,omitempty"`
	StretchyAttr               string      `json:",omitempty" xml:"stretchy,attr,omitempty"`
	SymmetricAttr              string      `json:",omitempty" xml:"symmetric,attr,omitempty"`
	MaxsizeAttr                string      `json:",omitempty" xml:"maxsize,attr,omitempty"`
	MinsizeAttr                string      `json:",omitempty" xml:"minsize,attr,omitempty"`
	LargeopAttr                string      `json:",omitempty" xml:"largeop,attr,omitempty"`
	MovablelimitsAttr          string      `json:",omitempty" xml:"movablelimits,attr,omitempty"`
	AccentAttr                 string      `json:",omitempty" xml:"accent,attr,omitempty"`
	LquoteAttr                 string      `json:",omitempty" xml:"lquote,attr,omitempty"`
	RquoteAttr                 string      `json:",omitempty" xml:"rquote,attr,omitempty"`
	LinethicknessAttr          string      `json:",omitempty" xml:"linethickness,attr,omitempty"`
	ScriptlevelAttr            string      `json:",omitempty" xml:"scriptlevel,attr,omitempty"`
	ScriptsizemultiplierAttr   string      `json:",omitempty" xml:"scriptsizemultiplier,attr,omitempty"`
	ScriptminsizeAttr          string      `json:",omitempty" xml:"scriptminsize,attr,omitempty"`
	BackgroundAttr             string      `json:",omitempty" xml:"background,attr,omitempty"`
	VeryverythinmathspaceAttr  string      `json:",omitempty" xml:"veryverythinmathspace,attr,omitempty"`
	VerythinmathspaceAttr      string      `json:",omitempty" xml:"verythinmathspace,attr,omitempty"`
	ThinmathspaceAttr          string      `json:",omitempty" xml:"thinmathspace,attr,omitempty"`
	MediummathspaceAttr        string      `json:",omitempty" xml:"mediummathspace,attr,omitempty"`
	ThickmathspaceAttr         string      `json:",omitempty" xml:"thickmathspace,attr,omitempty"`
	VerythickmathspaceAttr     string      `json:",omitempty" xml:"verythickmathspace,attr,omitempty"`
	VeryverythickmathspaceAttr string      `json:",omitempty" xml:"veryverythickmathspace,attr,omitempty"`
	OpenAttr                   string      `json:",omitempty" xml:"open,attr,omitempty"`
	CloseAttr                  string      `json:",omitempty" xml:"close,attr,omitempty"`
	SeparatorsAttr             string      `json:",omitempty" xml:"separators,attr,omitempty"`
	SubscriptshiftAttr         string      `json:",omitempty" xml:"subscriptshift,attr,omitempty"`
	SuperscriptshiftAttr       string      `json:",omitempty" xml:"superscriptshift,attr,omitempty"`
	AccentunderAttr            string      `json:",omitempty" xml:"accentunder,attr,omitempty"`
	AlignAttr                  string      `json:",omitempty" xml:"align,attr,omitempty"`
	RowalignAttr               string      `json:",omitempty" xml:"rowalign,attr,omitempty"`
	ColumnalignAttr            string      `json:",omitempty" xml:"columnalign,attr,omitempty"`
	ColumnwidthAttr            string      `json:",omitempty" xml:"columnwidth,attr,omitempty"`
	GroupalignAttr             string      `json:",omitempty" xml:"groupalign,attr,omitempty"`
	AlignmentscopeAttr         string      `json:",omitempty" xml:"alignmentscope,attr,omitempty"`
	SideAttr                   string      `json:",omitempty" xml:"side,attr,omitempty"`
	RowspacingAttr             string      `json:",omitempty" xml:"rowspacing,attr,omitempty"`
	ColumnspacingAttr          string      `json:",omitempty" xml:"columnspacing,attr,omitempty"`
	RowlinesAttr               string      `json:",omitempty" xml:"rowlines,attr,omitempty"`
	ColumnlinesAttr            string      `json:",omitempty" xml:"columnlines,attr,omitempty"`
	WidthAttr                  string      `json:",omitempty" xml:"width,attr,omitempty"`
	FrameAttr                  string      `json:",omitempty" xml:"frame,attr,omitempty"`
	FramespacingAttr           string      `json:",omitempty" xml:"framespacing,attr,omitempty"`
	MinlabelspacingAttr        string      `json:",omitempty" xml:"minlabelspacing,attr,omitempty"`
	EqualrowsAttr              string      `json:",omitempty" xml:"equalrows,attr,omitempty"`
	EqualcolumnsAttr           string      `json:",omitempty" xml:"equalcolumns,attr,omitempty"`
	DisplaystyleAttr           string      `json:",omitempty" xml:"displaystyle,attr,omitempty"`
	RowspanAttr                string      `json:",omitempty" xml:"rowspan,attr,omitempty"`
	ColumnspanAttr             string      `json:",omitempty" xml:"columnspan,attr,omitempty"`
	EdgeAttr                   string      `json:",omitempty" xml:"edge,attr,omitempty"`
	SelectionAttr              string      `json:",omitempty" xml:"selection,attr,omitempty"`
	BevelledAttr               string      `json:",omitempty" xml:"bevelled,attr,omitempty"`
	HeightAttr                 string      `json:",omitempty" xml:"height,attr,omitempty"`
	DepthAttr                  string      `json:",omitempty" xml:"depth,attr,omitempty"`
	ExchPresExpression         []*PresExpression
}

// Merror ...
type Merror *MerrorType

// MerrorType ...
type MerrorType struct {
	XMLName            xml.Name    `json:"-" xml:"merror"`
	XlinkHrefAttr      interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchPresExpression []*PresExpression
}

// Mpadded ...
type Mpadded *MpaddedType

// MpaddedType ...
type MpaddedType struct {
	XMLName            xml.Name    `json:"-" xml:"mpadded"`
	XlinkHrefAttr      interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string      `json:",omitempty" xml:"other,attr,omitempty"`
	WidthAttr          string      `json:",omitempty" xml:"width,attr,omitempty"`
	HeightAttr         string      `json:",omitempty" xml:"height,attr,omitempty"`
	DepthAttr          string      `json:",omitempty" xml:"depth,attr,omitempty"`
	LspaceAttr         string      `json:",omitempty" xml:"lspace,attr,omitempty"`
	ExchPresExpression []*PresExpression
}

// Mphantom ...
type Mphantom *MphantomType

// MphantomType ...
type MphantomType struct {
	XMLName            xml.Name    `json:"-" xml:"mphantom"`
	XlinkHrefAttr      interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchPresExpression []*PresExpression
}

// Mfenced ...
type Mfenced *MfencedType

// MfencedType ...
type MfencedType struct {
	XMLName            xml.Name    `json:"-" xml:"mfenced"`
	XlinkHrefAttr      interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string      `json:",omitempty" xml:"other,attr,omitempty"`
	OpenAttr           string      `json:",omitempty" xml:"open,attr,omitempty"`
	CloseAttr          string      `json:",omitempty" xml:"close,attr,omitempty"`
	SeparatorsAttr     string      `json:",omitempty" xml:"separators,attr,omitempty"`
	ExchPresExpression []*PresExpression
}

// Msub ...
type Msub *MsubType

// MsubType ...
type MsubType struct {
	XMLName               xml.Name    `json:"-" xml:"msub"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	SubscriptshiftAttr    string      `json:",omitempty" xml:"subscriptshift,attr,omitempty"`
	ExchTwoPresExpression []*TwoPresExpression
}

// Msup ...
type Msup *MsupType

// MsupType ...
type MsupType struct {
	XMLName               xml.Name    `json:"-" xml:"msup"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	SuperscriptshiftAttr  string      `json:",omitempty" xml:"superscriptshift,attr,omitempty"`
	ExchTwoPresExpression []*TwoPresExpression
}

// Msubsup ...
type Msubsup *MsubsupType

// MsubsupType ...
type MsubsupType struct {
	XMLName                 xml.Name    `json:"-" xml:"msubsup"`
	XlinkHrefAttr           interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr           string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr               string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr               string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                  string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr                string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr               string      `json:",omitempty" xml:"other,attr,omitempty"`
	SubscriptshiftAttr      string      `json:",omitempty" xml:"subscriptshift,attr,omitempty"`
	SuperscriptshiftAttr    string      `json:",omitempty" xml:"superscriptshift,attr,omitempty"`
	ExchThreePresExpression []*ThreePresExpression
}

// Munder ...
type Munder *MunderType

// MunderType ...
type MunderType struct {
	XMLName               xml.Name    `json:"-" xml:"munder"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	AccentunderAttr       string      `json:",omitempty" xml:"accentunder,attr,omitempty"`
	ExchTwoPresExpression []*TwoPresExpression
}

// Mover ...
type Mover *MoverType

// MoverType ...
type MoverType struct {
	XMLName               xml.Name    `json:"-" xml:"mover"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	AccentAttr            string      `json:",omitempty" xml:"accent,attr,omitempty"`
	ExchTwoPresExpression []*TwoPresExpression
}

// Munderover ...
type Munderover *MunderoverType

// MunderoverType ...
type MunderoverType struct {
	XMLName                 xml.Name    `json:"-" xml:"munderover"`
	XlinkHrefAttr           interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr           string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr               string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr               string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                  string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr                string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr               string      `json:",omitempty" xml:"other,attr,omitempty"`
	AccentAttr              string      `json:",omitempty" xml:"accent,attr,omitempty"`
	AccentunderAttr         string      `json:",omitempty" xml:"accentunder,attr,omitempty"`
	ExchThreePresExpression []*ThreePresExpression
}

// Mmultiscripts ...
type Mmultiscripts *MmultiscriptsType

// MmultiscriptsType ...
type MmultiscriptsType struct {
	XMLName                 xml.Name    `json:"-" xml:"mmultiscripts"`
	XlinkHrefAttr           interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr           string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr               string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr               string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                  string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr                string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr               string      `json:",omitempty" xml:"other,attr,omitempty"`
	SubscriptshiftAttr      string      `json:",omitempty" xml:"subscriptshift,attr,omitempty"`
	SuperscriptshiftAttr    string      `json:",omitempty" xml:"superscriptshift,attr,omitempty"`
	ExchPrscrPresExpression []*PrscrPresExpression
}

// Mtable ...
type Mtable *MtableType

// MtableType ...
type MtableType struct {
	XMLName               xml.Name    `json:"-" xml:"mtable"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	AlignAttr             string      `json:",omitempty" xml:"align,attr,omitempty"`
	RowalignAttr          string      `json:",omitempty" xml:"rowalign,attr,omitempty"`
	ColumnalignAttr       string      `json:",omitempty" xml:"columnalign,attr,omitempty"`
	ColumnwidthAttr       string      `json:",omitempty" xml:"columnwidth,attr,omitempty"`
	GroupalignAttr        string      `json:",omitempty" xml:"groupalign,attr,omitempty"`
	AlignmentscopeAttr    string      `json:",omitempty" xml:"alignmentscope,attr,omitempty"`
	SideAttr              string      `json:",omitempty" xml:"side,attr,omitempty"`
	RowspacingAttr        string      `json:",omitempty" xml:"rowspacing,attr,omitempty"`
	ColumnspacingAttr     string      `json:",omitempty" xml:"columnspacing,attr,omitempty"`
	RowlinesAttr          string      `json:",omitempty" xml:"rowlines,attr,omitempty"`
	ColumnlinesAttr       string      `json:",omitempty" xml:"columnlines,attr,omitempty"`
	WidthAttr             string      `json:",omitempty" xml:"width,attr,omitempty"`
	FrameAttr             string      `json:",omitempty" xml:"frame,attr,omitempty"`
	FramespacingAttr      string      `json:",omitempty" xml:"framespacing,attr,omitempty"`
	MinlabelspacingAttr   string      `json:",omitempty" xml:"minlabelspacing,attr,omitempty"`
	EqualrowsAttr         string      `json:",omitempty" xml:"equalrows,attr,omitempty"`
	EqualcolumnsAttr      string      `json:",omitempty" xml:"equalcolumns,attr,omitempty"`
	DisplaystyleAttr      string      `json:",omitempty" xml:"displaystyle,attr,omitempty"`
	ExchMtrPresExpression []*MtrPresExpression
}

// Mtr ...
type Mtr *MtrType

// MtrType ...
type MtrType struct {
	XMLName               xml.Name    `json:"-" xml:"mtr"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	RowalignAttr          string      `json:",omitempty" xml:"rowalign,attr,omitempty"`
	ColumnalignAttr       string      `json:",omitempty" xml:"columnalign,attr,omitempty"`
	GroupalignAttr        string      `json:",omitempty" xml:"groupalign,attr,omitempty"`
	ExchMtdPresExpression []*MtdPresExpression
}

// Mlabeledtr ...
type Mlabeledtr *MlabeledtrType

// MlabeledtrType ...
type MlabeledtrType struct {
	XMLName               xml.Name    `json:"-" xml:"mlabeledtr"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	RowalignAttr          string      `json:",omitempty" xml:"rowalign,attr,omitempty"`
	ColumnalignAttr       string      `json:",omitempty" xml:"columnalign,attr,omitempty"`
	GroupalignAttr        string      `json:",omitempty" xml:"groupalign,attr,omitempty"`
	ExchMtdPresExpression []*MtdPresExpression
}

// Mtd ...
type Mtd *MtdType

// MtdType ...
type MtdType struct {
	XMLName            xml.Name    `json:"-" xml:"mtd"`
	XlinkHrefAttr      interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string      `json:",omitempty" xml:"other,attr,omitempty"`
	RowalignAttr       string      `json:",omitempty" xml:"rowalign,attr,omitempty"`
	ColumnalignAttr    string      `json:",omitempty" xml:"columnalign,attr,omitempty"`
	GroupalignAttr     string      `json:",omitempty" xml:"groupalign,attr,omitempty"`
	RowspanAttr        string      `json:",omitempty" xml:"rowspan,attr,omitempty"`
	ColumnspanAttr     string      `json:",omitempty" xml:"columnspan,attr,omitempty"`
	ExchPresExpression []*PresExpression
}

// Maligngroup ...
type Maligngroup *MaligngroupType

// MaligngroupType ...
type MaligngroupType struct {
	XMLName        xml.Name    `json:"-" xml:"maligngroup"`
	XlinkHrefAttr  interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr  string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr      string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr      string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr         string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr       string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr      string      `json:",omitempty" xml:"other,attr,omitempty"`
	GroupalignAttr string      `json:",omitempty" xml:"groupalign,attr,omitempty"`
}

// Maction ...
type Maction *MactionType

// MactionType ...
type MactionType struct {
	XMLName            xml.Name    `json:"-" xml:"maction"`
	XlinkHrefAttr      interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr      string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr          string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr          string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr             string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr           string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr          string      `json:",omitempty" xml:"other,attr,omitempty"`
	ActiontypeAttr     string      `json:",omitempty" xml:"actiontype,attr,omitempty"`
	SelectionAttr      string      `json:",omitempty" xml:"selection,attr,omitempty"`
	ExchPresExpression []*PresExpression
}

// Ci ...
type Ci *CiType

// CiType ...
type CiType struct {
	XMLName           xml.Name             `json:"-" xml:"ci"`
	XlinkHrefAttr     interface{}          `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string               `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string               `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string               `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string               `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string               `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string               `json:",omitempty" xml:"other,attr,omitempty"`
	TypeAttr          string               `json:",omitempty" xml:"type,attr,omitempty"`
	DefinitionURLAttr string               `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string               `json:",omitempty" xml:"encoding,attr,omitempty"`
	Mglyph            []*MglyphType        `json:",omitempty" xml:"mglyph"`
	Mi                []*MiType            `json:",omitempty" xml:"mi"`
	Mn                []*MnType            `json:",omitempty" xml:"mn"`
	Mo                []*MoType            `json:",omitempty" xml:"mo"`
	Mtext             []*Mstring           `json:",omitempty" xml:"mtext"`
	Ms                []*MsType            `json:",omitempty" xml:"ms"`
	Mspace            []*MspaceType        `json:",omitempty" xml:"mspace"`
	Mrow              []*MrowType          `json:",omitempty" xml:"mrow"`
	Mfrac             []*MfracType         `json:",omitempty" xml:"mfrac"`
	Msqrt             []*MsqrtType         `json:",omitempty" xml:"msqrt"`
	Mroot             []*MrootType         `json:",omitempty" xml:"mroot"`
	Menclose          []*MencloseType      `json:",omitempty" xml:"menclose"`
	Mstyle            []*MstyleType        `json:",omitempty" xml:"mstyle"`
	Merror            []*MerrorType        `json:",omitempty" xml:"merror"`
	Mpadded           []*MpaddedType       `json:",omitempty" xml:"mpadded"`
	Mphantom          []*MphantomType      `json:",omitempty" xml:"mphantom"`
	Mfenced           []*MfencedType       `json:",omitempty" xml:"mfenced"`
	Msub              []*MsubType          `json:",omitempty" xml:"msub"`
	Msup              []*MsupType          `json:",omitempty" xml:"msup"`
	Msubsup           []*MsubsupType       `json:",omitempty" xml:"msubsup"`
	Munder            []*MunderType        `json:",omitempty" xml:"munder"`
	Mover             []*MoverType         `json:",omitempty" xml:"mover"`
	Munderover        []*MunderoverType    `json:",omitempty" xml:"munderover"`
	Mmultiscripts     []*MmultiscriptsType `json:",omitempty" xml:"mmultiscripts"`
	Mtable            []*MtableType        `json:",omitempty" xml:"mtable"`
	Mtr               []*MtrType           `json:",omitempty" xml:"mtr"`
	Mlabeledtr        []*MlabeledtrType    `json:",omitempty" xml:"mlabeledtr"`
	Mtd               []*MtdType           `json:",omitempty" xml:"mtd"`
	Maligngroup       []*MaligngroupType   `json:",omitempty" xml:"maligngroup"`
	Malignmark        []*MalignmarkType    `json:",omitempty" xml:"malignmark"`
	Maction           []*MactionType       `json:",omitempty" xml:"maction"`
}

// Csymbol ...
type Csymbol *CsymbolType

// CsymbolType ...
type CsymbolType struct {
	XMLName           xml.Name             `json:"-" xml:"csymbol"`
	XlinkHrefAttr     interface{}          `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string               `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string               `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string               `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string               `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string               `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string               `json:",omitempty" xml:"other,attr,omitempty"`
	EncodingAttr      string               `json:",omitempty" xml:"encoding,attr,omitempty"`
	TypeAttr          string               `json:",omitempty" xml:"type,attr,omitempty"`
	DefinitionURLAttr string               `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	Mglyph            []*MglyphType        `json:",omitempty" xml:"mglyph"`
	Mi                []*MiType            `json:",omitempty" xml:"mi"`
	Mn                []*MnType            `json:",omitempty" xml:"mn"`
	Mo                []*MoType            `json:",omitempty" xml:"mo"`
	Mtext             []*Mstring           `json:",omitempty" xml:"mtext"`
	Ms                []*MsType            `json:",omitempty" xml:"ms"`
	Mspace            []*MspaceType        `json:",omitempty" xml:"mspace"`
	Mrow              []*MrowType          `json:",omitempty" xml:"mrow"`
	Mfrac             []*MfracType         `json:",omitempty" xml:"mfrac"`
	Msqrt             []*MsqrtType         `json:",omitempty" xml:"msqrt"`
	Mroot             []*MrootType         `json:",omitempty" xml:"mroot"`
	Menclose          []*MencloseType      `json:",omitempty" xml:"menclose"`
	Mstyle            []*MstyleType        `json:",omitempty" xml:"mstyle"`
	Merror            []*MerrorType        `json:",omitempty" xml:"merror"`
	Mpadded           []*MpaddedType       `json:",omitempty" xml:"mpadded"`
	Mphantom          []*MphantomType      `json:",omitempty" xml:"mphantom"`
	Mfenced           []*MfencedType       `json:",omitempty" xml:"mfenced"`
	Msub              []*MsubType          `json:",omitempty" xml:"msub"`
	Msup              []*MsupType          `json:",omitempty" xml:"msup"`
	Msubsup           []*MsubsupType       `json:",omitempty" xml:"msubsup"`
	Munder            []*MunderType        `json:",omitempty" xml:"munder"`
	Mover             []*MoverType         `json:",omitempty" xml:"mover"`
	Munderover        []*MunderoverType    `json:",omitempty" xml:"munderover"`
	Mmultiscripts     []*MmultiscriptsType `json:",omitempty" xml:"mmultiscripts"`
	Mtable            []*MtableType        `json:",omitempty" xml:"mtable"`
	Mtr               []*MtrType           `json:",omitempty" xml:"mtr"`
	Mlabeledtr        []*MlabeledtrType    `json:",omitempty" xml:"mlabeledtr"`
	Mtd               []*MtdType           `json:",omitempty" xml:"mtd"`
	Maligngroup       []*MaligngroupType   `json:",omitempty" xml:"maligngroup"`
	Malignmark        []*MalignmarkType    `json:",omitempty" xml:"malignmark"`
	Maction           []*MactionType       `json:",omitempty" xml:"maction"`
}

// Cn ...
type Cn *CnType

// CnType ...
type CnType struct {
	XMLName           xml.Name             `json:"-" xml:"cn"`
	XlinkHrefAttr     interface{}          `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string               `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string               `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string               `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string               `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string               `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string               `json:",omitempty" xml:"other,attr,omitempty"`
	TypeAttr          string               `json:",omitempty" xml:"type,attr,omitempty"`
	BaseAttr          string               `json:",omitempty" xml:"base,attr,omitempty"`
	DefinitionURLAttr string               `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string               `json:",omitempty" xml:"encoding,attr,omitempty"`
	Mglyph            []*MglyphType        `json:",omitempty" xml:"mglyph"`
	Sep               []*SepType           `json:",omitempty" xml:"sep"`
	Mi                []*MiType            `json:",omitempty" xml:"mi"`
	Mn                []*MnType            `json:",omitempty" xml:"mn"`
	Mo                []*MoType            `json:",omitempty" xml:"mo"`
	Mtext             []*Mstring           `json:",omitempty" xml:"mtext"`
	Ms                []*MsType            `json:",omitempty" xml:"ms"`
	Mspace            []*MspaceType        `json:",omitempty" xml:"mspace"`
	Mrow              []*MrowType          `json:",omitempty" xml:"mrow"`
	Mfrac             []*MfracType         `json:",omitempty" xml:"mfrac"`
	Msqrt             []*MsqrtType         `json:",omitempty" xml:"msqrt"`
	Mroot             []*MrootType         `json:",omitempty" xml:"mroot"`
	Menclose          []*MencloseType      `json:",omitempty" xml:"menclose"`
	Mstyle            []*MstyleType        `json:",omitempty" xml:"mstyle"`
	Merror            []*MerrorType        `json:",omitempty" xml:"merror"`
	Mpadded           []*MpaddedType       `json:",omitempty" xml:"mpadded"`
	Mphantom          []*MphantomType      `json:",omitempty" xml:"mphantom"`
	Mfenced           []*MfencedType       `json:",omitempty" xml:"mfenced"`
	Msub              []*MsubType          `json:",omitempty" xml:"msub"`
	Msup              []*MsupType          `json:",omitempty" xml:"msup"`
	Msubsup           []*MsubsupType       `json:",omitempty" xml:"msubsup"`
	Munder            []*MunderType        `json:",omitempty" xml:"munder"`
	Mover             []*MoverType         `json:",omitempty" xml:"mover"`
	Munderover        []*MunderoverType    `json:",omitempty" xml:"munderover"`
	Mmultiscripts     []*MmultiscriptsType `json:",omitempty" xml:"mmultiscripts"`
	Mtable            []*MtableType        `json:",omitempty" xml:"mtable"`
	Mtr               []*MtrType           `json:",omitempty" xml:"mtr"`
	Mlabeledtr        []*MlabeledtrType    `json:",omitempty" xml:"mlabeledtr"`
	Mtd               []*MtdType           `json:",omitempty" xml:"mtd"`
	Maligngroup       []*MaligngroupType   `json:",omitempty" xml:"maligngroup"`
	Malignmark        []*MalignmarkType    `json:",omitempty" xml:"malignmark"`
	Maction           []*MactionType       `json:",omitempty" xml:"maction"`
}

// Sep ...
type Sep *SepType

// SepType ...
type SepType struct {
	XMLName xml.Name `json:"-" xml:"sep"`
}

// Integers ...
type Integers *IntegersType

// IntegersType ...
type IntegersType struct {
	XMLName           xml.Name    `json:"-" xml:"integers"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Reals ...
type Reals *RealsType

// RealsType ...
type RealsType struct {
	XMLName           xml.Name    `json:"-" xml:"reals"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Rationals ...
type Rationals *RationalsType

// RationalsType ...
type RationalsType struct {
	XMLName           xml.Name    `json:"-" xml:"rationals"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Naturalnumbers ...
type Naturalnumbers *NaturalnumbersType

// NaturalnumbersType ...
type NaturalnumbersType struct {
	XMLName           xml.Name    `json:"-" xml:"naturalnumbers"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Complexes ...
type Complexes *ComplexesType

// ComplexesType ...
type ComplexesType struct {
	XMLName           xml.Name    `json:"-" xml:"complexes"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Primes ...
type Primes *PrimesType

// PrimesType ...
type PrimesType struct {
	XMLName           xml.Name    `json:"-" xml:"primes"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Exponentiale ...
type Exponentiale *ExponentialeType

// ExponentialeType ...
type ExponentialeType struct {
	XMLName           xml.Name    `json:"-" xml:"exponentiale"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Imaginaryi ...
type Imaginaryi *ImaginaryiType

// ImaginaryiType ...
type ImaginaryiType struct {
	XMLName           xml.Name    `json:"-" xml:"imaginaryi"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Notanumber ...
type Notanumber *NotanumberType

// NotanumberType ...
type NotanumberType struct {
	XMLName           xml.Name    `json:"-" xml:"notanumber"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// True ...
type True *TrueType

// TrueType ...
type TrueType struct {
	XMLName           xml.Name    `json:"-" xml:"true"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// False ...
type False *FalseType

// FalseType ...
type FalseType struct {
	XMLName           xml.Name    `json:"-" xml:"false"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Emptyset ...
type Emptyset *EmptysetType

// EmptysetType ...
type EmptysetType struct {
	XMLName           xml.Name    `json:"-" xml:"emptyset"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Pi ...
type Pi *PiType

// PiType ...
type PiType struct {
	XMLName           xml.Name    `json:"-" xml:"pi"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Eulergamma ...
type Eulergamma *EulergammaType

// EulergammaType ...
type EulergammaType struct {
	XMLName           xml.Name    `json:"-" xml:"eulergamma"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Infinity ...
type Infinity *InfinityType

// InfinityType ...
type InfinityType struct {
	XMLName           xml.Name    `json:"-" xml:"infinity"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Apply ...
type Apply *ApplyType

// ApplyType ...
type ApplyType struct {
	XMLName               xml.Name    `json:"-" xml:"apply"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Reln ...
type Reln *RelnType

// RelnType ...
type RelnType struct {
	XMLName               xml.Name    `json:"-" xml:"reln"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Lambda ...
type Lambda *LambdaType

// LambdaType ...
type LambdaType struct {
	XMLName               xml.Name    `json:"-" xml:"lambda"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Condition ...
type Condition *ConditionType

// ConditionType ...
type ConditionType struct {
	XMLName               xml.Name    `json:"-" xml:"condition"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Declare ...
type Declare *DeclareType

// DeclareType ...
type DeclareType struct {
	XMLName               xml.Name    `json:"-" xml:"declare"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	TypeAttr              string      `json:",omitempty" xml:"type,attr,omitempty"`
	ScopeAttr             string      `json:",omitempty" xml:"scope,attr,omitempty"`
	NargsAttr             string      `json:",omitempty" xml:"nargs,attr,omitempty"`
	OccurrenceAttr        string      `json:",omitempty" xml:"occurrence,attr,omitempty"`
	DefinitionURLAttr     string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr          string      `json:",omitempty" xml:"encoding,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Semantics ...
type Semantics *SemanticsType

// SemanticsType ...
type SemanticsType struct {
	XMLName                        xml.Name    `json:"-" xml:"semantics"`
	XlinkHrefAttr                  interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr                  string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr                      string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr                      string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                         string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr                       string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr                      string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr              string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr                   string      `json:",omitempty" xml:"encoding,attr,omitempty"`
	ExchSemanticsContentExpression []*SemanticsContentExpression
}

// Annotation ...
type Annotation *AnnotationType

// AnnotationType ...
type AnnotationType struct {
	XMLName       xml.Name    `json:"-" xml:"annotation"`
	XlinkHrefAttr interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr     string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr     string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr        string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr      string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr     string      `json:",omitempty" xml:"other,attr,omitempty"`
	EncodingAttr  string      `json:",omitempty" xml:"encoding,attr,omitempty"`
	Value         string      `json:",omitempty" xml:",chardata"`
}

// Annotationxml ...
type Annotationxml *AnnotationxmlType

// AnnotationxmlType ...
type AnnotationxmlType struct {
	XMLName       xml.Name    `json:"-" xml:"annotation-xml"`
	XlinkHrefAttr interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr     string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr     string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr        string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr      string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr     string      `json:",omitempty" xml:"other,attr,omitempty"`
	EncodingAttr  string      `json:",omitempty" xml:"encoding,attr,omitempty"`
	Value         string      `json:",omitempty" xml:",chardata"`
}

// Interval ...
type Interval *IntervalType

// IntervalType ...
type IntervalType struct {
	XMLName               xml.Name    `json:"-" xml:"interval"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ClosureAttr           string      `json:",omitempty" xml:"closure,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// List ...
type List *ListType

// ListType ...
type ListType struct {
	XMLName               xml.Name    `json:"-" xml:"list"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	OrderAttr             string      `json:",omitempty" xml:"order,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Matrix ...
type Matrix *MatrixType

// MatrixType ...
type MatrixType struct {
	XMLName               xml.Name    `json:"-" xml:"matrix"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Matrixrow ...
type Matrixrow *MatrixrowType

// MatrixrowType ...
type MatrixrowType struct {
	XMLName               xml.Name    `json:"-" xml:"matrixrow"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Set ...
type Set *SetType

// SetType ...
type SetType struct {
	XMLName               xml.Name    `json:"-" xml:"set"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	TypeAttr              string      `json:",omitempty" xml:"type,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Vector ...
type Vector *VectorType

// VectorType ...
type VectorType struct {
	XMLName               xml.Name    `json:"-" xml:"vector"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Piecewise ...
type Piecewise *PiecewiseType

// PiecewiseType ...
type PiecewiseType struct {
	XMLName       xml.Name       `json:"-" xml:"piecewise"`
	XlinkHrefAttr interface{}    `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr string         `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr     string         `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr     string         `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr        string         `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr      string         `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr     string         `json:",omitempty" xml:"other,attr,omitempty"`
	ExchPiece     []*PieceType   `json:",omitempty" xml:"piece"`
	ExchOtherwise *OtherwiseType `json:",omitempty" xml:"otherwise"`
}

// Piece ...
type Piece *PieceType

// PieceType ...
type PieceType struct {
	XMLName               xml.Name    `json:"-" xml:"piece"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Otherwise ...
type Otherwise *OtherwiseType

// OtherwiseType ...
type OtherwiseType struct {
	XMLName               xml.Name    `json:"-" xml:"otherwise"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Lowlimit ...
type Lowlimit *LowlimitType

// LowlimitType ...
type LowlimitType struct {
	XMLName               xml.Name    `json:"-" xml:"lowlimit"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Uplimit ...
type Uplimit *UplimitType

// UplimitType ...
type UplimitType struct {
	XMLName               xml.Name    `json:"-" xml:"uplimit"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Bvar ...
type Bvar *BvarType

// BvarType ...
type BvarType struct {
	XMLName               xml.Name    `json:"-" xml:"bvar"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Degree ...
type Degree *DegreeType

// DegreeType ...
type DegreeType struct {
	XMLName               xml.Name    `json:"-" xml:"degree"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Logbase ...
type Logbase *LogbaseType

// LogbaseType ...
type LogbaseType struct {
	XMLName               xml.Name    `json:"-" xml:"logbase"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Momentabout ...
type Momentabout *MomentaboutType

// MomentaboutType ...
type MomentaboutType struct {
	XMLName               xml.Name    `json:"-" xml:"momentabout"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Domainofapplication ...
type Domainofapplication *DomainofapplicationType

// DomainofapplicationType ...
type DomainofapplicationType struct {
	XMLName               xml.Name    `json:"-" xml:"domainofapplication"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Inverse ...
type Inverse *InverseType

// InverseType ...
type InverseType struct {
	XMLName           xml.Name    `json:"-" xml:"inverse"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Ident ...
type Ident *IdentType

// IdentType ...
type IdentType struct {
	XMLName           xml.Name    `json:"-" xml:"ident"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Domain ...
type Domain *DomainType

// DomainType ...
type DomainType struct {
	XMLName           xml.Name    `json:"-" xml:"domain"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Codomain ...
type Codomain *CodomainType

// CodomainType ...
type CodomainType struct {
	XMLName           xml.Name    `json:"-" xml:"codomain"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Image ...
type Image *ImageType

// ImageType ...
type ImageType struct {
	XMLName           xml.Name    `json:"-" xml:"image"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Abs ...
type Abs *AbsType

// AbsType ...
type AbsType struct {
	XMLName           xml.Name    `json:"-" xml:"abs"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Conjugate ...
type Conjugate *ConjugateType

// ConjugateType ...
type ConjugateType struct {
	XMLName           xml.Name    `json:"-" xml:"conjugate"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Exp ...
type Exp *ExpType

// ExpType ...
type ExpType struct {
	XMLName           xml.Name    `json:"-" xml:"exp"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Factorial ...
type Factorial *FactorialType

// FactorialType ...
type FactorialType struct {
	XMLName           xml.Name    `json:"-" xml:"factorial"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arg ...
type Arg *ArgType

// ArgType ...
type ArgType struct {
	XMLName           xml.Name    `json:"-" xml:"arg"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Real ...
type Real *RealType

// RealType ...
type RealType struct {
	XMLName           xml.Name    `json:"-" xml:"real"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Imaginary ...
type Imaginary *ImaginaryType

// ImaginaryType ...
type ImaginaryType struct {
	XMLName           xml.Name    `json:"-" xml:"imaginary"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Floor ...
type Floor *FloorType

// FloorType ...
type FloorType struct {
	XMLName           xml.Name    `json:"-" xml:"floor"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Ceiling ...
type Ceiling *CeilingType

// CeilingType ...
type CeilingType struct {
	XMLName           xml.Name    `json:"-" xml:"ceiling"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Not ...
type Not *NotType

// NotType ...
type NotType struct {
	XMLName           xml.Name    `json:"-" xml:"not"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Ln ...
type Ln *LnType

// LnType ...
type LnType struct {
	XMLName           xml.Name    `json:"-" xml:"ln"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Sin ...
type Sin *SinType

// SinType ...
type SinType struct {
	XMLName           xml.Name    `json:"-" xml:"sin"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Cos ...
type Cos *CosType

// CosType ...
type CosType struct {
	XMLName           xml.Name    `json:"-" xml:"cos"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Tan ...
type Tan *TanType

// TanType ...
type TanType struct {
	XMLName           xml.Name    `json:"-" xml:"tan"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Sec ...
type Sec *SecType

// SecType ...
type SecType struct {
	XMLName           xml.Name    `json:"-" xml:"sec"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Csc ...
type Csc *CscType

// CscType ...
type CscType struct {
	XMLName           xml.Name    `json:"-" xml:"csc"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Cot ...
type Cot *CotType

// CotType ...
type CotType struct {
	XMLName           xml.Name    `json:"-" xml:"cot"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Sinh ...
type Sinh *SinhType

// SinhType ...
type SinhType struct {
	XMLName           xml.Name    `json:"-" xml:"sinh"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Cosh ...
type Cosh *CoshType

// CoshType ...
type CoshType struct {
	XMLName           xml.Name    `json:"-" xml:"cosh"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Tanh ...
type Tanh *TanhType

// TanhType ...
type TanhType struct {
	XMLName           xml.Name    `json:"-" xml:"tanh"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Sech ...
type Sech *SechType

// SechType ...
type SechType struct {
	XMLName           xml.Name    `json:"-" xml:"sech"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Csch ...
type Csch *CschType

// CschType ...
type CschType struct {
	XMLName           xml.Name    `json:"-" xml:"csch"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Coth ...
type Coth *CothType

// CothType ...
type CothType struct {
	XMLName           xml.Name    `json:"-" xml:"coth"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arcsin ...
type Arcsin *ArcsinType

// ArcsinType ...
type ArcsinType struct {
	XMLName           xml.Name    `json:"-" xml:"arcsin"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arccos ...
type Arccos *ArccosType

// ArccosType ...
type ArccosType struct {
	XMLName           xml.Name    `json:"-" xml:"arccos"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arctan ...
type Arctan *ArctanType

// ArctanType ...
type ArctanType struct {
	XMLName           xml.Name    `json:"-" xml:"arctan"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arccosh ...
type Arccosh *ArccoshType

// ArccoshType ...
type ArccoshType struct {
	XMLName           xml.Name    `json:"-" xml:"arccosh"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arccot ...
type Arccot *ArccotType

// ArccotType ...
type ArccotType struct {
	XMLName           xml.Name    `json:"-" xml:"arccot"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arccoth ...
type Arccoth *ArccothType

// ArccothType ...
type ArccothType struct {
	XMLName           xml.Name    `json:"-" xml:"arccoth"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arccsc ...
type Arccsc *ArccscType

// ArccscType ...
type ArccscType struct {
	XMLName           xml.Name    `json:"-" xml:"arccsc"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arccsch ...
type Arccsch *ArccschType

// ArccschType ...
type ArccschType struct {
	XMLName           xml.Name    `json:"-" xml:"arccsch"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arcsec ...
type Arcsec *ArcsecType

// ArcsecType ...
type ArcsecType struct {
	XMLName           xml.Name    `json:"-" xml:"arcsec"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arcsech ...
type Arcsech *ArcsechType

// ArcsechType ...
type ArcsechType struct {
	XMLName           xml.Name    `json:"-" xml:"arcsech"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arcsinh ...
type Arcsinh *ArcsinhType

// ArcsinhType ...
type ArcsinhType struct {
	XMLName           xml.Name    `json:"-" xml:"arcsinh"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Arctanh ...
type Arctanh *ArctanhType

// ArctanhType ...
type ArctanhType struct {
	XMLName           xml.Name    `json:"-" xml:"arctanh"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Determinant ...
type Determinant *DeterminantType

// DeterminantType ...
type DeterminantType struct {
	XMLName           xml.Name    `json:"-" xml:"determinant"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Transpose ...
type Transpose *TransposeType

// TransposeType ...
type TransposeType struct {
	XMLName           xml.Name    `json:"-" xml:"transpose"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Card ...
type Card *CardType

// CardType ...
type CardType struct {
	XMLName           xml.Name    `json:"-" xml:"card"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Quotient ...
type Quotient *QuotientType

// QuotientType ...
type QuotientType struct {
	XMLName           xml.Name    `json:"-" xml:"quotient"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Divide ...
type Divide *DivideType

// DivideType ...
type DivideType struct {
	XMLName           xml.Name    `json:"-" xml:"divide"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Power ...
type Power *PowerType

// PowerType ...
type PowerType struct {
	XMLName           xml.Name    `json:"-" xml:"power"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Rem ...
type Rem *RemType

// RemType ...
type RemType struct {
	XMLName           xml.Name    `json:"-" xml:"rem"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Implies ...
type Implies *ImpliesType

// ImpliesType ...
type ImpliesType struct {
	XMLName           xml.Name    `json:"-" xml:"implies"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Vectorproduct ...
type Vectorproduct *VectorproductType

// VectorproductType ...
type VectorproductType struct {
	XMLName           xml.Name    `json:"-" xml:"vectorproduct"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Scalarproduct ...
type Scalarproduct *ScalarproductType

// ScalarproductType ...
type ScalarproductType struct {
	XMLName           xml.Name    `json:"-" xml:"scalarproduct"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Outerproduct ...
type Outerproduct *OuterproductType

// OuterproductType ...
type OuterproductType struct {
	XMLName           xml.Name    `json:"-" xml:"outerproduct"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Setdiff ...
type Setdiff *SetdiffType

// SetdiffType ...
type SetdiffType struct {
	XMLName           xml.Name    `json:"-" xml:"setdiff"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Fn ...
type Fn *FnType

// FnType ...
type FnType struct {
	XMLName               xml.Name    `json:"-" xml:"fn"`
	XlinkHrefAttr         interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr         string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr             string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr             string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr                string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr              string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr             string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr     string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr          string      `json:",omitempty" xml:"encoding,attr,omitempty"`
	ExchContentExpression []*ContentExpression
}

// Compose ...
type Compose *ComposeType

// ComposeType ...
type ComposeType struct {
	XMLName           xml.Name    `json:"-" xml:"compose"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Plus ...
type Plus *PlusType

// PlusType ...
type PlusType struct {
	XMLName           xml.Name    `json:"-" xml:"plus"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Times ...
type Times *TimesType

// TimesType ...
type TimesType struct {
	XMLName           xml.Name    `json:"-" xml:"times"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Max ...
type Max *MaxType

// MaxType ...
type MaxType struct {
	XMLName           xml.Name    `json:"-" xml:"max"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Min ...
type Min *MinType

// MinType ...
type MinType struct {
	XMLName           xml.Name    `json:"-" xml:"min"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Gcd ...
type Gcd *GcdType

// GcdType ...
type GcdType struct {
	XMLName           xml.Name    `json:"-" xml:"gcd"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Lcm ...
type Lcm *LcmType

// LcmType ...
type LcmType struct {
	XMLName           xml.Name    `json:"-" xml:"lcm"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// And ...
type And *AndType

// AndType ...
type AndType struct {
	XMLName           xml.Name    `json:"-" xml:"and"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Or ...
type Or *OrType

// OrType ...
type OrType struct {
	XMLName           xml.Name    `json:"-" xml:"or"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Xor ...
type Xor *XorType

// XorType ...
type XorType struct {
	XMLName           xml.Name    `json:"-" xml:"xor"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Union ...
type Union *UnionType

// UnionType ...
type UnionType struct {
	XMLName           xml.Name    `json:"-" xml:"union"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Intersect ...
type Intersect *IntersectType

// IntersectType ...
type IntersectType struct {
	XMLName           xml.Name    `json:"-" xml:"intersect"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Cartesianproduct ...
type Cartesianproduct *CartesianproductType

// CartesianproductType ...
type CartesianproductType struct {
	XMLName           xml.Name    `json:"-" xml:"cartesianproduct"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Mean ...
type Mean *MeanType

// MeanType ...
type MeanType struct {
	XMLName           xml.Name    `json:"-" xml:"mean"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Sdev ...
type Sdev *SdevType

// SdevType ...
type SdevType struct {
	XMLName           xml.Name    `json:"-" xml:"sdev"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Variance ...
type Variance *VarianceType

// VarianceType ...
type VarianceType struct {
	XMLName           xml.Name    `json:"-" xml:"variance"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Median ...
type Median *MedianType

// MedianType ...
type MedianType struct {
	XMLName           xml.Name    `json:"-" xml:"median"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Mode ...
type Mode *ModeType

// ModeType ...
type ModeType struct {
	XMLName           xml.Name    `json:"-" xml:"mode"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Selector ...
type Selector *SelectorType

// SelectorType ...
type SelectorType struct {
	XMLName           xml.Name    `json:"-" xml:"selector"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Root ...
type Root *RootType

// RootType ...
type RootType struct {
	XMLName           xml.Name    `json:"-" xml:"root"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Minus ...
type Minus *MinusType

// MinusType ...
type MinusType struct {
	XMLName           xml.Name    `json:"-" xml:"minus"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Log ...
type Log *LogType

// LogType ...
type LogType struct {
	XMLName           xml.Name    `json:"-" xml:"log"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Int ...
type Int *IntType

// IntType ...
type IntType string

// Diff ...
type Diff *DiffType

// DiffType ...
type DiffType struct {
	XMLName           xml.Name    `json:"-" xml:"diff"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Partialdiff ...
type Partialdiff *PartialdiffType

// PartialdiffType ...
type PartialdiffType struct {
	XMLName           xml.Name    `json:"-" xml:"partialdiff"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Divergence ...
type Divergence *DivergenceType

// DivergenceType ...
type DivergenceType struct {
	XMLName           xml.Name    `json:"-" xml:"divergence"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Grad ...
type Grad *GradType

// GradType ...
type GradType struct {
	XMLName           xml.Name    `json:"-" xml:"grad"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Curl ...
type Curl *CurlType

// CurlType ...
type CurlType struct {
	XMLName           xml.Name    `json:"-" xml:"curl"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Laplacian ...
type Laplacian *LaplacianType

// LaplacianType ...
type LaplacianType struct {
	XMLName           xml.Name    `json:"-" xml:"laplacian"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Sum ...
type Sum *SumType

// SumType ...
type SumType struct {
	XMLName           xml.Name    `json:"-" xml:"sum"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Product ...
type Product *ProductType

// ProductType ...
type ProductType struct {
	XMLName           xml.Name    `json:"-" xml:"product"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Limit ...
type Limit *LimitType

// LimitType ...
type LimitType struct {
	XMLName           xml.Name    `json:"-" xml:"limit"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Moment ...
type Moment *MomentType

// MomentType ...
type MomentType struct {
	XMLName           xml.Name    `json:"-" xml:"moment"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Exists ...
type Exists *ExistsType

// ExistsType ...
type ExistsType struct {
	XMLName           xml.Name    `json:"-" xml:"exists"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Forall ...
type Forall *ForallType

// ForallType ...
type ForallType struct {
	XMLName           xml.Name    `json:"-" xml:"forall"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Neq ...
type Neq *NeqType

// NeqType ...
type NeqType struct {
	XMLName           xml.Name    `json:"-" xml:"neq"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Factorof ...
type Factorof *FactorofType

// FactorofType ...
type FactorofType struct {
	XMLName           xml.Name    `json:"-" xml:"factorof"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// In ...
type In *InType

// InType ...
type InType struct {
	XMLName           xml.Name    `json:"-" xml:"in"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Notin ...
type Notin *NotinType

// NotinType ...
type NotinType struct {
	XMLName           xml.Name    `json:"-" xml:"notin"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Notsubset ...
type Notsubset *NotsubsetType

// NotsubsetType ...
type NotsubsetType struct {
	XMLName           xml.Name    `json:"-" xml:"notsubset"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Notprsubset ...
type Notprsubset *NotprsubsetType

// NotprsubsetType ...
type NotprsubsetType struct {
	XMLName           xml.Name    `json:"-" xml:"notprsubset"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Tendsto ...
type Tendsto *TendstoType

// TendstoType ...
type TendstoType struct {
	XMLName           xml.Name    `json:"-" xml:"tendsto"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
	TypeAttr          string      `json:",omitempty" xml:"type,attr,omitempty"`
}

// Eq ...
type Eq *EqType

// EqType ...
type EqType struct {
	XMLName           xml.Name    `json:"-" xml:"eq"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Leq ...
type Leq *LeqType

// LeqType ...
type LeqType struct {
	XMLName           xml.Name    `json:"-" xml:"leq"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Lt ...
type Lt *LtType

// LtType ...
type LtType struct {
	XMLName           xml.Name    `json:"-" xml:"lt"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Geq ...
type Geq *GeqType

// GeqType ...
type GeqType struct {
	XMLName           xml.Name    `json:"-" xml:"geq"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Gt ...
type Gt *GtType

// GtType ...
type GtType struct {
	XMLName           xml.Name    `json:"-" xml:"gt"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Equivalent ...
type Equivalent *EquivalentType

// EquivalentType ...
type EquivalentType struct {
	XMLName           xml.Name    `json:"-" xml:"equivalent"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Approx ...
type Approx *ApproxType

// ApproxType ...
type ApproxType struct {
	XMLName           xml.Name    `json:"-" xml:"approx"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Subset ...
type Subset *SubsetType

// SubsetType ...
type SubsetType struct {
	XMLName           xml.Name    `json:"-" xml:"subset"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// Prsubset ...
type Prsubset *PrsubsetType

// PrsubsetType ...
type PrsubsetType struct {
	XMLName           xml.Name    `json:"-" xml:"prsubset"`
	XlinkHrefAttr     interface{} `json:",omitempty" xml:"xlink:href,attr,omitempty"`
	XlinkTypeAttr     string      `json:",omitempty" xml:"xlink:type,attr,omitempty"`
	ClassAttr         string      `json:",omitempty" xml:"class,attr,omitempty"`
	StyleAttr         string      `json:",omitempty" xml:"style,attr,omitempty"`
	IdAttr            string      `json:",omitempty" xml:"id,attr,omitempty"`
	XrefAttr          string      `json:",omitempty" xml:"xref,attr,omitempty"`
	OtherAttr         string      `json:",omitempty" xml:"other,attr,omitempty"`
	DefinitionURLAttr string      `json:",omitempty" xml:"definitionURL,attr,omitempty"`
	EncodingAttr      string      `json:",omitempty" xml:"encoding,attr,omitempty"`
}

// ChemistryType ...
type ChemistryType struct {
	XMLName xml.Name  `json:"-" xml:"chemistry"`
	IdAttr  string    `json:",omitempty" xml:"id,attr,omitempty"`
	NumAttr string    `json:",omitempty" xml:"num,attr"`
	Img     *ImgType  `json:",omitempty" xml:"img"`
	Chem    *ChemType `json:",omitempty" xml:"chem"`
}

// Chemistry is *******************************
//
//	CHEMISTRY
//	*******************************
//	Chemical formulae, ring structures, Markush structures, etc.
//
//	EPO required usage:
//	- For now treat as image data.
//	- Depending on industry support we may use, e.g. CML later
//	- For chemistry elements in the main part of the document:
//	id="chem0001".
//	- For chemistry elements in the abstract:id="chema01";
//	- num = 0001, 0002, etc.
type Chemistry *ChemistryType

// ChemType ...
type ChemType struct {
	XMLName      xml.Name `json:"-" xml:"chem"`
	IdAttr       string   `json:",omitempty" xml:"id,attr,omitempty"`
	FileAttr     string   `json:",omitempty" xml:"file,attr"`
	ChemtypeAttr string   `json:",omitempty" xml:"chem-type,attr,omitempty"`
}

// Chem is This is a pointer to an external DTD for
//
//	chemical markup - to be determined.
//	For EPO probably CML; http://www.xml-cml.org/
//	?**
type Chem *ChemType

// OlType ...
type OlType struct {
	XMLName     xml.Name  `json:"-" xml:"ol"`
	IdAttr      string    `json:",omitempty" xml:"id,attr,omitempty"`
	CompactAttr string    `json:",omitempty" xml:"compact,attr,omitempty"`
	OlstyleAttr string    `json:",omitempty" xml:"ol-style,attr,omitempty"`
	Li          []*LiType `json:",omitempty" xml:"li"`
}

// Ol is *******************************
//
//	ORDERED LISTS:
//	*******************************
//
//	EPO required use:
//	- For ol elements in the main part of the document id="ol0001"
//	- If parent element is abstract:id="ola01";BUT contractors
//	should, if possible, not use in abstracts just type in the
//	numbers as text.
//
//	EPO PatXML style ONLY for three levels and ONLY in the description:
//	- level 1 use arablic numbers 1, 2, 3, ...
//	- level 2 use lower alpha a, b, c, ...
//	- level 3 use lower roman i, ii, iii, ...
//
//	Early PatXML files <ol> is nested as above.
//
//	Example (from PatXML version 1.4) :
//	<ol id="ol0001" ol-style="1.">
//	<ol id="ol0001" ol-style="a.">
//	<ol id="ol0001" ol-style="i.">
//
//	Contractors: For all other cases (ie non-PatXML) leave the style
//	empty and insert the actual numbering in the text after <li>:
//
//	EPO style: indent whole list 6mm from left margin
//
//	Example:
//	<ol id="ol0001" ol-style="">
//	<li>1.1 List item 1.1</li>
//	</ol>
type Ol *OlType

// ImgType ...
type ImgType struct {
	XMLName         xml.Name `json:"-" xml:"img"`
	IdAttr          string   `json:",omitempty" xml:"id,attr,omitempty"`
	FileAttr        string   `json:",omitempty" xml:"file,attr"`
	WiAttr          string   `json:",omitempty" xml:"wi,attr"`
	HeAttr          string   `json:",omitempty" xml:"he,attr"`
	PgnumAttr       string   `json:",omitempty" xml:"pgnum,attr,omitempty"`
	FrnumAttr       string   `json:",omitempty" xml:"frnum,attr,omitempty"`
	ImgcontentAttr  string   `json:",omitempty" xml:"img-content,attr,omitempty"`
	ImgformatAttr   string   `json:",omitempty" xml:"img-format,attr"`
	OrientationAttr string   `json:",omitempty" xml:"orientation,attr,omitempty"`
	InlineAttr      string   `json:",omitempty" xml:"inline,attr,omitempty"`
	AltAttr         string   `json:",omitempty" xml:"alt,attr,omitempty"`
}

// Img is *******************************
//
//	IMAGE DATA
//	*******************************
//	Image is used for any kind of image: drawings, art work,
//	figures, complex work units (math, tables, chemistry), etc.
//
//	EPO Required usage:
//	the following attributes must be used in this order:
//	- id
//	- file
//	- wi (in mm) - note wi and he can be in any order (old Datimtex files are he and wi)
//	- he (in mm)
//	- img-content="drawing" (default - may be other - see below)
//	- img-format="tif" (default - no other)
//	- orientation="portrait" (default for PATXML files - may be landscape)
//	- inline may be used
//	- alt is NOT used
//
//	- id and file values:
//	- For figures within the DRAWINGS section:
//	id="if0001", etc.
//	file="imgf0001.tif" (where f = figure)
//	- For images within the DESCRIPTION and CLAIMS section:
//	id="ib0001", etc.
//	file ="imgb0001.tif" (where b = body)
//	- For images within the BODY of the ABSTRACT section eg a chemical formula
//	id="ia01", etc.
//	file ="imga0001.tif" (where a = abstract)
//	- For the figure to accompany the ABSTRACT section (abstract drawing): Taken from
//	the drawings section NOT in PatXML files.
//	id="iaf01", etc.
//	file ="imgaf001.tif" (where af = abstract figure)
//
//	Example:
//
//	<img id="if0001" file="imgf0001.tif" wi="155" he="230" img-content="drawing" img-format="tif"/>
//
//	Note: where images occur, possibly, in other sections, eg. search report data use similar logic.
type Img *ImgType

// FigrefType ...
type FigrefType struct {
	XMLName   xml.Name         `json:"-" xml:"figref"`
	IdrefAttr []string         `json:",omitempty" xml:"idref,attr,omitempty"`
	NumAttr   string           `json:",omitempty" xml:"num,attr,omitempty"`
	B         []*BType         `json:",omitempty" xml:"b"`
	I         []*IType         `json:",omitempty" xml:"i"`
	U         []*UType         `json:",omitempty" xml:"u"`
	O         []*OType         `json:",omitempty" xml:"o"`
	Sup       []*SupType       `json:",omitempty" xml:"sup"`
	Sub       []*SubType       `json:",omitempty" xml:"sub"`
	Smallcaps []*SmallcapsType `json:",omitempty" xml:"smallcaps"`
}

// Figref is *******************************
//
//	REFERENCES:
//	*******************************
//	A reference to a figure. May be in PatXML files.
//	For discussion with contractor ?**
//
//	Example:"...as shown in <figref idref='f0001'>Fig.1</figref>..."
type Figref *FigrefType

// CrossrefType ...
type CrossrefType struct {
	XMLName   xml.Name         `json:"-" xml:"crossref"`
	IdrefAttr string           `json:",omitempty" xml:"idref,attr"`
	B         []*BType         `json:",omitempty" xml:"b"`
	I         []*IType         `json:",omitempty" xml:"i"`
	U         []*UType         `json:",omitempty" xml:"u"`
	O         []*OType         `json:",omitempty" xml:"o"`
	Sup       []*SupType       `json:",omitempty" xml:"sup"`
	Sub       []*SubType       `json:",omitempty" xml:"sub"`
	Smallcaps []*SmallcapsType `json:",omitempty" xml:"smallcaps"`
}

// Crossref is Cross reference to any other element with an identifier (id)
//
//	In PatXML files can be to a table only.
type Crossref *CrossrefType

// BiodepositType ...
type BiodepositType struct {
	XMLName    xml.Name        `json:"-" xml:"bio-deposit"`
	IdAttr     string          `json:",omitempty" xml:"id,attr,omitempty"`
	NumAttr    string          `json:",omitempty" xml:"num,attr"`
	UrlAttr    string          `json:",omitempty" xml:"url,attr,omitempty"`
	DnumAttr   string          `json:",omitempty" xml:"dnum,attr,omitempty"`
	Depositary *DepositaryType `json:",omitempty" xml:"depositary"`
	Bioaccno   *BioaccnoType   `json:",omitempty" xml:"bio-accno"`
	Date       int             `json:",omitempty" xml:"date"`
	Term       *TermType       `json:",omitempty" xml:"term"`
	Dtext      *Dstring        `json:",omitempty" xml:"dtext"`
}

// Biodeposit is *******************************
//
//	BIO-DEPOSIT
//	*******************************.
//	Biological deposit citation
//	(INID 83, ST.32:B830)
//	According to PCT Rule 13bis, EPC Rule 28
//	This covers all bio data references long and short within
//	the description and/or claims
//
//	Recommended id=biod0001, biod0002, etc.
//
//	Used in PatXML files
type Biodeposit *BiodepositType

// SourceDocType ...
type SourceDocType struct {
	XMLName    xml.Name        `json:"-" xml:"sourceDoc"`
	Documentid *DocumentidType `json:",omitempty" xml:"document-id"`
}

// NplcitType ...
type NplcitType struct {
	XMLName         xml.Name          `json:"-" xml:"nplcit"`
	IdAttr          string            `json:",omitempty" xml:"id,attr,omitempty"`
	NumAttr         string            `json:",omitempty" xml:"num,attr,omitempty"`
	LangAttr        string            `json:",omitempty" xml:"lang,attr,omitempty"`
	FileAttr        string            `json:",omitempty" xml:"file,attr,omitempty"`
	NpltypeAttr     string            `json:",omitempty" xml:"npl-type,attr,omitempty"`
	MediumAttr      string            `json:",omitempty" xml:"medium,attr,omitempty"`
	UrlAttr         string            `json:",omitempty" xml:"url,attr,omitempty"`
	ExtractedxpAttr string            `json:",omitempty" xml:"extracted-xp,attr,omitempty"`
	Text            *string           `json:",omitempty" xml:"text"`
	Article         *ArticleType      `json:",omitempty" xml:"article"`
	Book            *BookType         `json:",omitempty" xml:"book"`
	Online          *OnlineType       `json:",omitempty" xml:"online"`
	Othercit        *OthercitType     `json:",omitempty" xml:"othercit"`
	Sourcedoc       *SourceDocType    `json:",omitempty" xml:"source-doc"`
	Relpassage      []*RelpassageType `json:",omitempty" xml:"rel-passage"`
}

// Nplcit is *******************************
//
//	NPLCIT
//	*******************************
//	Non-Patent Literature (NPL) CITation;
//
//	Notes:
//	This can be free text data without any structure -<text>(#PCDATA) which is NOT
//	recommended or it can be highly structured data which is marked up
//	(generally) according to ST.14 and ISO 690 layout. This is one of the most
//	diffcult areas to standardise as there is no concensus regarding the best way to
//	layout a bibliographic citation. We generally adopt to WIPO ST.14 and AACR2
//
//	This part of the DTD has used many different sources for element names and DTD
//	structure and reference:
//	AACR2 / MARC
//	ISO 12083 - Electronic manuscript prep. and markup. DTD
//	Association of American Publishers (AAP) Z39.59 DTD
//	European Working Group for SGML (EWS) MAJOUR DTD
//	SuperJournal Full Article DTD
//	www.superjournal.ac.uk/sj
//	Elsevier DTD
//	Medline DTD (NLM)
//
//	Attributes (recommended):
//	id - ncit0001, ncit0002, etc for the SR: sr-ncit0001
//	num - 0001, 0002
//	npl-type - The TYPE of citation is office specific (recommended):;
//	a - Abstract citation of no specific kind
//	b - Book citation
//	i - Bilogical abstract citation
//	c - Chemical abstracts citation
//	e - Database citation
//	d - Derwent citation
//	p - Patent cited within NPL group
//	j - Patent Abstracts of Japan citation (REC 067)
//	s - Serial / Journal / Periodical citation
//	w - World Wide Web / Internet search citation
//	medium - the type of medium
//	e.g., online, dvd, cd (CD-ROM), mt (magnetic tape), disk,
//	file - file name on local systems eg. XP number in EPO
//	url - where possible give full web link to document
//
//	EPO and PatXML usage:
//
//	id="ncit0001" for the SR: id="sr-ncit0001"
//	num="0001"
//	npl-type="s" etc
type Nplcit *NplcitType

// RefnoType ...
type RefnoType struct {
	XMLName xml.Name `json:"-" xml:"refno"`
	IdAttr  string   `json:",omitempty" xml:"id,attr,omitempty"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Refno is Reference number (general); for the EPO this is the XP number
type Refno *RefnoType

// ClassType ...
type ClassType struct {
	XMLName       xml.Name `json:"-" xml:"class"`
	ClasstypeAttr string   `json:",omitempty" xml:"class-type,attr,omitempty"`
	Value         string   `json:",omitempty" xml:",chardata"`
}

// SubnameType ...
type SubnameType struct {
	XMLName          xml.Name              `json:"-" xml:"subname"`
	SubnametypeAttr  string                `json:",omitempty" xml:"subname-type,attr,omitempty"`
	Name             *NameType             `json:",omitempty" xml:"name"`
	Prefix           *PrefixType           `json:",omitempty" xml:"prefix"`
	Lastname         *LastnameType         `json:",omitempty" xml:"last-name"`
	Orgname          *OrgnameType          `json:",omitempty" xml:"orgname"`
	Firstname        *FirstnameType        `json:",omitempty" xml:"first-name"`
	Middlename       *MiddlenameType       `json:",omitempty" xml:"middle-name"`
	Suffix           *SuffixType           `json:",omitempty" xml:"suffix"`
	Iid              *IidType              `json:",omitempty" xml:"iid"`
	Role             *RoleType             `json:",omitempty" xml:"role"`
	Department       *DepartmentType       `json:",omitempty" xml:"department"`
	Synonym          []*SynonymType        `json:",omitempty" xml:"synonym"`
	Registerednumber *RegisterednumberType `json:",omitempty" xml:"registered-number"`
	Addressbook      *AddressbookType      `json:",omitempty" xml:"addressbook"`
}

// Subname is Subordinate responsibility; e.g., editor, translator, etc.
type Subname *SubnameType

// AuthorType ...
type AuthorType struct {
	XMLName          xml.Name              `json:"-" xml:"author"`
	IdAttr           string                `json:",omitempty" xml:"id,attr,omitempty"`
	Name             *NameType             `json:",omitempty" xml:"name"`
	Prefix           *PrefixType           `json:",omitempty" xml:"prefix"`
	Lastname         *LastnameType         `json:",omitempty" xml:"last-name"`
	Orgname          *OrgnameType          `json:",omitempty" xml:"orgname"`
	Firstname        *FirstnameType        `json:",omitempty" xml:"first-name"`
	Middlename       *MiddlenameType       `json:",omitempty" xml:"middle-name"`
	Suffix           *SuffixType           `json:",omitempty" xml:"suffix"`
	Iid              *IidType              `json:",omitempty" xml:"iid"`
	Role             *RoleType             `json:",omitempty" xml:"role"`
	Department       *DepartmentType       `json:",omitempty" xml:"department"`
	Synonym          []*SynonymType        `json:",omitempty" xml:"synonym"`
	Registerednumber *RegisterednumberType `json:",omitempty" xml:"registered-number"`
	Addressbook      *AddressbookType      `json:",omitempty" xml:"addressbook"`
}

// Author is Author
//
//	author: Person or corporate body responsible for the
//	intellectual or artistic content of a document. [ISO 690:1987]
//
//	There is no distinguishing between personal and corporate authors
//	<author> followed by name or addressbook information
//	use the ID attribute if, for example, there is a need to distinguish between
//	multiple authors.
//	Can also include affiliation details
//
//	Recommended id="auth01", etc.
type Author *AuthorType

// AddressbookType ...
type AddressbookType struct {
	XMLName        xml.Name `json:"-" xml:"addressbook"`
	IdAttr         string   `json:",omitempty" xml:"id,attr,omitempty"`
	LangAttr       string   `json:",omitempty" xml:"lang,attr,omitempty"`
	DataformatAttr string   `json:",omitempty" xml:"data-format,attr,omitempty"`
	ExchNameGroup  *NameGroup
	Address        *AddressType `json:",omitempty" xml:"address"`
	Phone          []*PhoneType `json:",omitempty" xml:"phone"`
	Fax            []*FaxType   `json:",omitempty" xml:"fax"`
	Email          []*EmailType `json:",omitempty" xml:"email"`
	Url            []*UrlType   `json:",omitempty" xml:"url"`
	Ead            []*EadType   `json:",omitempty" xml:"ead"`
	Dtext          *Dstring     `json:",omitempty" xml:"dtext"`
	Text           *string      `json:",omitempty" xml:"text"`
}

// Addressbook is ADDRESSBOOK GROUP:
//
//	Holds name and contact information for individuals/organizations
//
//	The LANG attribute is REQUIRED for certain document types,
//	e.g., the JPO PCT Request where names and addresses may be repeated in two
//	different languages. If no structure possible use text.
type Addressbook *AddressbookType

// PatcitType ...
type PatcitType struct {
	XMLName      xml.Name          `json:"-" xml:"patcit"`
	IdAttr       string            `json:",omitempty" xml:"id,attr,omitempty"`
	NumAttr      string            `json:",omitempty" xml:"num,attr,omitempty"`
	DnumAttr     string            `json:",omitempty" xml:"dnum,attr,omitempty"`
	DnumtypeAttr string            `json:",omitempty" xml:"dnum-type,attr,omitempty"`
	FileAttr     string            `json:",omitempty" xml:"file,attr,omitempty"`
	UrlAttr      string            `json:",omitempty" xml:"url,attr,omitempty"`
	Text         *string           `json:",omitempty" xml:"text"`
	Documentid   *DocumentidType   `json:",omitempty" xml:"document-id"`
	Relpassage   []*RelpassageType `json:",omitempty" xml:"rel-passage"`
}

// Patcit is *******************************
//
//	PATCIT
//	*******************************
//	PATENT CITATIONS:
//	(ST.32:see B561 for B documents only)
//
//	Patent Citation within paragraph and SR
//
//	Notes:
//	Tags arranged according to WIPO ST.14 order.
//	This can be free text data without any structure (text).
//
//	Attributes (recommended):
//	id - pcit0001, pcit0002, etc. for the SR: sr-pcit0001
//	num - 0001, 0002, etc.
//	dnum - use full number as one string, eg, "US5401234A";
//	file - file name eg. if actual file is stored on local systems
//	dnum-type - type of document number
//	(e.g., application number, publication number)
//	url - where possible give full web link to patent eg to espacenet
//
//	EPO and PatXML usage:
//	id - pcit0001, pcit0002, etc. for the SR: sr-pcit0001
//	num - 0001, 0002, etc.
//	dnum - use full number as one string, eg, "US5401234A";
//	dnum-type - type of document number; only used if NOT publication
//	number; otherwise values are (in PatXML): appno and pctno
//	url - for the SR generate link to espacenet
//
//	Examples:
//
//	<patcit id='pcit0001' num="0001" dnum='US4793675A' dnum-type='appno'>
//	<document-id>
//	<country>US</country>
//	<doc-number>4793675</doc-number>
//	<kind>A</kind>
//	<name>Handa</name>
//	<date>19881227</date>
//	</document-id>
//	</patcit>
//
//	For the SR:
//	<srep-citations>
//	<citation>
//	<patcit id='sr-pcit0001' num="0001" dnum='US6089831A' url="http://v3.espacenet.com/textdoc?DB=EPODOC&IDX=US6089831&CY=ep">
//	<document-id>
//	<country>US</country>
//	<doc-number>6089831</doc-number>
//	<kind>A</kind>
//	<name>ALT MATHIAS ET AL</name>
//	<date>20000718</date>
//	</document-id>
//	</patcit>
//	<rel-passage>
//	<passage>
//	column 3, line 66 - column 6, line 35; figure 2
//	</passage>
//	</rel-passage>
//	<category>A</category>
//	<rel-claims>1,4,8,15,16,20,29, 30</rel-claims>
//	</citation>
//	<srep-citations>
//
//	EPO style:
//	- <country>, <doc-number>: bold
//	- <name>: uppercase, brackets eg. (SMITH)
//	- reformat date to: dd.mm.yyyy eg. 27.12.1988
//
//	Notes:
//	- It is NOT expected that the applicant will create the tagged data
//	unless using PatXML.
//	- Contractor should capture as specified here
type Patcit *PatcitType

// DocumentidType ...
type DocumentidType struct {
	XMLName   xml.Name  `json:"-" xml:"document-id"`
	LangAttr  string    `json:",omitempty" xml:"lang,attr,omitempty"`
	DocidAttr int       `json:",omitempty" xml:"doc-id,attr,omitempty"`
	Country   string    `json:",omitempty" xml:"country"`
	Docnumber *string   `json:",omitempty" xml:"doc-number"`
	Kind      *string   `json:",omitempty" xml:"kind"`
	Name      *NameType `json:",omitempty" xml:"name"`
	Date      int       `json:",omitempty" xml:"date"`
}

// DocumentidPrintType ...
type DocumentidPrintType struct {
	XMLName   xml.Name  `json:"-" xml:"document-id"`
	LangAttr  string    `json:",omitempty" xml:"lang,attr,omitempty"`
	Country   string    `json:",omitempty" xml:"country"`
	Docnumber *string   `json:",omitempty" xml:"doc-number"`
	Kind      *string   `json:",omitempty" xml:"kind"`
	Name      *NameType `json:",omitempty" xml:"name"`
	Date      int       `json:",omitempty" xml:"date"`
}

// Documentid is Document identification refers to patents (and patent applications) only. See WIPO ST.14
type Documentid *DocumentidType

// NameType ...
type NameType struct {
	XMLName      xml.Name `json:"-" xml:"name"`
	NametypeAttr string   `json:",omitempty" xml:"name-type,attr,omitempty"`
	Value        string   `json:",omitempty" xml:",chardata"`
}

// Name is Name:
//
//	If no distinction or detail can be given.
//	Also to be used for: personal (natural person) and corporate (legal entity) names
type Name *NameType

// DtType ...
type DtType struct {
	XMLName   xml.Name         `json:"-" xml:"dt"`
	IdAttr    string           `json:",omitempty" xml:"id,attr,omitempty"`
	B         []*BType         `json:",omitempty" xml:"b"`
	I         []*IType         `json:",omitempty" xml:"i"`
	U         []*UType         `json:",omitempty" xml:"u"`
	O         []*OType         `json:",omitempty" xml:"o"`
	Sup       []*SupType       `json:",omitempty" xml:"sup"`
	Sub       []*SubType       `json:",omitempty" xml:"sub"`
	Smallcaps []*SmallcapsType `json:",omitempty" xml:"smallcaps"`
}

// Dt is Term to be defined
//
//	Recommended id="dt0001",etc NOT USED IN EPO.
type Dt *DtType

// OType ...
type OType struct {
	XMLName   xml.Name         `json:"-" xml:"o"`
	PosAttr   string           `json:",omitempty" xml:"pos,attr,omitempty"`
	StyleAttr string           `json:",omitempty" xml:"style,attr,omitempty"`
	B         []*BType         `json:",omitempty" xml:"b"`
	I         []*IType         `json:",omitempty" xml:"i"`
	Sub       []*SubType       `json:",omitempty" xml:"sub"`
	Sup       []*SupType       `json:",omitempty" xml:"sup"`
	Smallcaps []*SmallcapsType `json:",omitempty" xml:"smallcaps"`
}

// O is Underscore: style - single is default
type O *OType

// UType ...
type UType struct {
	XMLName   xml.Name         `json:"-" xml:"u"`
	StyleAttr string           `json:",omitempty" xml:"style,attr,omitempty"`
	B         []*BType         `json:",omitempty" xml:"b"`
	I         []*IType         `json:",omitempty" xml:"i"`
	O         []*OType         `json:",omitempty" xml:"o"`
	Sup       []*SupType       `json:",omitempty" xml:"sup"`
	Sub       []*SubType       `json:",omitempty" xml:"sub"`
	Smallcaps []*SmallcapsType `json:",omitempty" xml:"smallcaps"`
}

// U is Underscore: style - single is default
type U *UType

// DocpageType ...
type DocpageType struct {
	XMLName         xml.Name `json:"-" xml:"doc-page"`
	AltAttr         string   `json:",omitempty" xml:"alt,attr,omitempty"`
	ColorAttr       string   `json:",omitempty" xml:"color,attr,omitempty"`
	FileAttr        string   `json:",omitempty" xml:"file,attr"`
	HeAttr          string   `json:",omitempty" xml:"he,attr"`
	IdAttr          string   `json:",omitempty" xml:"id,attr,omitempty"`
	OcrAttr         string   `json:",omitempty" xml:"ocr,attr,omitempty"`
	OrientationAttr string   `json:",omitempty" xml:"orientation,attr,omitempty"`
	PpAttr          string   `json:",omitempty" xml:"pp,attr,omitempty"`
	PpfAttr         string   `json:",omitempty" xml:"ppf,attr,omitempty"`
	PplAttr         string   `json:",omitempty" xml:"ppl,attr,omitempty"`
	TypeAttr        string   `json:",omitempty" xml:"type,attr"`
	WiAttr          string   `json:",omitempty" xml:"wi,attr"`
}

// Docpage is doc-page - DOCument or PAGE
//
//	This is primarily to be used when data for the whole or
//	major sections of an application are in image format
//	OR other formats such as pdf. Page range attributes are
//	given when required pp- page range ppf - first page
//	ppl - last page (for pdf). The 'img' may also be used
//	for complete pages, eg. in drawings
//
//	Recommended id = docp01, docp02, etc.
type Docpage *DocpageType

// SrepwrittenopinionType ...
type SrepwrittenopinionType struct {
	XMLName                   xml.Name                       `json:"-" xml:"srep-written-opinion"`
	Docpage                   []*DocpageType                 `json:",omitempty" xml:"doc-page"`
	Basisofsrepopinion        *BasisofsrepopinionType        `json:",omitempty" xml:"basis-of-srep-opinion"`
	Priorityopinion           *PriorityopinionType           `json:",omitempty" xml:"priority-opinion"`
	Nonestablishmentofopinion *NonestablishmentofopinionType `json:",omitempty" xml:"non-establishment-of-opinion"`
	Unityofinvention          *UnityofinventionType          `json:",omitempty" xml:"unity-of-invention"`
	ExchPctrule43bisstatement *Pctrule43bisstatementType     `json:",omitempty" xml:"pct-rule43bis-statement"`
	ExchOpinioncitations      *OpinioncitationsType          `json:",omitempty" xml:"opinion-citations"`
	Defectinapplication       *DefectinapplicationType       `json:",omitempty" xml:"defect-in-application"`
	Observationonapplication  *ObservationonapplicationType  `json:",omitempty" xml:"observation-on-application"`
	Text                      []*string                      `json:",omitempty" xml:"text"`
}

// Srepwrittenopinion ...
type Srepwrittenopinion *SrepwrittenopinionType

// ObservationonapplicationType ...
type ObservationonapplicationType struct {
	XMLName xml.Name `json:"-" xml:"observation-on-application"`
	P       []*PType `json:",omitempty" xml:"p"`
}

// Observationonapplication is Certain observations on the international application (Section VIII).
//
//	The following observations on the clarity of the claims, description, and
//	drawings or on the question whether the claims are fully supported by the
//	description, are made:
type Observationonapplication *ObservationonapplicationType

// DefectinapplicationType ...
type DefectinapplicationType struct {
	XMLName xml.Name `json:"-" xml:"defect-in-application"`
	P       []*PType `json:",omitempty" xml:"p"`
}

// Defectinapplication is Certain defects in the international application (Section Vii).
//
//	The following defects in the form or contents of the international application
//	have been noted:
type Defectinapplication *DefectinapplicationType

// OpinioncitationsType ...
type OpinioncitationsType struct {
	XMLName                       xml.Name                         `json:"-" xml:"opinion-citations"`
	ExchCertainpublisheddocuments []*CertainpublisheddocumentsType `json:",omitempty" xml:"certain-published-documents"`
	Nonwrittendisclosures         []*NonwrittendisclosuresType     `json:",omitempty" xml:"non-written-disclosures"`
}

// Opinioncitations is (PCT/IPEA/408 - Box No. VI Certain documents cited)
type Opinioncitations *OpinioncitationsType

// NonwrittendisclosuresType ...
type NonwrittendisclosuresType struct {
	XMLName                 xml.Name                     `json:"-" xml:"non-written-disclosures"`
	Kindofdisclosure        *KindofdisclosureType        `json:",omitempty" xml:"kind-of-disclosure"`
	Date                    int                          `json:",omitempty" xml:"date"`
	Dateofwrittendisclosure *DateofwrittendisclosureType `json:",omitempty" xml:"date-of-written-disclosure"`
}

// Nonwrittendisclosures is (PCT/ISA/237 )
//
//  2. Non-written disclosures (Rules 43bis.1 and 70.9)
//
//     (PCT/IPEA/409 and PCT/IPEA/408 )
//
//  2. Non-written disclosures (Rule 70.9)
type Nonwrittendisclosures *NonwrittendisclosuresType

// DateofwrittendisclosureType ...
type DateofwrittendisclosureType struct {
	XMLName xml.Name `json:"-" xml:"date-of-written-disclosure"`
	Date    int      `json:",omitempty" xml:"date"`
}

// Dateofwrittendisclosure is Date of written disclosure
//
//	Referring to non-written disclosure (day/month/year)
type Dateofwrittendisclosure *DateofwrittendisclosureType

// KindofdisclosureType ...
type KindofdisclosureType struct {
	XMLName xml.Name `json:"-" xml:"kind-of-disclosure"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Kindofdisclosure is Kind of non-written disclosure
type Kindofdisclosure *KindofdisclosureType

// CertainpublisheddocumentsType ...
type CertainpublisheddocumentsType struct {
	XMLName      xml.Name          `json:"-" xml:"certain-published-documents"`
	ExchCitation []*CitationType   `json:",omitempty" xml:"citation"`
	Filingdate   *FilingdateType   `json:",omitempty" xml:"filing-date"`
	Prioritydate *PrioritydateType `json:",omitempty" xml:"priority-date"`
	Text         *string           `json:",omitempty" xml:"text"`
}

// Certainpublisheddocuments is (PCT/ISA/237 )
//
//  1. Certain published documents (Rules 43bis.1 and 70.10)
//
//     (PCT/IPEA/409 and PCT/IPEA/408 )
//
//  1. Certain published documents (Rule 70.10)
type Certainpublisheddocuments *CertainpublisheddocumentsType

// Pctrule43bisstatementType ...
type Pctrule43bisstatementType struct {
	XMLName                   xml.Name                   `json:"-" xml:"pct-rule43bis-statement"`
	Noveltyvalid              *NoveltyvalidType          `json:",omitempty" xml:"novelty-valid"`
	Noveltynotvalid           *NoveltynotvalidType       `json:",omitempty" xml:"novelty-not-valid"`
	Inventivestepvalid        *InventivestepvalidType    `json:",omitempty" xml:"inventive-step-valid"`
	Inventivestepnotvalid     *InventivestepnotvalidType `json:",omitempty" xml:"inventive-step-not-valid"`
	Applicabilityvalid        *ApplicabilityvalidType    `json:",omitempty" xml:"applicability-valid"`
	Applicabilitynotvalid     *ApplicabilitynotvalidType `json:",omitempty" xml:"applicability-not-valid"`
	ExchCitationsexplanations *CitationsexplanationsType `json:",omitempty" xml:"citations-explanations"`
}

// Pctrule43bisstatement is (PCT/ISA/237 - Box V)
//
//	Reasoned statement under Rule 43bis.1(a)(i) with regard to novelty, inventive
//	step or industrial applicability;
//	citations and explanations supporting such statement.
type Pctrule43bisstatement *Pctrule43bisstatementType

// CitationsexplanationsType ...
type CitationsexplanationsType struct {
	XMLName      xml.Name          `json:"-" xml:"citations-explanations"`
	ExchCitation []*CitationType   `json:",omitempty" xml:"citation"`
	Filingdate   *FilingdateType   `json:",omitempty" xml:"filing-date"`
	Prioritydate *PrioritydateType `json:",omitempty" xml:"priority-date"`
	Text         *string           `json:",omitempty" xml:"text"`
}

// Citationsexplanations is Citations and explanations:
type Citationsexplanations *CitationsexplanationsType

// FilingdateType ...
type FilingdateType struct {
	XMLName xml.Name `json:"-" xml:"filing-date"`
	Date    int      `json:",omitempty" xml:"date"`
}

// Filingdate ...
type Filingdate *FilingdateType

// ApplicabilitynotvalidType ...
type ApplicabilitynotvalidType struct {
	XMLName  xml.Name        `json:"-" xml:"applicability-not-valid"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
}

// Applicabilitynotvalid ...
type Applicabilitynotvalid *ApplicabilitynotvalidType

// ApplicabilityvalidType ...
type ApplicabilityvalidType struct {
	XMLName  xml.Name        `json:"-" xml:"applicability-valid"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
}

// Applicabilityvalid ...
type Applicabilityvalid *ApplicabilityvalidType

// InventivestepnotvalidType ...
type InventivestepnotvalidType struct {
	XMLName  xml.Name        `json:"-" xml:"inventive-step-not-valid"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
}

// Inventivestepnotvalid ...
type Inventivestepnotvalid *InventivestepnotvalidType

// InventivestepvalidType ...
type InventivestepvalidType struct {
	XMLName  xml.Name        `json:"-" xml:"inventive-step-valid"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
}

// Inventivestepvalid ...
type Inventivestepvalid *InventivestepvalidType

// NoveltynotvalidType ...
type NoveltynotvalidType struct {
	XMLName  xml.Name        `json:"-" xml:"novelty-not-valid"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
}

// Noveltynotvalid ...
type Noveltynotvalid *NoveltynotvalidType

// NoveltyvalidType ...
type NoveltyvalidType struct {
	XMLName  xml.Name        `json:"-" xml:"novelty-valid"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
}

// Noveltyvalid ...
type Noveltyvalid *NoveltyvalidType

// UnityofinventionType ...
type UnityofinventionType struct {
	XMLName                     xml.Name                         `json:"-" xml:"unity-of-invention"`
	Invitationpayadditionalfees *InvitationpayadditionalfeesType `json:",omitempty" xml:"invitation-pay-additional-fees"`
	Notunityofinvention         *NotunityofinventionType         `json:",omitempty" xml:"not-unity-of-invention"`
	Complianceunityinvention    *ComplianceunityinventionType    `json:",omitempty" xml:"compliance-unity-invention"`
	Opinionestablishedregarding *OpinionestablishedregardingType `json:",omitempty" xml:"opinion-established-regarding"`
}

// Unityofinvention is (PCT/IPEA/408 - Box No. IV Lack of unity of invention)
type Unityofinvention *UnityofinventionType

// OpinionestablishedregardingType ...
type OpinionestablishedregardingType struct {
	XMLName           xml.Name               `json:"-" xml:"opinion-established-regarding"`
	Entireapplication *EntireapplicationType `json:",omitempty" xml:"entire-application"`
	Claimnum          []*ClaimnumType        `json:",omitempty" xml:"claim-num"`
}

// Opinionestablishedregarding is (PCT/ISA/237 ) - Box No. IV Lack of unity of invention Consequently,
//
//	this opinion has been established in respect of the following parts of the
//	international application: all parts the parts relating to claims Nos.
type Opinionestablishedregarding *OpinionestablishedregardingType

// NotunityofinventionType ...
type NotunityofinventionType struct {
	XMLName xml.Name `json:"-" xml:"not-unity-of-invention"`
}

// Notunityofinvention is (PCT/ISA/237 ) - Box No. IV Lack of unity of invention (2)
//
//	This Authority found that the requirement of unity of invention is not complied
//	with and chose not to invite the applicant to pay additional fees.
//
//	(PCT/IPEA/409 )
//	This Authority found that the requirement of unity of invention is not complied
//	with and chose, according to Rule 68.1, not to invite the applicant to restrict
//	or pay additional fees.
type Notunityofinvention *NotunityofinventionType

// NonestablishmentofopinionType ...
type NonestablishmentofopinionType struct {
	XMLName              xml.Name                  `json:"-" xml:"non-establishment-of-opinion"`
	Inventionnotexamined *InventionnotexaminedType `json:",omitempty" xml:"invention-not-examined"`
	Notannexccompliant   *NotannexccompliantType   `json:",omitempty" xml:"not-annex-c-compliant"`
}

// Nonestablishmentofopinion is (PCT/ISA/237 - Box III)
//
//	Non-establishment of opinion with regard to novelty, inventive step and
//	industrial applicability.
type Nonestablishmentofopinion *NonestablishmentofopinionType

// NotannexccompliantType ...
type NotannexccompliantType struct {
	XMLName        xml.Name            `json:"-" xml:"not-annex-c-compliant"`
	Annexc         *AnnexcType         `json:",omitempty" xml:"annex-c"`
	Annexcbis      *AnnexcbisType      `json:",omitempty" xml:"annex-c-bis"`
	Additionalinfo *AdditionalinfoType `json:",omitempty" xml:"additional-info"`
}

// Notannexccompliant is (PCT/ISA/237 - Box III)
type Notannexccompliant *NotannexccompliantType

// AnnexcbisType ...
type AnnexcbisType struct {
	XMLName xml.Name `json:"-" xml:"annex-c-bis"`
}

// Annexcbis is (PCT/ISA/237 and PCT/IPEA/408 )
//
//	The tables related to the nucleotide and/or amino acid sequence listing, if in
//	computer readable form only, do not comply with the technical requirements
//	provided for in Annex C-bis of the Administrative Instructions.
//
//	(PCT/IPEA/409 )
//	The tables related to the nucleotide and/or amino acid sequence listing do not
//	comply with the technical requirements provided for in Annex C-bis of the
//	Administrative Instructions in that the computer readable form:
type Annexcbis *AnnexcbisType

// AnnexcType ...
type AnnexcType struct {
	XMLName                             xml.Name                                 `json:"-" xml:"annex-c"`
	Sequencelistingwrittenform          *SequencelistingwrittenformType          `json:",omitempty" xml:"sequence-listing-written-form"`
	Sequencelistingcomputerreadableform *SequencelistingcomputerreadableformType `json:",omitempty" xml:"sequence-listing-computer-readable-form"`
}

// Annexc is The nucleotide and/or amino acid sequence listing does not comply with the
//
//	standard provided for in Annex C of the Administrative Instructions in that:
type Annexc *AnnexcType

// InventionnotexaminedType ...
type InventionnotexaminedType struct {
	XMLName           xml.Name               `json:"-" xml:"invention-not-examined"`
	Entireapplication *EntireapplicationType `json:",omitempty" xml:"entire-application"`
	Claimnum          []*ClaimnumType        `json:",omitempty" xml:"claim-num"`
	Nonestabreason1   *Nonestabreason1Type   `json:",omitempty" xml:"non-estab-reason-1"`
	Nonestabreason2   *Nonestabreason2Type   `json:",omitempty" xml:"non-estab-reason-2"`
	Nonestabreason3   *Nonestabreason3Type   `json:",omitempty" xml:"non-estab-reason-3"`
	Nonestabreason4   *Nonestabreason4Type   `json:",omitempty" xml:"non-estab-reason-4"`
}

// Inventionnotexamined is The questions whether the claimed invention appears to be novel, to involve
//
//	an inventive step (to be non obvious), or to be industrially applicable have not
//	been examined in respect of:
type Inventionnotexamined *InventionnotexaminedType

// Nonestabreason4Type ...
type Nonestabreason4Type struct {
	XMLName  xml.Name        `json:"-" xml:"non-estab-reason-4"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
}

// Nonestabreason4 is No international search report has been established for said claims Nos.
//
//	(rel-claims)
type Nonestabreason4 *Nonestabreason4Type

// Nonestabreason3Type ...
type Nonestabreason3Type struct {
	XMLName  xml.Name        `json:"-" xml:"non-estab-reason-3"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
}

// Nonestabreason3 is The claims, or said claims Nos. (claim nos) are so inadequately supported by the
//
//	description that no meaningful opinion could be formed.
type Nonestabreason3 *Nonestabreason3Type

// Nonestabreason2Type ...
type Nonestabreason2Type struct {
	XMLName  xml.Name        `json:"-" xml:"non-estab-reason-2"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
	P        []*PType        `json:",omitempty" xml:"p"`
}

// Nonestabreason2 is The description, claims or drawings (indicate particular elements below) or said
//
//	claims Nos are so unclear that no meaningful opinion could be formed (specify):
type Nonestabreason2 *Nonestabreason2Type

// Nonestabreason1Type ...
type Nonestabreason1Type struct {
	XMLName  xml.Name        `json:"-" xml:"non-estab-reason-1"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
	P        []*PType        `json:",omitempty" xml:"p"`
}

// Nonestabreason1 is The said international application, or the said claims Nos. "rel-claims" relate
//
//	to the following subject matter which does not require an international
//	preliminary examination
type Nonestabreason1 *Nonestabreason1Type

// EntireapplicationType ...
type EntireapplicationType struct {
	XMLName xml.Name `json:"-" xml:"entire-application"`
}

// Entireapplication is The entire international application.
type Entireapplication *EntireapplicationType

// ClaiminvalidType ...
type ClaiminvalidType struct {
	XMLName xml.Name `json:"-" xml:"claim-invalid"`
}

// Claiminvalid is This opinion has been established as if no priority had been claimed due to
//
//	the fact that the priority claim has been found invalid (Rules 43bis.1 and 64.1).
//
//	Thus for the purposes of this opinion, the international filing date indicated
//	above is considered to be the relevant date.
type Claiminvalid *ClaiminvalidType

// BasisofsrepopinionType ...
type BasisofsrepopinionType struct {
	XMLName           xml.Name               `json:"-" xml:"basis-of-srep-opinion"`
	Translationofappl *TranslationofapplType `json:",omitempty" xml:"translation-of-appl"`
	Sequencelistbasis *SequencelistbasisType `json:",omitempty" xml:"sequence-list-basis"`
}

// Basisofsrepopinion is Form PCT/ISA/237 (Box No. I) (January 2004)
//
//	Basis of this opinion
type Basisofsrepopinion *BasisofsrepopinionType

// SrepforpubType ...
type SrepforpubType struct {
	XMLName                    xml.Name                    `json:"-" xml:"srep-for-pub"`
	Docpage                    []*DocpageType              `json:",omitempty" xml:"doc-page"`
	ExchClassificationipc      *ClassificationipcType      `json:",omitempty" xml:"classification-ipc"`
	ExchClassificationsipcr    *ClassificationsipcrType    `json:",omitempty" xml:"classifications-ipcr"`
	ExchClassificationnational *ClassificationnationalType `json:",omitempty" xml:"classification-national"`
	ExchSrepfieldssearched     *SrepfieldssearchedType     `json:",omitempty" xml:"srep-fields-searched"`
	ExchSrepcitations          *SrepcitationsType          `json:",omitempty" xml:"srep-citations"`
	ExchIncompletesearch       *IncompletesearchType       `json:",omitempty" xml:"incomplete-search"`
	Srepadmin                  *SrepadminType              `json:",omitempty" xml:"srep-admin"`
	ExchSreppatentfamilies     *SreppatentfamiliesType     `json:",omitempty" xml:"srep-patent-families"`
}

// Srepforpub ...
type Srepforpub *SrepforpubType

// SreppatentfamiliesType ...
type SreppatentfamiliesType struct {
	XMLName              xml.Name                `json:"-" xml:"srep-patent-families"`
	Text                 *string                 `json:",omitempty" xml:"text"`
	ExchSreppatentfamily []*SreppatentfamilyType `json:",omitempty" xml:"srep-patent-family"`
}

// Sreppatentfamilies is PATENT FAMILY INFORMATION
//
//	This section lists the patent family members relating to the patent documents cited above.
//	The European Patent Office is in no way liable for these particulars
//	which are merely given for the purpose of information.
type Sreppatentfamilies *SreppatentfamiliesType

// SrepfamilymemberType ...
type SrepfamilymemberType struct {
	XMLName    xml.Name        `json:"-" xml:"srep-family-member"`
	Documentid *DocumentidType `json:",omitempty" xml:"document-id"`
}

// Srepfamilymember is Patent family.
//
//	(ST.32:B345)
type Srepfamilymember *SrepfamilymemberType

// PriorityapplicationType ...
type PriorityapplicationType struct {
	XMLName    xml.Name        `json:"-" xml:"priority-application"`
	Documentid *DocumentidType `json:",omitempty" xml:"document-id"`
}

// Priorityapplication is Priority application number.
//
//	(INID 31, ST.32:B310)
type Priorityapplication *PriorityapplicationType

// SrepadminType ...
type SrepadminType struct {
	XMLName                xml.Name                    `json:"-" xml:"srep-admin"`
	Examiners              *ExaminersType              `json:",omitempty" xml:"examiners"`
	Srepoffice             *SrepofficeType             `json:",omitempty" xml:"srep-office"`
	Datesearchcompleted    *DatesearchcompletedType    `json:",omitempty" xml:"date-search-completed"`
	Datesearchreportmailed *DatesearchreportmailedType `json:",omitempty" xml:"date-search-report-mailed"`
}

// Srepadmin is srep-admin
//
//	*******************************
//	SR - ADMINISTRATIVE DETAILS
//	*******************************
//	+++++++++++++++++++++++++++++++++++++++
//	** EPO layout:
//	Examiner: Gourier. P, The Hague Date of completion of the search: 15.02.2000
//
//	** END OF SEARCH REPORT **
//
//	OR after Patent family info. ??
//	+++++++++++++++++++++++++++++++++++++++
//
//	Example
//	<srep-admin>
//	<examiners>
//	<primary-examiner>
//	<name>Schroeder, R</name>
//	</primary-examiner>
//	</examiners>
//	<srep-office>
//	<addressbook>
//	<text>The Hague</text>
//	</addressbook>
//	</srep-office>
//	<date-search-completed><date>20050309</date></date-search-completed>
//	</srep-admin>
//	+++++++++++++++++++++++++++++++++++++++
//	PCT example layout:
//
//	ISA/Examiner: EPO
//	DE LAERE, Ann
//	PB 5818, Patentlaan 2
//	NL 2280 HV Rijswijk
//	Tel. +31 - 70 340 2040
//	Fax. +31 - 70 340 3016
//	Search completed: 10 August 1992
//	ISR mailed: 24 August 1992
type Srepadmin *SrepadminType

// DatesearchcompletedType ...
type DatesearchcompletedType struct {
	XMLName xml.Name `json:"-" xml:"date-search-completed"`
	Date    int      `json:",omitempty" xml:"date"`
}

// Datesearchcompleted is Date of completion of search report.
//
//	This is mandatory for EP SRs
type Datesearchcompleted *DatesearchcompletedType

// ExaminersType ...
type ExaminersType struct {
	XMLName           xml.Name               `json:"-" xml:"examiners"`
	Primaryexaminer   *PrimaryexaminerType   `json:",omitempty" xml:"primary-examiner"`
	Assistantexaminer *AssistantexaminerType `json:",omitempty" xml:"assistant-examiner"`
	Authorizedofficer *AuthorizedofficerType `json:",omitempty" xml:"authorized-officer"`
}

// Examiners is Persons acting on the document.
//
//	(ST.32:B745)
type Examiners *ExaminersType

// AssistantexaminerType ...
type AssistantexaminerType struct {
	XMLName             xml.Name                 `json:"-" xml:"assistant-examiner"`
	Name                *NameType                `json:",omitempty" xml:"name"`
	Prefix              *PrefixType              `json:",omitempty" xml:"prefix"`
	Lastname            *LastnameType            `json:",omitempty" xml:"last-name"`
	Orgname             *OrgnameType             `json:",omitempty" xml:"orgname"`
	Firstname           *FirstnameType           `json:",omitempty" xml:"first-name"`
	Middlename          *MiddlenameType          `json:",omitempty" xml:"middle-name"`
	Suffix              *SuffixType              `json:",omitempty" xml:"suffix"`
	Iid                 *IidType                 `json:",omitempty" xml:"iid"`
	Role                *RoleType                `json:",omitempty" xml:"role"`
	Department          *DepartmentType          `json:",omitempty" xml:"department"`
	Synonym             []*SynonymType           `json:",omitempty" xml:"synonym"`
	Registerednumber    *RegisterednumberType    `json:",omitempty" xml:"registered-number"`
	Electronicsignature *ElectronicsignatureType `json:",omitempty" xml:"electronic-signature"`
}

// Assistantexaminer is Assistant Examiner.
//
//	(ST.32:B747)
type Assistantexaminer *AssistantexaminerType

// PrimaryexaminerType ...
type PrimaryexaminerType struct {
	XMLName             xml.Name                 `json:"-" xml:"primary-examiner"`
	Name                *NameType                `json:",omitempty" xml:"name"`
	Prefix              *PrefixType              `json:",omitempty" xml:"prefix"`
	Lastname            *LastnameType            `json:",omitempty" xml:"last-name"`
	Orgname             *OrgnameType             `json:",omitempty" xml:"orgname"`
	Firstname           *FirstnameType           `json:",omitempty" xml:"first-name"`
	Middlename          *MiddlenameType          `json:",omitempty" xml:"middle-name"`
	Suffix              *SuffixType              `json:",omitempty" xml:"suffix"`
	Iid                 *IidType                 `json:",omitempty" xml:"iid"`
	Role                *RoleType                `json:",omitempty" xml:"role"`
	Department          *DepartmentType          `json:",omitempty" xml:"department"`
	Synonym             []*SynonymType           `json:",omitempty" xml:"synonym"`
	Registerednumber    *RegisterednumberType    `json:",omitempty" xml:"registered-number"`
	Electronicsignature *ElectronicsignatureType `json:",omitempty" xml:"electronic-signature"`
}

// Primaryexaminer is Primary Examiner.
//
//	(ST.32:B746)
type Primaryexaminer *PrimaryexaminerType

// IncompletesearchType ...
type IncompletesearchType struct {
	XMLName                    xml.Name                        `json:"-" xml:"incomplete-search"`
	Text                       *string                         `json:",omitempty" xml:"text"`
	Claimssearched             *ClaimssearchedType             `json:",omitempty" xml:"claims-searched"`
	Claimssearchedincompletely *ClaimssearchedincompletelyType `json:",omitempty" xml:"claims-searched-incompletely"`
	Claimsnotsearched          *ClaimsnotsearchedType          `json:",omitempty" xml:"claims-not-searched"`
	Reasonlimitedsearch        *ReasonlimitedsearchType        `json:",omitempty" xml:"reason-limited-search"`
}

// Incompletesearch ...
type Incompletesearch *IncompletesearchType

// ReasonlimitedsearchType ...
type ReasonlimitedsearchType struct {
	XMLName xml.Name `json:"-" xml:"reason-limited-search"`
	P       []*PType `json:",omitempty" xml:"p"`
}

// Reasonlimitedsearch ...
type Reasonlimitedsearch *ReasonlimitedsearchType

// ClaimsnotsearchedType ...
type ClaimsnotsearchedType struct {
	XMLName xml.Name `json:"-" xml:"claims-not-searched"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Claimsnotsearched ...
type Claimsnotsearched *ClaimsnotsearchedType

// ClaimssearchedincompletelyType ...
type ClaimssearchedincompletelyType struct {
	XMLName xml.Name `json:"-" xml:"claims-searched-incompletely"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Claimssearchedincompletely ...
type Claimssearchedincompletely *ClaimssearchedincompletelyType

// ClaimssearchedType ...
type ClaimssearchedType struct {
	XMLName xml.Name `json:"-" xml:"claims-searched"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Claimssearched ...
type Claimssearched *ClaimssearchedType

// SrepcitationsType ...
type SrepcitationsType struct {
	XMLName      xml.Name        `json:"-" xml:"srep-citations"`
	Text         *string         `json:",omitempty" xml:"text"`
	ExchCitation []*CitationType `json:",omitempty" xml:"citation"`
}

// Srepcitations ...
type Srepcitations *SrepcitationsType

// SrepfieldssearchedType ...
type SrepfieldssearchedType struct {
	XMLName                  xml.Name                  `json:"-" xml:"srep-fields-searched"`
	ExchMinimumdocumentation *MinimumdocumentationType `json:",omitempty" xml:"minimum-documentation"`
	Otherdocumentation       []*OtherdocumentationType `json:",omitempty" xml:"other-documentation"`
	Databasesearched         *DatabasesearchedType     `json:",omitempty" xml:"database-searched"`
}

// Srepfieldssearched is - Technical fields searched
//   - Note: new IPCR from 2006
type Srepfieldssearched *SrepfieldssearchedType

// DatabasesearchedType ...
type DatabasesearchedType struct {
	XMLName xml.Name    `json:"-" xml:"database-searched"`
	Text    *string     `json:",omitempty" xml:"text"`
	Nplcit  *NplcitType `json:",omitempty" xml:"nplcit"`
}

// Databasesearched is Database(s) searched
//
//	** Not used by EPO
type Databasesearched *DatabasesearchedType

// OtherdocumentationType ...
type OtherdocumentationType struct {
	XMLName xml.Name `json:"-" xml:"other-documentation"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Otherdocumentation is Documentation searched other than minimum documentation
//
//	** Not used by EPO
type Otherdocumentation *OtherdocumentationType

// MinimumdocumentationType ...
type MinimumdocumentationType struct {
	XMLName                    xml.Name                    `json:"-" xml:"minimum-documentation"`
	ExchClassificationipc      *ClassificationipcType      `json:",omitempty" xml:"classification-ipc"`
	ExchClassificationsipcr    *ClassificationsipcrType    `json:",omitempty" xml:"classifications-ipcr"`
	ExchClassificationnational *ClassificationnationalType `json:",omitempty" xml:"classification-national"`
}

// Minimumdocumentation is Minimum documentation searched
type Minimumdocumentation *MinimumdocumentationType

// Srepinfo ...
type Srepinfo *SrepinfoType

// Srepabstract is *********************************
//
//	SR ABSTRACT
//	*********************************
//
//	srep-abstract
//	+++++++++++++++++++++++++++++++++++++++
//	** EPO:
//
//	The European Patent Office herewith transmits the European search
//	report for the above-mentioned European patent application.
//
//	If applicable, the documents cited in the European search report can be
//	viewed and/or downloaded by clicking on the citations listed.
//
//
//	yes = The abstract was not modified by the Search Division
//	no = The ABSTRACT was modified by the Search Division and
//	the definitive text is as follows:
//	[Retrieve/insert text from DATIMTEX]
//
//	+++++++++++++++++++++++++++++++++++++++
//	PCT ISR
//	PCT/ISA/210. Old 5.
//	Search Report Abstract - will be different from
//	abstract and will replace it.
//	(followed by:)
//
//	The text is approved as submitted by the applicant [attribute] "yes" (default)]
//	(or)
//	The text has been established according to Rule 38.2(b), ]by this ISA as it
//	appears below. The applicant may, within one month from the date of mailing of
//	this ISR, submit comments to this ISA.
//
//	a revised abstract if present [attribute "no"]
//	+++++++++++++++++++++++++++++++++++++++
type Srepabstract *SrepabstractType

// Srepinventiontitle is Attribute "title-approval" :
//
//	yes = The TITLE given by the applicant has been approved by the Search Division
//	no = The TITLE was modified by the Search Division and is as follows:
type Srepinventiontitle *SrepinventiontitleType

// SrepotherinfoType ...
type SrepotherinfoType struct {
	XMLName         xml.Name               `json:"-" xml:"srep-other-info"`
	Srepinformation []*SrepinformationType `json:",omitempty" xml:"srep-information"`
}

// Srepotherinfo is This is a place marker since there may be other information added at a later
//
//	stage which has not been forseen.
type Srepotherinfo *SrepotherinfoType

// SrepinfoadminType ...
type SrepinfoadminType struct {
	XMLName                xml.Name                    `json:"-" xml:"srep-info-admin"`
	Authorizedofficer      *AuthorizedofficerType      `json:",omitempty" xml:"authorized-officer"`
	Srepoffice             *SrepofficeType             `json:",omitempty" xml:"srep-office"`
	Datesearchreportmailed *DatesearchreportmailedType `json:",omitempty" xml:"date-search-report-mailed"`
}

// Srepinfoadmin is Date mailed
//
//	+++++++++++++++++++++++++++++++++++++++
//	** EPO - Old Form 1507; new layout:
//	Date or Datum
type Srepinfoadmin *SrepinfoadminType

// DatesearchreportmailedType ...
type DatesearchreportmailedType struct {
	XMLName xml.Name `json:"-" xml:"date-search-report-mailed"`
	Date    int      `json:",omitempty" xml:"date"`
}

// Datesearchreportmailed is Date of mailing of search report.
//
//	(ST.32:B566)
type Datesearchreportmailed *DatesearchreportmailedType

// SrepofficeType ...
type SrepofficeType struct {
	XMLName     xml.Name         `json:"-" xml:"srep-office"`
	Addressbook *AddressbookType `json:",omitempty" xml:"addressbook"`
}

// Srepoffice is International Search Authority; international search to be carried out by
type Srepoffice *SrepofficeType

// AuthorizedofficerType ...
type AuthorizedofficerType struct {
	XMLName             xml.Name                 `json:"-" xml:"authorized-officer"`
	Name                *NameType                `json:",omitempty" xml:"name"`
	Prefix              *PrefixType              `json:",omitempty" xml:"prefix"`
	Lastname            *LastnameType            `json:",omitempty" xml:"last-name"`
	Orgname             *OrgnameType             `json:",omitempty" xml:"orgname"`
	Firstname           *FirstnameType           `json:",omitempty" xml:"first-name"`
	Middlename          *MiddlenameType          `json:",omitempty" xml:"middle-name"`
	Suffix              *SuffixType              `json:",omitempty" xml:"suffix"`
	Iid                 *IidType                 `json:",omitempty" xml:"iid"`
	Role                *RoleType                `json:",omitempty" xml:"role"`
	Department          *DepartmentType          `json:",omitempty" xml:"department"`
	Synonym             []*SynonymType           `json:",omitempty" xml:"synonym"`
	Registerednumber    *RegisterednumberType    `json:",omitempty" xml:"registered-number"`
	Phone               *PhoneType               `json:",omitempty" xml:"phone"`
	Fax                 *FaxType                 `json:",omitempty" xml:"fax"`
	Email               *EmailType               `json:",omitempty" xml:"email"`
	Electronicsignature *ElectronicsignatureType `json:",omitempty" xml:"electronic-signature"`
}

// Authorizedofficer is Authorized Officer.
type Authorizedofficer *AuthorizedofficerType

// EnhancedsignatureType ...
type EnhancedsignatureType struct {
	XMLName xml.Name   `json:"-" xml:"enhanced-signature"`
	Pkcs7   *Pkcs7Type `json:",omitempty" xml:"pkcs7"`
}

// Enhancedsignature is A PKI / PKCS #7 digital signature data type
type Enhancedsignature *EnhancedsignatureType

// Pkcs7Type ...
type Pkcs7Type struct {
	XMLName xml.Name `json:"-" xml:"pkcs7"`
}

// Pkcs7 is PKCS7 digital signature
type Pkcs7 *Pkcs7Type

// BasicsignatureType ...
type BasicsignatureType struct {
	XMLName    xml.Name        `json:"-" xml:"basic-signature"`
	Faximage   *FaximageType   `json:",omitempty" xml:"fax-image"`
	Textstring *TextstringType `json:",omitempty" xml:"text-string"`
	Clickwrap  *ClickwrapType  `json:",omitempty" xml:"click-wrap"`
}

// Basicsignature is A non-PKI electronic signature
type Basicsignature *BasicsignatureType

// ClickwrapType ...
type ClickwrapType struct {
	XMLName xml.Name `json:"-" xml:"click-wrap"`
}

// Clickwrap is A simple 'signature';
//
//	e.g., clicking a button labeled 'accept' or 'I agree'
type Clickwrap *ClickwrapType

// TextstringType ...
type TextstringType struct {
	XMLName xml.Name `json:"-" xml:"text-string"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Textstring is A simple text string is to be used as the basic electronic signature;
//
//	e.g., John Doe <text-string>/jd/</text-string>
type Textstring *TextstringType

// FiguretopublishType ...
type FiguretopublishType struct {
	XMLName   xml.Name         `json:"-" xml:"figure-to-publish"`
	Fignumber []*FignumberType `json:",omitempty" xml:"fig-number"`
}

// Figuretopublish is Figure of the drawings which should accompany the abstract
//
//	Also used in bib. data.
type Figuretopublish *FiguretopublishType

// FignumberType ...
type FignumberType struct {
	XMLName xml.Name `json:"-" xml:"fig-number"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Fignumber is Also at EP: <B598>
//
//	PCT/RO/101 Box IX: the number of the figure which should accompany the abstract.
type Fignumber *FignumberType

// SrepunityofinventionType ...
type SrepunityofinventionType struct {
	XMLName          xml.Name              `json:"-" xml:"srep-unity-of-invention"`
	P                []*PType              `json:",omitempty" xml:"p"`
	Srepsearchfees   *SrepsearchfeesType   `json:",omitempty" xml:"srep-search-fees"`
	Searchfeeprotest *SearchfeeprotestType `json:",omitempty" xml:"search-fee-protest"`
}

// Srepunityofinvention is Observations where unity of invention is lacking
type Srepunityofinvention *SrepunityofinventionType

// SrepsearchfeesType ...
type SrepsearchfeesType struct {
	XMLName  xml.Name      `json:"-" xml:"srep-search-fees"`
	Srepfee1 *Srepfee1Type `json:",omitempty" xml:"srep-fee-1"`
	Srepfee2 *Srepfee2Type `json:",omitempty" xml:"srep-fee-2"`
	Srepfee3 *Srepfee3Type `json:",omitempty" xml:"srep-fee-3"`
	Srepfee4 *Srepfee4Type `json:",omitempty" xml:"srep-fee-4"`
}

// Srepsearchfees ...
type Srepsearchfees *SrepsearchfeesType

// Srepfee4Type ...
type Srepfee4Type struct {
	XMLName  xml.Name        `json:"-" xml:"srep-fee-4"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
}

// Srepfee4 is No required additional search fees were timely paid by the applicant.
//
//	Consequently, this ISR is restricted to the invention first mentioned in the
//	claims; it is covered by claim number(s):
type Srepfee4 *Srepfee4Type

// Srepfee3Type ...
type Srepfee3Type struct {
	XMLName  xml.Name        `json:"-" xml:"srep-fee-3"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
}

// Srepfee3 is As only some of the required additional search fees were timely paid by the
//
//	applicant, this ISR covers only those claims for which fees were paid,
//	specifically claim number(s):
type Srepfee3 *Srepfee3Type

// Srepfee2Type ...
type Srepfee2Type struct {
	XMLName xml.Name `json:"-" xml:"srep-fee-2"`
}

// Srepfee2 is As all searchable claims could be searched without effort justifying an
//
//	additional fee, this ISA did not invite payment of any additional fees.
type Srepfee2 *Srepfee2Type

// Srepfee1Type ...
type Srepfee1Type struct {
	XMLName xml.Name `json:"-" xml:"srep-fee-1"`
}

// Srepfee1 is As all required additional search fees were timely paid by the applicant,
//
//	this ISR covers all searchable claims.
type Srepfee1 *Srepfee1Type

// SrepclaimsinfoType ...
type SrepclaimsinfoType struct {
	XMLName     xml.Name         `json:"-" xml:"srep-claims-info"`
	Clmsreason1 *Clmsreason1Type `json:",omitempty" xml:"clms-reason-1"`
	Clmsreason2 *Clmsreason2Type `json:",omitempty" xml:"clms-reason-2"`
	Clmsreason3 *Clmsreason3Type `json:",omitempty" xml:"clms-reason-3"`
}

// Srepclaimsinfo is (Old PCT/ISA/210 - Box No. II)
//
//	Observations where certain claims were found unsearchable
//
//	This ISR has not been established in respect of certain claims
//	under Article 17(2)(a) for the following reasons:
//
//	(followed by one of the following three reasons:)
type Srepclaimsinfo *SrepclaimsinfoType

// Clmsreason3Type ...
type Clmsreason3Type struct {
	XMLName  xml.Name        `json:"-" xml:"clms-reason-3"`
	Claimnum []*ClaimnumType `json:",omitempty" xml:"claim-num"`
}

// Clmsreason3 is Claim number(s) (insert value from cliaim-no)
//
//	because they are dependent claims and are not drafted in accordance with the
//	second and third sentences of PCT Rule 6.4(a)
type Clmsreason3 *Clmsreason3Type

// Clmsreason2Type ...
type Clmsreason2Type struct {
	XMLName     xml.Name         `json:"-" xml:"clms-reason-2"`
	Claimnum    []*ClaimnumType  `json:",omitempty" xml:"claim-num"`
	Claimremark *ClaimremarkType `json:",omitempty" xml:"claim-remark"`
}

// Clmsreason2 is Claims Nos.: (insert value from claim-no)
//
//	because they relate to parts of the international application that do not comply
//	with the prescribed requirements to such an extent that no meaningful
//	international search can be carried out, specifically:
type Clmsreason2 *Clmsreason2Type

// Clmsreason1Type ...
type Clmsreason1Type struct {
	XMLName     xml.Name         `json:"-" xml:"clms-reason-1"`
	Claimnum    []*ClaimnumType  `json:",omitempty" xml:"claim-num"`
	Claimremark *ClaimremarkType `json:",omitempty" xml:"claim-remark"`
}

// Clmsreason1 is Claims Nos.: (insert value from cliaim-no)
//
//	because they relate to subject matter not required to be searched by this
//	Authority, namely:
type Clmsreason1 *Clmsreason1Type

// ClaimremarkType ...
type ClaimremarkType struct {
	XMLName xml.Name `json:"-" xml:"claim-remark"`
	P       []*PType `json:",omitempty" xml:"p"`
}

// Claimremark is Remarks on these claims
type Claimremark *ClaimremarkType

// ClaimnumType ...
type ClaimnumType struct {
	XMLName xml.Name `json:"-" xml:"claim-num"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Claimnum is Claim numbers
type Claimnum *ClaimnumType

// SrepbasisType ...
type SrepbasisType struct {
	XMLName                xml.Name                    `json:"-" xml:"srep-basis"`
	Basislanguageforsearch *BasislanguageforsearchType `json:",omitempty" xml:"basis-language-for-search"`
	Sequencelistbasis      *SequencelistbasisType      `json:",omitempty" xml:"sequence-list-basis"`
}

// Srepbasis is +++++++++++++++++++++++++++++++++++++++
//
//	PCT ISR
//	PCT/ISA/210
//	Box 1::Basis of the Report
//	+++++++++++++++++++++++++++++++++++++++
type Srepbasis *SrepbasisType

// SequencelistbasisType ...
type SequencelistbasisType struct {
	XMLName                  xml.Name                      `json:"-" xml:"sequence-list-basis"`
	Materialofsequencelist   *MaterialofsequencelistType   `json:",omitempty" xml:"material-of-sequence-list"`
	Presentationofstatements *PresentationofstatementsType `json:",omitempty" xml:"presentation-of-statements"`
	Additionalinfo           *AdditionalinfoType           `json:",omitempty" xml:"additional-info"`
}

// Sequencelistbasis is A sequence listing and/or any related table(s) - see Supplemental Box Relating
//
//	to Sequence Listing.
type Sequencelistbasis *SequencelistbasisType

// PresentationofstatementsType ...
type PresentationofstatementsType struct {
	XMLName xml.Name `json:"-" xml:"presentation-of-statements"`
}

// Presentationofstatements is (PCT/ISA/210 and PCT/ISA/237 )
//
//	In addition, in the case that more than one version or copy of a sequence
//	listing and/or table relating thereto has been filed or furnished,
//	the required statements that the information in the subsequent or additional
//	copies is identical to that in the application as filed or does not go beyond
//	the application as filed, as appropriate, were furnished.
//
//	(PCT/IPEA/409 and PCT/IPEA/408 )
//	In addition, in the case that more than one version or copy of a sequence
//	listing and/or table(s) relating thereto has been filed or furnished,
//	the required statements that the information in the subsequent or additional
//	copies is identical to that in the application as filed or does not go beyon
//	the application as filed, as appropriate, were furnished.
//	+++++++++++++++++++++++++++++++++++++++
type Presentationofstatements *PresentationofstatementsType

// MaterialofsequencelistType ...
type MaterialofsequencelistType struct {
	XMLName                       xml.Name                           `json:"-" xml:"material-of-sequence-list"`
	Sequencelistingmaterialtype   *SequencelistingmaterialtypeType   `json:",omitempty" xml:"sequence-listing-material-type"`
	Sequencelistingmaterialformat *SequencelistingmaterialformatType `json:",omitempty" xml:"sequence-listing-material-format"`
	Sequencelistingfilingtime     *SequencelistingfilingtimeType     `json:",omitempty" xml:"sequence-listing-filing-time"`
}

// Materialofsequencelist is (PCT/ISA/210 Box No. I Nucleotide and/or amino acid sequence(s)
//
//	(Continuation of item1.b of the first sheet))
//	1. With regard to any nucleotide and/or amino acid sequence disclosed in the
//	international application and necessary to the claimed invention,
//	the international search was carried out on the basis of:
//
//	(PCT/ISA/237 Box No. I Basis of this opinion)
//	2. With regard to any nucleotide and/or amino acid sequence disclosed in the
//	international application and necessary to the claimed invention,
//	this opinion has been established on the basis of:
//
//	(PCT/IPEA/409 Supplemental Box Relating to Sequence Listing)
//	1. With regard to any nucleotide and/or amino acid sequence disclosed in the
//	international application and necessary to the claimed invention,
//	this report was established on the basis of:
//
//	(PCT/IPEA/408 Supplemental Box Relating to Sequence Listing)
//	1. With regard to any nucleotide and/or amino acid sequence disclosed in the
//	international application and necessary to the claimed invention,
//	this opinion was established on the basis of:
//	+++++++++++++++++++++++++++++++++++++++
type Materialofsequencelist *MaterialofsequencelistType

// SreprequestnumberType ...
type SreprequestnumberType struct {
	XMLName xml.Name `json:"-" xml:"srep-request-number"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Sreprequestnumber is Search request number eg. on PCT Form 201.
type Sreprequestnumber *SreprequestnumberType

// SreprequestdateType ...
type SreprequestdateType struct {
	XMLName xml.Name `json:"-" xml:"srep-request-date"`
	Date    int      `json:",omitempty" xml:"date"`
}

// Sreprequestdate is Date of request for search eg. on PCT Form 201
type Sreprequestdate *SreprequestdateType

// DateofearliestpriorityType ...
type DateofearliestpriorityType struct {
	XMLName xml.Name `json:"-" xml:"date-of-earliest-priority"`
	Date    int      `json:",omitempty" xml:"date"`
}

// Dateofearliestpriority is Where the international application claims the priority of several earlier
//
//	applications, the filing date of the earliest application whose priority is
//	claimed must be indicated as the priority date.
type Dateofearliestpriority *DateofearliestpriorityType

// FilereferenceidType ...
type FilereferenceidType struct {
	XMLName xml.Name `json:"-" xml:"file-reference-id"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Filereferenceid is Applicant's or agent's file reference, if desired,
type Filereferenceid *FilereferenceidType

// PatentfamilyType ...
type PatentfamilyType struct {
	XMLName          xml.Name            `json:"-" xml:"patent-family"`
	ExchFamilymember []*FamilymemberType `json:",omitempty" xml:"family-member"`
	ExchAbstract     *AbstractType       `json:",omitempty" xml:"abstract"`
}

// Patentfamily is DOCDB simple patent family consists of all publications that claim EXACTLY the same ACTIVE priorities as
//
//	the "exchange-document";
//	Physically the DOCDB simple patent family is identified by a 9 digit unique key; this key is represented
//	in attribute "id";
//	Functionally the DOCDB simple patent family is identified by the picture of the ACTIVE priorities as
//	identified in the priority-claims of "exchange-document";
//
//	Element "abstract" contains the best quality English language abstract available in the family;
//	Element "abstract" will not be supported in "patent family" when there is an English language abstract
//	available for "exchange-document";
//
//	application and publication-numbers in "patent family" are represented in both data-format="docdb" and
//	data-format="epodoc";
type Patentfamily *PatentfamilyType

// FamilymemberType ...
type FamilymemberType struct {
	XMLName                  xml.Name                    `json:"-" xml:"family-member"`
	ExchApplicationreference []*ApplicationreferenceType `json:",omitempty" xml:"application-reference"`
	ExchPublicationreference []*PublicationreferenceType `json:",omitempty" xml:"publication-reference"`
}

// Familymember is Element "family member" contains :
//
//	"application-reference"
//	"publication-reference" - one or more - all publication-levels of the application
type Familymember *FamilymemberType

// CorrectionnoticeType ...
type CorrectionnoticeType struct {
	XMLName              xml.Name                      `json:"-" xml:"correction-notice"`
	Date                 int                           `json:",omitempty" xml:"date"`
	ExchGazettereference *ExchangegazettereferenceType `json:",omitempty" xml:"gazette-reference"`
}

// Correctionnotice is (ST.32:B480)
type Correctionnotice *CorrectionnoticeType

// RepublicationnotesType ...
type RepublicationnotesType struct {
	XMLName           xml.Name                 `json:"-" xml:"republication-notes"`
	Republicationnote []*RepublicationnoteType `json:",omitempty" xml:"republication-note"`
}

// Republicationnotes is Notes on the correction information (ST.32 : B154EP)
type Republicationnotes *RepublicationnotesType

// ModificationsType ...
type ModificationsType struct {
	XMLName              xml.Name                  `json:"-" xml:"modifications"`
	Modifiedbibliography *ModifiedbibliographyType `json:",omitempty" xml:"modified-bibliography"`
	Modifiedpart         []*ModifiedpartType       `json:",omitempty" xml:"modified-part"`
}

// Modifications is Information on the modifications in the document (ST.32 : B153 and B155EP)
type Modifications *ModificationsType

// ModifiedpartnameType ...
type ModifiedpartnameType struct {
	XMLName xml.Name `json:"-" xml:"modified-part-name"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Modifiedpartname is Name of the affected part (ST.32 : B1552EP)
type Modifiedpartname *ModifiedpartnameType

// ModifiedbibliographyType ...
type ModifiedbibliographyType struct {
	XMLName  xml.Name        `json:"-" xml:"modified-bibliography"`
	Inidcode []*InidcodeType `json:",omitempty" xml:"inid-code"`
}

// Modifiedbibliography is INID-codes affected by the correction information (ST.32 : B153)
type Modifiedbibliography *ModifiedbibliographyType

// CancellationdateType ...
type CancellationdateType struct {
	XMLName xml.Name `json:"-" xml:"cancellation-date"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Cancellationdate is Issue date of announced correction being cancelled B152EP
type Cancellationdate *CancellationdateType

// RepublicationcodeType ...
type RepublicationcodeType struct {
	XMLName xml.Name `json:"-" xml:"republication-code"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Republicationcode is Correction information B151EP
type Republicationcode *RepublicationcodeType

// TypeofcorrectionType ...
type TypeofcorrectionType struct {
	XMLName xml.Name `json:"-" xml:"type-of-correction"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Typeofcorrection is type-of-correction [ for WIPO only ]
type Typeofcorrection *TypeofcorrectionType

// CorrespondingdocsType ...
type CorrespondingdocsType struct {
	XMLName    xml.Name          `json:"-" xml:"corresponding-docs"`
	Patcit     []*PatcitType     `json:",omitempty" xml:"patcit"`
	Nplcit     []*NplcitType     `json:",omitempty" xml:"nplcit"`
	Relpassage []*RelpassageType `json:",omitempty" xml:"rel-passage"`
	Category   []*CategoryType   `json:",omitempty" xml:"category"`
	Relclaims  []*string         `json:",omitempty" xml:"rel-claims"`
}

// Correspondingdocs is Patent family and corresponding-docs - see example above
//
//	These are also "&" cases.
type Correspondingdocs *CorrespondingdocsType

// Priorityclaims is DOCDB may have added one additional priority to the set as printed on the published document.
//
//	For internal EPO business purposes a so-called "self-claim" may have been generated.
//	In a "self-claim" the priority-reference = the application-reference
type Priorityclaims *PriorityclaimsType

// PriorityclaimsType ...
type PriorityclaimsType struct {
	XMLName           xml.Name             `json:"-" xml:"priority-claims"`
	ExchPriorityclaim []*PriorityclaimType `json:",omitempty" xml:"priority-claim"`
}

// Priorityactiveindicator ...
type Priorityactiveindicator string

// Prioritylinkagetype ...
type Prioritylinkagetype string

// PrioritydocattachedType ...
type PrioritydocattachedType struct {
	XMLName xml.Name `json:"-" xml:"priority-doc-attached"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Prioritydocattached is The priority document is attached to the application
type Prioritydocattached *PrioritydocattachedType

// PrioritydocrequestedType ...
type PrioritydocrequestedType struct {
	XMLName xml.Name `json:"-" xml:"priority-doc-requested"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Prioritydocrequested is The receiving office is requested to prepare and transmit to the IB a certified
//
//	copy of the earlier application
type Prioritydocrequested *PrioritydocrequestedType

// OfficeoffilingType ...
type OfficeoffilingType struct {
	XMLName xml.Name    `json:"-" xml:"office-of-filing"`
	Region  *RegionType `json:",omitempty" xml:"region"`
	Country string      `json:",omitempty" xml:"country"`
}

// Officeoffiling is Where the earlier application is an ARIPO application,indicate at least one
//
//	country party to the PARIS convention for the protection of industrial property
//	or one member of the WTO for which that earlier application was filed.
type Officeoffiling *OfficeoffilingType

// Parties ...
type Parties *PartiesType

// PartiesType ...
type PartiesType struct {
	XMLName               xml.Name                   `json:"-" xml:"parties"`
	ExchApplicants        *ApplicantsType            `json:",omitempty" xml:"applicants"`
	ExchInventors         *InventorsType             `json:",omitempty" xml:"inventors"`
	Correspondenceaddress *CorrespondenceaddressType `json:",omitempty" xml:"correspondence-address"`
	Agents                *AgentsType                `json:",omitempty" xml:"agents"`
}

// AgentsType ...
type AgentsType struct {
	XMLName        xml.Name            `json:"-" xml:"agents"`
	Customernumber *CustomernumberType `json:",omitempty" xml:"customer-number"`
	Agent          []*AgentType        `json:",omitempty" xml:"agent"`
}

// Agents is Information regarding Agents or common representatives
type Agents *AgentsType

// CorrespondenceaddressType ...
type CorrespondenceaddressType struct {
	XMLName        xml.Name            `json:"-" xml:"correspondence-address"`
	Customernumber *CustomernumberType `json:",omitempty" xml:"customer-number"`
	Addressbook    []*AddressbookType  `json:",omitempty" xml:"addressbook"`
}

// Correspondenceaddress is Address used for general correspondence
type Correspondenceaddress *CorrespondenceaddressType

// CustomernumberType ...
type CustomernumberType struct {
	XMLName xml.Name `json:"-" xml:"customer-number"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Customernumber is Customer number for agents by office
type Customernumber *CustomernumberType

// Inventors is Inventors information:
//
//	if the US is designated, all of the inventors must also be named as applicants
//	Contains inventors in different data-formats
//	1. all data-format="docdb"
//	2. all data-format="docdba"
//	3. all data-format="original"
type Inventors *InventorsType

// InventorsType ...
type InventorsType struct {
	XMLName              xml.Name                `json:"-" xml:"inventors"`
	ExchInventor         []*InventorType         `json:",omitempty" xml:"inventor"`
	ExchDeceasedinventor []*DeceasedinventorType `json:",omitempty" xml:"deceased-inventor"`
}

// Inventor is DOCDB only keeps a record of inventor-name and country of residence; address is only available
//
//	sporadically
//	address is included in applicant data-format="docdba"
//	country of residence in applicant data-format="docdb"
//	DOCDB exchanges inventor-name in "name", address in "text";
//	Attributes used on "inventor" level
//	sequence = sequence as printed on the published document;
//	Attributes used on "inventor-name" level
//	data-format = "docdb", standardised following DOCDB primary standardisation rules;
//	data-format = "docdba", standardised following DOCDB secondary rules (translation upper-case);
//	data-format = "original", as supplied by the provider, converted to UTF8;
//	IFD tags, inventor :
//	111 = name "docdb";
//	110 = name "docdba";
//	972 = name "original";
//	113 = address;
//	112 = residence;
//	ST.30 tags, inventor :
//	720 = name;
//	722 = residence;
type Inventor *InventorType

// ApplicantsType ...
type ApplicantsType struct {
	XMLName       xml.Name         `json:"-" xml:"applicants"`
	ExchApplicant []*ApplicantType `json:",omitempty" xml:"applicant"`
}

// Applicants ...
type Applicants *ApplicantsType

// DesignatedstatesasinventorType ...
type DesignatedstatesasinventorType struct {
	XMLName xml.Name    `json:"-" xml:"designated-states-as-inventor"`
	Country []string    `json:",omitempty" xml:"country"`
	Region  *RegionType `json:",omitempty" xml:"region"`
}

// Designatedstatesasinventor is Rule 4.6(c):
//
//	"The request may, for different designated states, indicate different persons
//	as inventors where, in this respect, the requirements of the national laws of
//	the designated States are not the same. In such a case, the request shall
//	contain a separate statement for each designated State or group of States in
//	which a particular person, or the same person, is to be considered the
//	inventor, or in which particular persons, or the same persons, are to be
//	considered the inventors."
type Designatedstatesasinventor *DesignatedstatesasinventorType

// DesignatedstatesType ...
type DesignatedstatesType struct {
	XMLName xml.Name    `json:"-" xml:"designated-states"`
	Country []string    `json:",omitempty" xml:"country"`
	Region  *RegionType `json:",omitempty" xml:"region"`
}

// Designatedstates is Indication of specific Contracting States in or for which the applicant is
//
//	seeking protection for his invention (Rule 4.9(a))
type Designatedstates *DesignatedstatesType

// ResidenceType ...
type ResidenceType struct {
	XMLName xml.Name `json:"-" xml:"residence"`
	Country string   `json:",omitempty" xml:"country"`
}

// Residence is Country of residence
type Residence *ResidenceType

// NationalityType ...
type NationalityType struct {
	XMLName xml.Name `json:"-" xml:"nationality"`
	Country string   `json:",omitempty" xml:"country"`
}

// Nationality is Country of nationality
type Nationality *NationalityType

// DesignationepcType ...
type DesignationepcType struct {
	XMLName                   xml.Name                     `json:"-" xml:"designation-epc"`
	ExchContractingstates     []*ContractingstatesType     `json:",omitempty" xml:"contracting-states"`
	ExchExtensionstates       []*ExtensionstatesType       `json:",omitempty" xml:"extension-states"`
	ExchValidationstates      []*ValidationstatesType      `json:",omitempty" xml:"validation-states"`
	ExchUpparticipatingstates []*UpparticipatingstatesType `json:",omitempty" xml:"up-participating-states"`
}

// Designationepc is EPO member states in which protection is desired.
type Designationepc *DesignationepcType

// ExtensionstatesType ...
type ExtensionstatesType struct {
	XMLName xml.Name `json:"-" xml:"extension-states"`
	Country string   `json:",omitempty" xml:"country"`
}

// Extensionstates is Recognising EP patent applications and patents on their territory
type Extensionstates *ExtensionstatesType

// ContractingstatesType ...
type ContractingstatesType struct {
	XMLName xml.Name `json:"-" xml:"contracting-states"`
	Country string   `json:",omitempty" xml:"country"`
}

// Contractingstates is The EPO member States for which protection (depending upon context) is desired
type Contractingstates *ContractingstatesType

// ValidationstatesType ...
type ValidationstatesType struct {
	XMLName xml.Name `json:"-" xml:"validation-states"`
	Country string   `json:",omitempty" xml:"country"`
}

// Validationstates is Recognising EP patent applications and patents on their territory
type Validationstates *ValidationstatesType

// UpparticipatingstatesType ...
type UpparticipatingstatesType struct {
	XMLName xml.Name `json:"-" xml:"up-participating-states"`
	Country string   `json:",omitempty" xml:"country"`
}

// Upparticipatingstates is EPO member states participating in the Unitary Patent
type Upparticipatingstates *UpparticipatingstatesType

// ExclusionfromdesignationType ...
type ExclusionfromdesignationType struct {
	XMLName      xml.Name        `json:"-" xml:"exclusion-from-designation"`
	ExchRegional []*RegionalType `json:",omitempty" xml:"regional"`
	ExchNational *NationalType   `json:",omitempty" xml:"national"`
}

// Exclusionfromdesignation is State(s) excluded from precautionary designations under Rule 4.9(b)
type Exclusionfromdesignation *ExclusionfromdesignationType

// PrecautionarydesignationstatementType ...
type PrecautionarydesignationstatementType struct {
	XMLName xml.Name `json:"-" xml:"precautionary-designation-statement"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Precautionarydesignationstatement is Rule 4.9(b),(c)
//
//	In addition to the designations made above [i.e, designation-of states], the
//	applicant also makes under Rule 4.9(b) all other designations which would be
//	permitted under the PCT except any designation(s) indicated in the Supplemental
//	Box [i.e., exclusion-from-designation] as being excluded form the scope of this
//	statement. The applicant declares that those additional designations are
//	subject to confirmation and that any designation which is not confirmed before
//	the expiration of 15 months from the priority date is to be regarded as
//	withdrawn by the applicant at the expiration of that time limit.
type Precautionarydesignationstatement *PrecautionarydesignationstatementType

// DesignationpctType ...
type DesignationpctType struct {
	XMLName               xml.Name                     `json:"-" xml:"designation-pct"`
	ExchRegional          []*RegionalType              `json:",omitempty" xml:"regional"`
	ExchNational          *NationalType                `json:",omitempty" xml:"national"`
	Newdesignationcountry []*NewdesignationcountryType `json:",omitempty" xml:"new-designation-country"`
}

// Designationpct is The Contracting States in which protection is desired
//
//	(Rules 4.1(a)(iv) and 4.9(a))
type Designationpct *DesignationpctType

// NewdesignationcountryType ...
type NewdesignationcountryType struct {
	XMLName xml.Name `json:"-" xml:"new-designation-country"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Newdesignationcountry is New PCT member country states (e.g., not yet published in WIPO ST.3, joined after
//
//	PCT electronic filing software published)
type Newdesignationcountry *NewdesignationcountryType

// NationalType ...
type NationalType struct {
	XMLName           xml.Name                 `json:"-" xml:"national"`
	Country           string                   `json:",omitempty" xml:"country"`
	Protectionrequest []*ProtectionrequestType `json:",omitempty" xml:"protection-request"`
}

// National is The States for which protection or exclusion (depending upon context) is desired
type National *NationalType

// RegionalType ...
type RegionalType struct {
	XMLName           xml.Name                 `json:"-" xml:"regional"`
	Region            *RegionType              `json:",omitempty" xml:"region"`
	Country           string                   `json:",omitempty" xml:"country"`
	Protectionrequest []*ProtectionrequestType `json:",omitempty" xml:"protection-request"`
	Anyotherstate     *AnyotherstateType       `json:",omitempty" xml:"any-other-state"`
}

// Regional is Regional (as opposed to national) protection being sought
type Regional *RegionalType

// AnyotherstateType ...
type AnyotherstateType struct {
	XMLName xml.Name `json:"-" xml:"any-other-state"`
}

// Anyotherstate is Any other state in which protection is being sought
type Anyotherstate *AnyotherstateType

// ProtectionrequestType ...
type ProtectionrequestType struct {
	XMLName          xml.Name              `json:"-" xml:"protection-request"`
	Kindofprotection *KindofprotectionType `json:",omitempty" xml:"kind-of-protection"`
	Documentid       *DocumentidType       `json:",omitempty" xml:"document-id"`
}

// Protectionrequest is Protection request for the designated office.
type Protectionrequest *ProtectionrequestType

// KindofprotectionType ...
type KindofprotectionType struct {
	XMLName xml.Name `json:"-" xml:"kind-of-protection"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Kindofprotection is Kind of protection; e.g., patent, utility model
type Kindofprotection *KindofprotectionType

// RegionType ...
type RegionType struct {
	XMLName xml.Name `json:"-" xml:"region"`
	Country string   `json:",omitempty" xml:"country"`
}

// Region is The region for which protection or
//
//	exclusion (depending upon context) is desired.
type Region *RegionType

// Gazettepubannouncement ...
type Gazettepubannouncement struct {
	XMLName        xml.Name        `json:"-" xml:"gazette-pub-announcement"`
	ExchGazettenum *GazettenumType `json:",omitempty" xml:"gazette-num"`
	ExchDate       string          `json:",omitempty" xml:"date"`
	ExchText       *string         `json:",omitempty" xml:"text"`
}

// Supplementalsreppub ...
type Supplementalsreppub struct {
	XMLName     xml.Name `json:"-" xml:"supplemental-srep-pub"`
	ExchSrepnum string   `json:",omitempty" xml:"srep-num"`
	ExchDate    string   `json:",omitempty" xml:"date"`
}

// Srepnum ...
type Srepnum string

// Abstractreference is Separate publication of an abstract.
//
//	Tag A42 from EPO ST.30 / DOCDB Exchange Tape Format Technical Specification v6.3
type Abstractreference *AbstractreferenceType

// Modifiedcompletespecpub is Separate publication of a modified complete specification
type Modifiedcompletespecpub *ModifiedcompletespecpubType

// Modifiedfirstpagepub is Separate publication of a modified first page report
//
//	Tag A45 from EPO ST.30 / DOCDB Exchange Tape Format Technical Specification v6.3
type Modifiedfirstpagepub *ModifiedfirstpagepubType

// PrintedasamendedType ...
type PrintedasamendedType struct {
	XMLName    xml.Name             `json:"-" xml:"printed-as-amended"`
	Documentid *DocumentidPrintType `json:",omitempty" xml:"document-id"`
	Text       *string              `json:",omitempty" xml:"text"`
}

// Printedasamended is Document printed as amended, (eg. EPO B2).
//
//	(ST.32:B477)
type Printedasamended *PrintedasamendedType

// InvalidationofpatentType ...
type InvalidationofpatentType struct {
	XMLName    xml.Name        `json:"-" xml:"invalidation-of-patent"`
	Documentid *DocumentidType `json:",omitempty" xml:"document-id"`
	Text       *string         `json:",omitempty" xml:"text"`
}

// Invalidationofpatent is Invalidation of patent.
//
//	(ST.32:B476)
type Invalidationofpatent *InvalidationofpatentType

// TermofgrantType ...
type TermofgrantType struct {
	XMLName       xml.Name             `json:"-" xml:"term-of-grant"`
	Text          []*string            `json:",omitempty" xml:"text"`
	Disclaimer    []*DisclaimerType    `json:",omitempty" xml:"disclaimer"`
	Lengthofgrant []*LengthofgrantType `json:",omitempty" xml:"length-of-grant"`
	Lapseofpatent []*LapseofpatentType `json:",omitempty" xml:"lapse-of-patent"`
}

// Termofgrant is Term of grant.
//
//	(ST.32:B472)
type Termofgrant *TermofgrantType

// LapseofpatentType ...
type LapseofpatentType struct {
	XMLName    xml.Name        `json:"-" xml:"lapse-of-patent"`
	Documentid *DocumentidType `json:",omitempty" xml:"document-id"`
	Text       *string         `json:",omitempty" xml:"text"`
}

// Lapseofpatent is Lapse of patent.
//
//	(ST.32:B475)
type Lapseofpatent *LapseofpatentType

// LengthofgrantType ...
type LengthofgrantType struct {
	XMLName xml.Name `json:"-" xml:"length-of-grant"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Lengthofgrant is Length of Grant.
//
//	(ST.32:B474)
type Lengthofgrant *LengthofgrantType

// DisclaimerType ...
type DisclaimerType struct {
	XMLName xml.Name `json:"-" xml:"disclaimer"`
	Date    int      `json:",omitempty" xml:"date"`
	Text    *string  `json:",omitempty" xml:"text"`
}

// Disclaimer is Disclaimer date.
//
//	(ST.32:B473)
type Disclaimer *DisclaimerType

// GazettenumType ...
type GazettenumType struct {
	XMLName xml.Name `json:"-" xml:"gazette-num"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Gazettenum ...
type Gazettenum *GazettenumType

// CombinationrankType ...
type CombinationrankType struct {
	XMLName              xml.Name                  `json:"-" xml:"combination-rank"`
	Ranknumber           string                    `json:",omitempty" xml:"rank-number"`
	Patentclassification *PatentclassificationType `json:",omitempty" xml:"patent-classification"`
}

// Combinationrank ...
type Combinationrank *CombinationrankType

// UnlinkedindexingcodeType ...
type UnlinkedindexingcodeType struct {
	XMLName xml.Name `json:"-" xml:"unlinked-indexing-code"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Unlinkedindexingcode is Unlinked indexing code.
//
//	(ST.32:B515/B525)
type Unlinkedindexingcode *UnlinkedindexingcodeType

// LinkedindexingcodegroupType ...
type LinkedindexingcodegroupType struct {
	XMLName                xml.Name                     `json:"-" xml:"linked-indexing-code-group"`
	Mainlinkedindexingcode *MainlinkedindexingcodeType  `json:",omitempty" xml:"main-linked-indexing-code"`
	Sublinkedindexingcode  []*SublinkedindexingcodeType `json:",omitempty" xml:"sub-linked-indexing-code"`
}

// Linkedindexingcodegroup is Linked indexing code.
//
//	(ST.32:B514/B524)
type Linkedindexingcodegroup *LinkedindexingcodegroupType

// SublinkedindexingcodeType ...
type SublinkedindexingcodeType struct {
	XMLName xml.Name `json:"-" xml:"sub-linked-indexing-code"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Sublinkedindexingcode is Sub/further Linked Indexing Code.
type Sublinkedindexingcode *SublinkedindexingcodeType

// MainlinkedindexingcodeType ...
type MainlinkedindexingcodeType struct {
	XMLName xml.Name `json:"-" xml:"main-linked-indexing-code"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Mainlinkedindexingcode is Main Linked Indexing Code.
type Mainlinkedindexingcode *MainlinkedindexingcodeType

// AdditionalinfoType ...
type AdditionalinfoType struct {
	XMLName xml.Name `json:"-" xml:"additional-info"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Additionalinfo is Additional information. ST.32 equivalency = B513
type Additionalinfo *AdditionalinfoType

// MainclassificationType ...
type MainclassificationType struct {
	XMLName xml.Name `json:"-" xml:"main-classification"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Mainclassification is Main classification.
//
//	(ST.32:B511/B521)
type Mainclassification *MainclassificationType

// GeneratingofficeType ...
type GeneratingofficeType struct {
	XMLName xml.Name `json:"-" xml:"generating-office"`
	Country string   `json:",omitempty" xml:"country"`
}

// Generatingoffice is Positions 41-42: Generating Office
//
//	Since part of the original data in the advanced level and
//	the reclassified data can be delivered by offices other than the
//	publishing office, the information source of such data is
//	recorded by a field of two characters. The country or office
//	code CC, as defined by WIPO Standard ST.3, must be used.
type Generatingoffice *GeneratingofficeType

// ClassificationdatasourceType ...
type ClassificationdatasourceType struct {
	XMLName xml.Name `json:"-" xml:"classification-data-source"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Classificationdatasource is Position 40: Source of classification data
//
//	The following sources of classification data are foreseen:
//	- Intellectual classification by persons,
//	value H for human generated data.
//	- Machine classification by the propagation of earlier
//	intellectual classification through the use of common
//	priorities in the patent application.
//	The value M is used in this case and will facilitate later corrections.
//	- Classification symbols generated by software using automatic
//	analysis of the content of the patent document.
//	The letter G is used to indicate this source of generated data.
type Classificationdatasource *ClassificationdatasourceType

// ClassificationstatusType ...
type ClassificationstatusType struct {
	XMLName xml.Name `json:"-" xml:"classification-status"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Classificationstatus is Position 39: Original and reclassified data
//
//	Original data is the first data assigned to the document.
//	In case of a publishing office assigning classification symbols at
//	the core level, another office may also assign symbols at
//	the advanced level as original data.
//	Reclassified data is data changed due to a change in the classification schemes.
//	Various data is data changed due to an incidental reclassification
//	of an individual document, such as the correction of a mistake.
//	Deleted data is data which has to be deleted from the
//	Master Classification Database, due to a change in assigning of
//	classification symbols to a document.
//
//	The indication of the different types of data is marked by the letters B for the basic or original data,
//	R for reclassified data, V for various incidental changes, and D for data to be deleted.
//	Possible status: original-classification, reclassified, various-classification, deleted-classification
type Classificationstatus *ClassificationstatusType

// ActiondateType ...
type ActiondateType struct {
	XMLName xml.Name `json:"-" xml:"action-date"`
	Date    int      `json:",omitempty" xml:"date"`
}

// ClassificationvalueType ...
type ClassificationvalueType struct {
	XMLName xml.Name `json:"-" xml:"classification-value"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Classificationvalue is Position 30: Classification value (inventive or non-inventive)
//
//	The difference between invention information and other information
//	is important for the retrieval of the information. The
//	letters I and N are used for the invention and non-invention
//	information, respectively.
type Classificationvalue *ClassificationvalueType

// SymbolpositionType ...
type SymbolpositionType struct {
	XMLName xml.Name `json:"-" xml:"symbol-position"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Symbolposition is Position 29: First or later position of symbols
//
//	The position of the first invention information classification
//	can be recognized by this field. The letters F and L are used
//	for first and later position, respectively.
type Symbolposition *SymbolpositionType

// ClassificationlevelType ...
type ClassificationlevelType struct {
	XMLName xml.Name `json:"-" xml:"classification-level"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Classificationlevel is Position 28 : Classification level
//
//	Offices are expected to classify each subject matter only in one level (core or advanced). However, both
//	levels need to
//	be completely represented in the master classification database and thus a level indicator is needed.
//	The level indicator
//	is also useful for indicating situations where an office does not classify in either the core or the
//	advanced level
//	classification, i.e., when an office only assigns classifications to the subclass level. The level
//	indicator enables to make the difference between core, advanced and subclass levels. The letters C
//	(Core), A (Advanced) and S (Subclass) are
//	used for this one-digit field.
//
//	Levels: ipcr-advanced, ipcr-core
type Classificationlevel *ClassificationlevelType

// IpcversionindicatorType ...
type IpcversionindicatorType struct {
	XMLName xml.Name `json:"-" xml:"ipc-version-indicator"`
	Date    int      `json:",omitempty" xml:"date"`
}

// Ipcversionindicator is Positions 20 to 27: Version indicator
//
//	Although in the paper publications a version indicator may contain
//	four or six digits, the version indicator in machinereadable
//	records contains eight digits, namely YYYYMMDD with Y for year, M for month and D for day.
type Ipcversionindicator *IpcversionindicatorType

// SubgroupType ...
type SubgroupType struct {
	XMLName xml.Name `json:"-" xml:"subgroup"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Subgroup ...
type Subgroup *SubgroupType

// MaingroupType ...
type MaingroupType struct {
	XMLName xml.Name `json:"-" xml:"main-group"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Maingroup ...
type Maingroup *MaingroupType

// SubclassType ...
type SubclassType struct {
	XMLName xml.Name `json:"-" xml:"subclass"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Subclass ...
type Subclass *SubclassType

// SectionType ...
type SectionType struct {
	XMLName xml.Name `json:"-" xml:"section"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Section is Positions 1 to 19: Recording of the parts of the IPC symbols
//
//	IPC symbols are defined in Part 5 of the WIPO Handbook on
//	Industrial Property Information and Documentation and in
//	the latest version of the Guide to the IPC.
type Section *SectionType

// P is *******************************
//
//	PARAGRAPH
//	*******************************
//
//	EPO Required usage:
//	- In case of standard paragraphs in the description: id="p0001", "p0002", etc.
//	- In case of abstracts: id="pa01", "pa02", etc. (more than three is rare)
//	- In case of amended-claims-statement: id="pc0001", "pc0002", etc.
//	- In case of search reports: id="ps0001", "ps0002", etc.
//	- num = 0001, 0002, etc.
//
//	EPO style: - always left justified
//	- precede by para. number in bold as so: [0001]
//	- para. text indented 7mm from [0001]
//	- see espacenet for examples
type P *ExchpType

// Abstsolution is abst-solution
//
//	The solution to the alleged problem that the invention purports to solve.
//
//	Recommended id="abss"
//
//	Unlikely to be used by the EPO
type Abstsolution *AbstsolutionType

// Abstproblem is abst-problem
//
//	The alleged problem that the invention purports to solve
//
//	Recommended id="absp"
//
//	Unlikely to be used by the EPO
type Abstproblem *AbstproblemType

// EntryAtt ...
type EntryAtt struct {
	XMLName xml.Name `json:"-" xml:"entry.att"`
}

// RowAtt ...
type RowAtt struct {
	XMLName xml.Name `json:"-" xml:"row.att"`
}

// TbodyAtt ...
type TbodyAtt struct {
	XMLName xml.Name `json:"-" xml:"tbody.att"`
}

// TheadAtt ...
type TheadAtt struct {
	XMLName xml.Name `json:"-" xml:"thead.att"`
}

// ColspecAtt ...
type ColspecAtt struct {
	XMLName xml.Name `json:"-" xml:"colspec.att"`
}

// TgroupAtt ...
type TgroupAtt struct {
	XMLName xml.Name `json:"-" xml:"tgroup.att"`
}

// TableAtt ...
type TableAtt struct {
	XMLName xml.Name `json:"-" xml:"table.att"`
}

// DdType ...
type DdType struct {
	XMLName    xml.Name          `json:"-" xml:"dd"`
	B          []*BType          `json:",omitempty" xml:"b"`
	I          []*IType          `json:",omitempty" xml:"i"`
	U          []*UType          `json:",omitempty" xml:"u"`
	O          []*OType          `json:",omitempty" xml:"o"`
	Sup        []*SupType        `json:",omitempty" xml:"sup"`
	Sub        []*SubType        `json:",omitempty" xml:"sub"`
	Smallcaps  []*SmallcapsType  `json:",omitempty" xml:"smallcaps"`
	Br         []*BrType         `json:",omitempty" xml:"br"`
	Pre        []*PreType        `json:",omitempty" xml:"pre"`
	Patcit     []*PatcitType     `json:",omitempty" xml:"patcit"`
	Nplcit     []*NplcitType     `json:",omitempty" xml:"nplcit"`
	Biodeposit []*BiodepositType `json:",omitempty" xml:"bio-deposit"`
	Crossref   []*CrossrefType   `json:",omitempty" xml:"crossref"`
	Figref     []*FigrefType     `json:",omitempty" xml:"figref"`
	Img        []*ImgType        `json:",omitempty" xml:"img"`
	Ul         []*UlType         `json:",omitempty" xml:"ul"`
	Ol         []*OlType         `json:",omitempty" xml:"ol"`
	Chemistry  []*ChemistryType  `json:",omitempty" xml:"chemistry"`
	Maths      []*MathsType      `json:",omitempty" xml:"maths"`
}

// Dd is Definition description
type Dd *DdType

// SemanticsContentExpression ...
type SemanticsContentExpression struct {
	XMLName             xml.Name `json:"-" xml:"semanticsContentExpression"`
	Csymbol             *CsymbolType
	Ci                  *CiType
	Cn                  *CnType
	Apply               *ApplyType
	Reln                *RelnType
	Lambda              *LambdaType
	Condition           *ConditionType
	Declare             *DeclareType
	Sep                 *SepType
	Semantics           *SemanticsType
	Annotation          *AnnotationType
	Annotationxml       *AnnotationxmlType
	Integers            *IntegersType
	Reals               *RealsType
	Rationals           *RationalsType
	Naturalnumbers      *NaturalnumbersType
	Complexes           *ComplexesType
	Primes              *PrimesType
	Exponentiale        *ExponentialeType
	Imaginaryi          *ImaginaryiType
	Notanumber          *NotanumberType
	True                *TrueType
	False               *FalseType
	Emptyset            *EmptysetType
	Pi                  *PiType
	Eulergamma          *EulergammaType
	Infinity            *InfinityType
	Interval            *IntervalType
	List                *ListType
	Matrix              *MatrixType
	Matrixrow           *MatrixrowType
	Set                 *SetType
	Vector              *VectorType
	Piecewise           *PiecewiseType
	Lowlimit            *LowlimitType
	Uplimit             *UplimitType
	Bvar                *BvarType
	Degree              *DegreeType
	Logbase             *LogbaseType
	Momentabout         *MomentaboutType
	Domainofapplication *DomainofapplicationType
	Inverse             *InverseType
	Ident               *IdentType
	Domain              *DomainType
	Codomain            *CodomainType
	Image               *ImageType
	Abs                 *AbsType
	Conjugate           *ConjugateType
	Exp                 *ExpType
	Factorial           *FactorialType
	Arg                 *ArgType
	Real                *RealType
	Imaginary           *ImaginaryType
	Floor               *FloorType
	Ceiling             *CeilingType
	Not                 *NotType
	Ln                  *LnType
	Sin                 *SinType
	Cos                 *CosType
	Tan                 *TanType
	Sec                 *SecType
	Csc                 *CscType
	Cot                 *CotType
	Sinh                *SinhType
	Cosh                *CoshType
	Tanh                *TanhType
	Sech                *SechType
	Csch                *CschType
	Coth                *CothType
	Arcsin              *ArcsinType
	Arccos              *ArccosType
	Arctan              *ArctanType
	Arccosh             *ArccoshType
	Arccot              *ArccotType
	Arccoth             *ArccothType
	Arccsc              *ArccscType
	Arccsch             *ArccschType
	Arcsec              *ArcsecType
	Arcsech             *ArcsechType
	Arcsinh             *ArcsinhType
	Arctanh             *ArctanhType
	Determinant         *DeterminantType
	Transpose           *TransposeType
	Card                *CardType
	Quotient            *QuotientType
	Divide              *DivideType
	Power               *PowerType
	Rem                 *RemType
	Implies             *ImpliesType
	Vectorproduct       *VectorproductType
	Scalarproduct       *ScalarproductType
	Outerproduct        *OuterproductType
	Setdiff             *SetdiffType
	Fn                  *FnType
	Compose             *ComposeType
	Plus                *PlusType
	Times               *TimesType
	Max                 *MaxType
	Min                 *MinType
	Gcd                 *GcdType
	Lcm                 *LcmType
	And                 *AndType
	Or                  *OrType
	Xor                 *XorType
	Union               *UnionType
	Intersect           *IntersectType
	Cartesianproduct    *CartesianproductType
	Mean                *MeanType
	Sdev                *SdevType
	Variance            *VarianceType
	Median              *MedianType
	Mode                *ModeType
	Selector            *SelectorType
	Root                *RootType
	Minus               *MinusType
	Log                 *LogType
	Int                 *IntType
	Diff                *DiffType
	Partialdiff         *PartialdiffType
	Divergence          *DivergenceType
	Grad                *GradType
	Curl                *CurlType
	Laplacian           *LaplacianType
	Sum                 *SumType
	Product             *ProductType
	Limit               *LimitType
	Moment              *MomentType
	Exists              *ExistsType
	Forall              *ForallType
	Neq                 *NeqType
	Factorof            *FactorofType
	In                  *InType
	Notin               *NotinType
	Notsubset           *NotsubsetType
	Notprsubset         *NotprsubsetType
	Tendsto             *TendstoType
	Eq                  *EqType
	Leq                 *LeqType
	Lt                  *LtType
	Geq                 *GeqType
	Gt                  *GtType
	Equivalent          *EquivalentType
	Approx              *ApproxType
	Subset              *SubsetType
	Prsubset            *PrsubsetType
	Mi                  *MiType
	Mn                  *MnType
	Mo                  *MoType
	Mtext               *Mstring
	Ms                  *MsType
	Mspace              *MspaceType
	Mrow                *MrowType
	Mfrac               *MfracType
	Msqrt               *MsqrtType
	Mroot               *MrootType
	Menclose            *MencloseType
	Mstyle              *MstyleType
	Merror              *MerrorType
	Mpadded             *MpaddedType
	Mphantom            *MphantomType
	Mfenced             *MfencedType
	Msub                *MsubType
	Msup                *MsupType
	Msubsup             *MsubsupType
	Munder              *MunderType
	Mover               *MoverType
	Munderover          *MunderoverType
	Mmultiscripts       *MmultiscriptsType
	Mtable              *MtableType
	Mtr                 *MtrType
	Mlabeledtr          *MlabeledtrType
	Mtd                 *MtdType
	Maligngroup         *MaligngroupType
	Malignmark          *MalignmarkType
	Maction             *MactionType
}

// ContentExpression ...
type ContentExpression struct {
	Csymbol             *CsymbolType
	Ci                  *CiType
	Cn                  *CnType
	Apply               *ApplyType
	Reln                *RelnType
	Lambda              *LambdaType
	Condition           *ConditionType
	Declare             *DeclareType
	Sep                 *SepType
	Semantics           *SemanticsType
	Annotation          *AnnotationType
	Annotationxml       *AnnotationxmlType
	Integers            *IntegersType
	Reals               *RealsType
	Rationals           *RationalsType
	Naturalnumbers      *NaturalnumbersType
	Complexes           *ComplexesType
	Primes              *PrimesType
	Exponentiale        *ExponentialeType
	Imaginaryi          *ImaginaryiType
	Notanumber          *NotanumberType
	True                *TrueType
	False               *FalseType
	Emptyset            *EmptysetType
	Pi                  *PiType
	Eulergamma          *EulergammaType
	Infinity            *InfinityType
	Interval            *IntervalType
	List                *ListType
	Matrix              *MatrixType
	Matrixrow           *MatrixrowType
	Set                 *SetType
	Vector              *VectorType
	Piecewise           *PiecewiseType
	Lowlimit            *LowlimitType
	Uplimit             *UplimitType
	Bvar                *BvarType
	Degree              *DegreeType
	Logbase             *LogbaseType
	Momentabout         *MomentaboutType
	Domainofapplication *DomainofapplicationType
	Inverse             *InverseType
	Ident               *IdentType
	Domain              *DomainType
	Codomain            *CodomainType
	Image               *ImageType
	Abs                 *AbsType
	Conjugate           *ConjugateType
	Exp                 *ExpType
	Factorial           *FactorialType
	Arg                 *ArgType
	Real                *RealType
	Imaginary           *ImaginaryType
	Floor               *FloorType
	Ceiling             *CeilingType
	Not                 *NotType
	Ln                  *LnType
	Sin                 *SinType
	Cos                 *CosType
	Tan                 *TanType
	Sec                 *SecType
	Csc                 *CscType
	Cot                 *CotType
	Sinh                *SinhType
	Cosh                *CoshType
	Tanh                *TanhType
	Sech                *SechType
	Csch                *CschType
	Coth                *CothType
	Arcsin              *ArcsinType
	Arccos              *ArccosType
	Arctan              *ArctanType
	Arccosh             *ArccoshType
	Arccot              *ArccotType
	Arccoth             *ArccothType
	Arccsc              *ArccscType
	Arccsch             *ArccschType
	Arcsec              *ArcsecType
	Arcsech             *ArcsechType
	Arcsinh             *ArcsinhType
	Arctanh             *ArctanhType
	Determinant         *DeterminantType
	Transpose           *TransposeType
	Card                *CardType
	Quotient            *QuotientType
	Divide              *DivideType
	Power               *PowerType
	Rem                 *RemType
	Implies             *ImpliesType
	Vectorproduct       *VectorproductType
	Scalarproduct       *ScalarproductType
	Outerproduct        *OuterproductType
	Setdiff             *SetdiffType
	Fn                  *FnType
	Compose             *ComposeType
	Plus                *PlusType
	Times               *TimesType
	Max                 *MaxType
	Min                 *MinType
	Gcd                 *GcdType
	Lcm                 *LcmType
	And                 *AndType
	Or                  *OrType
	Xor                 *XorType
	Union               *UnionType
	Intersect           *IntersectType
	Cartesianproduct    *CartesianproductType
	Mean                *MeanType
	Sdev                *SdevType
	Variance            *VarianceType
	Median              *MedianType
	Mode                *ModeType
	Selector            *SelectorType
	Root                *RootType
	Minus               *MinusType
	Log                 *LogType
	Int                 *IntType
	Diff                *DiffType
	Partialdiff         *PartialdiffType
	Divergence          *DivergenceType
	Grad                *GradType
	Curl                *CurlType
	Laplacian           *LaplacianType
	Sum                 *SumType
	Product             *ProductType
	Limit               *LimitType
	Moment              *MomentType
	Exists              *ExistsType
	Forall              *ForallType
	Neq                 *NeqType
	Factorof            *FactorofType
	In                  *InType
	Notin               *NotinType
	Notsubset           *NotsubsetType
	Notprsubset         *NotprsubsetType
	Tendsto             *TendstoType
	Eq                  *EqType
	Leq                 *LeqType
	Lt                  *LtType
	Geq                 *GeqType
	Gt                  *GtType
	Equivalent          *EquivalentType
	Approx              *ApproxType
	Subset              *SubsetType
	Prsubset            *PrsubsetType
	Mi                  *MiType
	Mn                  *MnType
	Mo                  *MoType
	Mtext               *Mstring
	Ms                  *MsType
	Mspace              *MspaceType
	Mrow                *MrowType
	Mfrac               *MfracType
	Msqrt               *MsqrtType
	Mroot               *MrootType
	Menclose            *MencloseType
	Mstyle              *MstyleType
	Merror              *MerrorType
	Mpadded             *MpaddedType
	Mphantom            *MphantomType
	Mfenced             *MfencedType
	Msub                *MsubType
	Msup                *MsupType
	Msubsup             *MsubsupType
	Munder              *MunderType
	Mover               *MoverType
	Munderover          *MunderoverType
	Mmultiscripts       *MmultiscriptsType
	Mtable              *MtableType
	Mtr                 *MtrType
	Mlabeledtr          *MlabeledtrType
	Mtd                 *MtdType
	Maligngroup         *MaligngroupType
	Malignmark          *MalignmarkType
	Maction             *MactionType
}

// MtdPresExpression ...
type MtdPresExpression struct {
	XMLName        xml.Name `json:"-" xml:"mtdPresExpression"`
	Mi             *MiType
	Mn             *MnType
	Mo             *MoType
	Mtext          *Mstring
	Ms             *MsType
	Mspace         *MspaceType
	Mprescripts    *MprescriptsType
	None           *NoneType
	Mrow           *MrowType
	Mfrac          *MfracType
	Msqrt          *MsqrtType
	Mroot          *MrootType
	Menclose       *MencloseType
	Mstyle         *MstyleType
	Merror         *MerrorType
	Mpadded        *MpaddedType
	Mphantom       *MphantomType
	Mfenced        *MfencedType
	Msub           *MsubType
	Msup           *MsupType
	Msubsup        *MsubsupType
	Munder         *MunderType
	Mover          *MoverType
	Munderover     *MunderoverType
	Mmultiscripts  *MmultiscriptsType
	Mtable         *MtableType
	Mtr            *MtrType
	Mlabeledtr     *MlabeledtrType
	Mtd            *MtdType
	Maligngroup    *MaligngroupType
	Malignmark     *MalignmarkType
	Maction        *MactionType
	Ci             *CiType
	Csymbol        *CsymbolType
	Cn             *CnType
	Integers       *IntegersType
	Reals          *RealsType
	Rationals      *RationalsType
	Naturalnumbers *NaturalnumbersType
	Complexes      *ComplexesType
	Primes         *PrimesType
	Exponentiale   *ExponentialeType
	Imaginaryi     *ImaginaryiType
	Notanumber     *NotanumberType
	True           *TrueType
	False          *FalseType
	Emptyset       *EmptysetType
	Pi             *PiType
	Eulergamma     *EulergammaType
	Infinity       *InfinityType
	Apply          *ApplyType
	Fn             *FnType
	Lambda         *LambdaType
	Reln           *RelnType
	Interval       *IntervalType
	List           *ListType
	Matrix         *MatrixType
	Matrixrow      *MatrixrowType
	Set            *SetType
	Vector         *VectorType
	Piecewise      *PiecewiseType
	Semantics      *SemanticsType
	Declare        *DeclareType
}

// MtrPresExpression ...
type MtrPresExpression struct {
	XMLName        xml.Name `json:"-" xml:"mtrPresExpression"`
	Mi             *MiType
	Mn             *MnType
	Mo             *MoType
	Mtext          *Mstring
	Ms             *MsType
	Mspace         *MspaceType
	Mprescripts    *MprescriptsType
	None           *NoneType
	Mrow           *MrowType
	Mfrac          *MfracType
	Msqrt          *MsqrtType
	Mroot          *MrootType
	Menclose       *MencloseType
	Mstyle         *MstyleType
	Merror         *MerrorType
	Mpadded        *MpaddedType
	Mphantom       *MphantomType
	Mfenced        *MfencedType
	Msub           *MsubType
	Msup           *MsupType
	Msubsup        *MsubsupType
	Munder         *MunderType
	Mover          *MoverType
	Munderover     *MunderoverType
	Mmultiscripts  *MmultiscriptsType
	Mtable         *MtableType
	Mtr            *MtrType
	Mlabeledtr     *MlabeledtrType
	Mtd            *MtdType
	Maligngroup    *MaligngroupType
	Malignmark     *MalignmarkType
	Maction        *MactionType
	Ci             *CiType
	Csymbol        *CsymbolType
	Cn             *CnType
	Integers       *IntegersType
	Reals          *RealsType
	Rationals      *RationalsType
	Naturalnumbers *NaturalnumbersType
	Complexes      *ComplexesType
	Primes         *PrimesType
	Exponentiale   *ExponentialeType
	Imaginaryi     *ImaginaryiType
	Notanumber     *NotanumberType
	True           *TrueType
	False          *FalseType
	Emptyset       *EmptysetType
	Pi             *PiType
	Eulergamma     *EulergammaType
	Infinity       *InfinityType
	Apply          *ApplyType
	Fn             *FnType
	Lambda         *LambdaType
	Reln           *RelnType
	Interval       *IntervalType
	List           *ListType
	Matrix         *MatrixType
	Matrixrow      *MatrixrowType
	Set            *SetType
	Vector         *VectorType
	Piecewise      *PiecewiseType
	Semantics      *SemanticsType
	Declare        *DeclareType
}

// PrscrPresExpression ...
type PrscrPresExpression struct {
	XMLName        xml.Name `json:"-" xml:"prscrPresExpression"`
	Mi             *MiType
	Mn             *MnType
	Mo             *MoType
	Mtext          *Mstring
	Ms             *MsType
	Mspace         *MspaceType
	Mprescripts    *MprescriptsType
	None           *NoneType
	Mrow           *MrowType
	Mfrac          *MfracType
	Msqrt          *MsqrtType
	Mroot          *MrootType
	Menclose       *MencloseType
	Mstyle         *MstyleType
	Merror         *MerrorType
	Mpadded        *MpaddedType
	Mphantom       *MphantomType
	Mfenced        *MfencedType
	Msub           *MsubType
	Msup           *MsupType
	Msubsup        *MsubsupType
	Munder         *MunderType
	Mover          *MoverType
	Munderover     *MunderoverType
	Mmultiscripts  *MmultiscriptsType
	Mtable         *MtableType
	Mtr            *MtrType
	Mlabeledtr     *MlabeledtrType
	Mtd            *MtdType
	Maligngroup    *MaligngroupType
	Malignmark     *MalignmarkType
	Maction        *MactionType
	Ci             *CiType
	Csymbol        *CsymbolType
	Cn             *CnType
	Integers       *IntegersType
	Reals          *RealsType
	Rationals      *RationalsType
	Naturalnumbers *NaturalnumbersType
	Complexes      *ComplexesType
	Primes         *PrimesType
	Exponentiale   *ExponentialeType
	Imaginaryi     *ImaginaryiType
	Notanumber     *NotanumberType
	True           *TrueType
	False          *FalseType
	Emptyset       *EmptysetType
	Pi             *PiType
	Eulergamma     *EulergammaType
	Infinity       *InfinityType
	Apply          *ApplyType
	Fn             *FnType
	Lambda         *LambdaType
	Reln           *RelnType
	Interval       *IntervalType
	List           *ListType
	Matrix         *MatrixType
	Matrixrow      *MatrixrowType
	Set            *SetType
	Vector         *VectorType
	Piecewise      *PiecewiseType
	Semantics      *SemanticsType
	Declare        *DeclareType
}

// ThreePresExpression ...
type ThreePresExpression struct {
	XMLName        xml.Name `json:"-" xml:"threePresExpression"`
	Mi             *MiType
	Mn             *MnType
	Mo             *MoType
	Mtext          *Mstring
	Ms             *MsType
	Mspace         *MspaceType
	Mprescripts    *MprescriptsType
	None           *NoneType
	Mrow           *MrowType
	Mfrac          *MfracType
	Msqrt          *MsqrtType
	Mroot          *MrootType
	Menclose       *MencloseType
	Mstyle         *MstyleType
	Merror         *MerrorType
	Mpadded        *MpaddedType
	Mphantom       *MphantomType
	Mfenced        *MfencedType
	Msub           *MsubType
	Msup           *MsupType
	Msubsup        *MsubsupType
	Munder         *MunderType
	Mover          *MoverType
	Munderover     *MunderoverType
	Mmultiscripts  *MmultiscriptsType
	Mtable         *MtableType
	Mtr            *MtrType
	Mlabeledtr     *MlabeledtrType
	Mtd            *MtdType
	Maligngroup    *MaligngroupType
	Malignmark     *MalignmarkType
	Maction        *MactionType
	Ci             *CiType
	Csymbol        *CsymbolType
	Cn             *CnType
	Integers       *IntegersType
	Reals          *RealsType
	Rationals      *RationalsType
	Naturalnumbers *NaturalnumbersType
	Complexes      *ComplexesType
	Primes         *PrimesType
	Exponentiale   *ExponentialeType
	Imaginaryi     *ImaginaryiType
	Notanumber     *NotanumberType
	True           *TrueType
	False          *FalseType
	Emptyset       *EmptysetType
	Pi             *PiType
	Eulergamma     *EulergammaType
	Infinity       *InfinityType
	Apply          *ApplyType
	Fn             *FnType
	Lambda         *LambdaType
	Reln           *RelnType
	Interval       *IntervalType
	List           *ListType
	Matrix         *MatrixType
	Matrixrow      *MatrixrowType
	Set            *SetType
	Vector         *VectorType
	Piecewise      *PiecewiseType
	Semantics      *SemanticsType
	Declare        *DeclareType
}

// TwoPresExpression ...
type TwoPresExpression struct {
	XMLName        xml.Name `json:"-" xml:"twoPresExpression"`
	Mi             *MiType
	Mn             *MnType
	Mo             *MoType
	Mtext          *Mstring
	Ms             *MsType
	Mspace         *MspaceType
	Mprescripts    *MprescriptsType
	None           *NoneType
	Mrow           *MrowType
	Mfrac          *MfracType
	Msqrt          *MsqrtType
	Mroot          *MrootType
	Menclose       *MencloseType
	Mstyle         *MstyleType
	Merror         *MerrorType
	Mpadded        *MpaddedType
	Mphantom       *MphantomType
	Mfenced        *MfencedType
	Msub           *MsubType
	Msup           *MsupType
	Msubsup        *MsubsupType
	Munder         *MunderType
	Mover          *MoverType
	Munderover     *MunderoverType
	Mmultiscripts  *MmultiscriptsType
	Mtable         *MtableType
	Mtr            *MtrType
	Mlabeledtr     *MlabeledtrType
	Mtd            *MtdType
	Maligngroup    *MaligngroupType
	Malignmark     *MalignmarkType
	Maction        *MactionType
	Ci             *CiType
	Csymbol        *CsymbolType
	Cn             *CnType
	Integers       *IntegersType
	Reals          *RealsType
	Rationals      *RationalsType
	Naturalnumbers *NaturalnumbersType
	Complexes      *ComplexesType
	Primes         *PrimesType
	Exponentiale   *ExponentialeType
	Imaginaryi     *ImaginaryiType
	Notanumber     *NotanumberType
	True           *TrueType
	False          *FalseType
	Emptyset       *EmptysetType
	Pi             *PiType
	Eulergamma     *EulergammaType
	Infinity       *InfinityType
	Apply          *ApplyType
	Fn             *FnType
	Lambda         *LambdaType
	Reln           *RelnType
	Interval       *IntervalType
	List           *ListType
	Matrix         *MatrixType
	Matrixrow      *MatrixrowType
	Set            *SetType
	Vector         *VectorType
	Piecewise      *PiecewiseType
	Semantics      *SemanticsType
	Declare        *DeclareType
}

// PresExpression ...
type PresExpression struct {
	Mi             *MiType
	Mn             *MnType
	Mo             *MoType
	Mtext          *Mstring
	Ms             *MsType
	Mspace         *MspaceType
	Mprescripts    *MprescriptsType
	None           *NoneType
	Mrow           *MrowType
	Mfrac          *MfracType
	Msqrt          *MsqrtType
	Mroot          *MrootType
	Menclose       *MencloseType
	Mstyle         *MstyleType
	Merror         *MerrorType
	Mpadded        *MpaddedType
	Mphantom       *MphantomType
	Mfenced        *MfencedType
	Msub           *MsubType
	Msup           *MsupType
	Msubsup        *MsubsupType
	Munder         *MunderType
	Mover          *MoverType
	Munderover     *MunderoverType
	Mmultiscripts  *MmultiscriptsType
	Mtable         *MtableType
	Mtr            *MtrType
	Mlabeledtr     *MlabeledtrType
	Mtd            *MtdType
	Maligngroup    *MaligngroupType
	Malignmark     *MalignmarkType
	Maction        *MactionType
	Ci             *CiType
	Csymbol        *CsymbolType
	Cn             *CnType
	Integers       *IntegersType
	Reals          *RealsType
	Rationals      *RationalsType
	Naturalnumbers *NaturalnumbersType
	Complexes      *ComplexesType
	Primes         *PrimesType
	Exponentiale   *ExponentialeType
	Imaginaryi     *ImaginaryiType
	Notanumber     *NotanumberType
	True           *TrueType
	False          *FalseType
	Emptyset       *EmptysetType
	Pi             *PiType
	Eulergamma     *EulergammaType
	Infinity       *InfinityType
	Apply          *ApplyType
	Fn             *FnType
	Lambda         *LambdaType
	Reln           *RelnType
	Interval       *IntervalType
	List           *ListType
	Matrix         *MatrixType
	Matrixrow      *MatrixrowType
	Set            *SetType
	Vector         *VectorType
	Piecewise      *PiecewiseType
	Semantics      *SemanticsType
	Declare        *DeclareType
}

// MathExpression ...
type MathExpression struct {
	Mi             *MiType
	Mn             *MnType
	Mo             *MoType
	Mtext          *Mstring
	Ms             *MsType
	Mspace         *MspaceType
	Mrow           *MrowType
	Mfrac          *MfracType
	Msqrt          *MsqrtType
	Mroot          *MrootType
	Menclose       *MencloseType
	Mstyle         *MstyleType
	Merror         *MerrorType
	Mpadded        *MpaddedType
	Mphantom       *MphantomType
	Mfenced        *MfencedType
	Msub           *MsubType
	Msup           *MsupType
	Msubsup        *MsubsupType
	Munder         *MunderType
	Mover          *MoverType
	Munderover     *MunderoverType
	Mmultiscripts  *MmultiscriptsType
	Mtable         *MtableType
	Mtr            *MtrType
	Mlabeledtr     *MlabeledtrType
	Mtd            *MtdType
	Maligngroup    *MaligngroupType
	Malignmark     *MalignmarkType
	Maction        *MactionType
	Ci             *CiType
	Csymbol        *CsymbolType
	Cn             *CnType
	Integers       *IntegersType
	Reals          *RealsType
	Rationals      *RationalsType
	Naturalnumbers *NaturalnumbersType
	Complexes      *ComplexesType
	Primes         *PrimesType
	Exponentiale   *ExponentialeType
	Imaginaryi     *ImaginaryiType
	Notanumber     *NotanumberType
	True           *TrueType
	False          *FalseType
	Emptyset       *EmptysetType
	Pi             *PiType
	Eulergamma     *EulergammaType
	Infinity       *InfinityType
	Apply          *ApplyType
	Fn             *FnType
	Lambda         *LambdaType
	Reln           *RelnType
	Interval       *IntervalType
	List           *ListType
	Matrix         *MatrixType
	Matrixrow      *MatrixrowType
	Set            *SetType
	Vector         *VectorType
	Piecewise      *PiecewiseType
	Semantics      *SemanticsType
	Declare        *DeclareType
}

// Math ...
type Math *MathType

// TermType ...
type TermType struct {
	XMLName xml.Name `json:"-" xml:"term"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Term is Identifies the period of time during which the depository must be able to furnish
//
//	samples of the biological material.
type Term *TermType

// BioaccnoType ...
type BioaccnoType struct {
	XMLName xml.Name `json:"-" xml:"bio-accno"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Bioaccno is Biological accession number:
//
//	(ST.32:B831)
//	The identification assigned to the biological material by the depository
type Bioaccno *BioaccnoType

// DepositaryType ...
type DepositaryType struct {
	XMLName xml.Name       `json:"-" xml:"depositary"`
	Address []*AddressType `json:",omitempty" xml:"address"`
}

// Depositary is Information regarding the facility storing the biological deposit.
//
//	(ST.32:B832)
type Depositary *DepositaryType

// OthercitType ...
type OthercitType struct {
	XMLName xml.Name   `json:"-" xml:"othercit"`
	B       []*BType   `json:",omitempty" xml:"b"`
	I       []*IType   `json:",omitempty" xml:"i"`
	U       []*UType   `json:",omitempty" xml:"u"`
	Sup     []*SupType `json:",omitempty" xml:"sup"`
	Sub     []*SubType `json:",omitempty" xml:"sub"`
}

// Othercit is *******************************
//
//	OTHER CITATIONS
//	*******************************
//	Other citations - free form
type Othercit *OthercitType

// OnlineType ...
type OnlineType struct {
	XMLName     xml.Name           `json:"-" xml:"online"`
	Text        *string            `json:",omitempty" xml:"text"`
	Author      []*AuthorType      `json:",omitempty" xml:"author"`
	Onlinetitle []*OnlinetitleType `json:",omitempty" xml:"online-title"`
	Hosttitle   *HosttitleType     `json:",omitempty" xml:"hosttitle"`
	Subname     []*SubnameType     `json:",omitempty" xml:"subname"`
	Edition     *EditionType       `json:",omitempty" xml:"edition"`
	Serial      *SerialType        `json:",omitempty" xml:"serial"`
	Book        *BookType          `json:",omitempty" xml:"book"`
	Imprint     *ImprintType       `json:",omitempty" xml:"imprint"`
	Pubdate     *PubdateType       `json:",omitempty" xml:"pubdate"`
	Vid         *VidType           `json:",omitempty" xml:"vid"`
	Ino         *InoType           `json:",omitempty" xml:"ino"`
	History     *HistoryType       `json:",omitempty" xml:"history"`
	Series      *SeriesType        `json:",omitempty" xml:"series"`
	Hostno      *HostnoType        `json:",omitempty" xml:"hostno"`
	Absno       *AbsnoType         `json:",omitempty" xml:"absno"`
	Location    *LocationType      `json:",omitempty" xml:"location"`
	Notes       *NotesType         `json:",omitempty" xml:"notes"`
	Avail       []*AvailType       `json:",omitempty" xml:"avail"`
	Class       []*ClassType       `json:",omitempty" xml:"class"`
	Keyword     []*KeywordType     `json:",omitempty" xml:"keyword"`
	Cpyrt       *CpyrtType         `json:",omitempty" xml:"cpyrt"`
	Doi         *DoiType           `json:",omitempty" xml:"doi"`
	Issn        *IssnType          `json:",omitempty" xml:"issn"`
	Isbn        *IsbnType          `json:",omitempty" xml:"isbn"`
	Datecit     *DatecitType       `json:",omitempty" xml:"datecit"`
	Srchterm    []*SrchtermType    `json:",omitempty" xml:"srchterm"`
	Srchdate    *SrchdateType      `json:",omitempty" xml:"srchdate"`
	Refno       []*RefnoType       `json:",omitempty" xml:"refno"`
}

// Online is *******************************
//
//	ONLINE CITATION
//	*******************************
//
//	Online citations
//	Revised according to ISO-690-2 - Electronic documents and parts thereof.
//	Please refer to this standard for definitions and examples.
//	See: http://www.nlc-bnc.ca/iso/tc46sc9/standard/690-2e.htm#Contents
//
//	The tagging in fact is a mixture of article and book tags together with
//	specific electronic source tags.
//	'online' is taken to mean ANY kind of electronic documentation:
//	databases, internet, CD-Roms, DVD, email, etc
//
//	EXAMPLES:;
//
//	* Complete monograph
//	Kirk-Othmer Encyclopedia of Chemical Technology [online].
//	3rd ed. New York : John Wiley, 1984 [cited 3 January 1990].
//	Available from: DIALOG Information Services, Palo Alto (Calif.).
//
//	<nplcit id='ncit0001' num='0001' type="e" medium='online'>
//	<online>
//	<online-title>Kirk-Othmer Encyclopedia of Chemical Technology
//	</online-title>
//	<edition>3rd ed.</edition>
//	<imprint>
//	<address>
//	<text>New York</text>
//	</address>
//	<name>John Wiley</name>
//	<pubdate>19840000</pubdate>
//	</imprint>
//	<avail>DIALOG Information Services, Palo Alto (Calif.).</avail>
//	<datecit>
//	<date>19900103</date>
//	</datecit>
//	</online>
//	</nplcit>
//
//	* Article on the Internet:
//	Clark, Carol. On the Threshold of a Brave New World.
//	In Blueprint of the Body [online].
//	CNN.com, 2000. [cited 24 August 2000;10:25 EST]. In-depth specials.
//	Available from: [http://www.cnn.com/SPECIALS/2000/genome/story/overview/]
//
//	<nplcit id='ncit0002' num='0002' type='e' medium='online'>
//	<online>
//	<author>
//	<name>Clark, Carol</name>
//	</author>
//	<online-title>On the Threshold of a Brave New World</online-title>
//	<imprint>
//	<name>CNN.com, </name>
//	<pubdate>2000</pubdate>
//	</imprint>
//	<series>
//	<text>In-depth specials</text>
//	</series>
//	<avail>Available from: [http://www.cnn.com/SPECIALS/2000/genome/story/overview/]</avail>
//	<datecit>
//	<date>[cited 24 August 2000;10:25 EST]</date>
//	</datecit>
//	</online>
//	</nplcit>
//
//	* Personal communication (e-mail)
//
//	Thacker, Jane. MPEG-21 project stream on digital item identification
//	[online].
//	Message to: [iso.tc46.sc9@nlc-bnc.ca]. 3 October 2000; 13:33 EST [cited 6
//	October 2000; 13:10 EST].
//	Message-ID: [002f01c02d60$051a64a0$22a2580c@vaio]. Personal communication.
//
//	<nplcit id='ncit0003' num='0003' type='e' medium='online'>
//	<online>
//	<author>
//	<name>Thacker, Jane</name>
//	</author>
//	<online-title>MPEG-21 project stream on digital item identification
//	</online-title>
//	<subname>
//	<name>Message to: <iso.tc46.sc9@nlc-bnc.ca></name>
//	</subname>
//	<pubdate>3 October 2000; 13:33 EST</pubdate>
//	<notes>Personal communication</notes>
//	<avail>Message-ID: <002f01c02d60$051a64a0$22a2580c@vaio></avail>
//	<datecit><date>6 October 2000; 13:10 EST</date></datecit>
//	</online>
//	</nplcit>
//
//	Note: not covered in current version of PatXML
type Online *OnlineType

// SrchdateType ...
type SrchdateType struct {
	XMLName xml.Name `json:"-" xml:"srchdate"`
	Date    int      `json:",omitempty" xml:"date"`
}

// Srchdate is Date of search/retrieval YYYYMMDD
type Srchdate *SrchdateType

// Srchterm is Search terms
type Srchterm *SrchtermType

// SrchtermType ...
type SrchtermType struct {
	XMLName xml.Name `json:"-" xml:"srchterm"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// DatecitType ...
type DatecitType struct {
	XMLName xml.Name `json:"-" xml:"datecit"`
	Date    int      `json:",omitempty" xml:"date"`
}

// Datecit is Date cited - date on which the citation was cited.
//
//	May be different from srchdate below
type Datecit *DatecitType

// AvailType ...
type AvailType struct {
	XMLName xml.Name `json:"-" xml:"avail"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Avail is Availability and access - REQUIRED use for URL, online database, ftp address,
//
//	email, etc.;
//	Examples:
//	- Available from Internet: http://www.epoline.org
//	- Available from DIALOG Information Systems, Palo Alto (Calif.)
//	- Available from: <http://www.ejb.org/content/vol2/issue3/full/3/index.html>.
//	- Available from Bell and Howell Information and Learning via e-mail to:
//	<umi@ppp.nasionet.net>.
type Avail *AvailType

// HostnoType ...
type HostnoType struct {
	XMLName xml.Name `json:"-" xml:"hostno"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Hostno is Numeration within host document
type Hostno *HostnoType

// HistoryType ...
type HistoryType struct {
	XMLName  xml.Name      `json:"-" xml:"history"`
	Text     *string       `json:",omitempty" xml:"text"`
	Received *ReceivedType `json:",omitempty" xml:"received"`
	Accepted *AcceptedType `json:",omitempty" xml:"accepted"`
	Revised  *RevisedType  `json:",omitempty" xml:"revised"`
	Misc     *MiscType     `json:",omitempty" xml:"misc"`
}

// History is History of the article (not serial)
type History *HistoryType

// MiscType ...
type MiscType struct {
	XMLName xml.Name `json:"-" xml:"misc"`
	Date    []int    `json:",omitempty" xml:"date"`
}

// Misc is Miscellaneous information relating to the history of the article; see ISO 12083
type Misc *MiscType

// RevisedType ...
type RevisedType struct {
	XMLName xml.Name `json:"-" xml:"revised"`
	Date    int      `json:",omitempty" xml:"date"`
}

// Revised is Date article was revised
type Revised *RevisedType

// Accepted is Date article was accepted
type Accepted *AcceptedType

// AcceptedType ...
type AcceptedType struct {
	XMLName xml.Name `json:"-" xml:"accepted"`
	Date    int      `json:",omitempty" xml:"date"`
}

// ReceivedType ...
type ReceivedType struct {
	XMLName xml.Name `json:"-" xml:"received"`
	Date    int      `json:",omitempty" xml:"date"`
}

// Received is Date article was received
type Received *ReceivedType

// HosttitleType ...
type HosttitleType struct {
	XMLName xml.Name `json:"-" xml:"hosttitle"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Hosttitle is Title of the host document/database
type Hosttitle *HosttitleType

// OnlinetitleType ...
type OnlinetitleType struct {
	XMLName xml.Name `json:"-" xml:"online-title"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Onlinetitle is The title within the electronic resource,
//
//	equal to <atl> and <book-title>
type Onlinetitle *OnlinetitleType

// ArticleType ...
type ArticleType struct {
	XMLName  xml.Name       `json:"-" xml:"article"`
	Text     *string        `json:",omitempty" xml:"text"`
	Author   []*AuthorType  `json:",omitempty" xml:"author"`
	Atl      *AtlType       `json:",omitempty" xml:"atl"`
	Subname  []*SubnameType `json:",omitempty" xml:"subname"`
	Serial   *SerialType    `json:",omitempty" xml:"serial"`
	Book     *BookType      `json:",omitempty" xml:"book"`
	Absno    *AbsnoType     `json:",omitempty" xml:"absno"`
	Location *LocationType  `json:",omitempty" xml:"location"`
	Class    []*ClassType   `json:",omitempty" xml:"class"`
	Keyword  []*KeywordType `json:",omitempty" xml:"keyword"`
	Cpyrt    *CpyrtType     `json:",omitempty" xml:"cpyrt"`
	Artid    *ArtidType     `json:",omitempty" xml:"artid"`
	Srchdate *SrchdateType  `json:",omitempty" xml:"srchdate"`
	Refno    []*RefnoType   `json:",omitempty" xml:"refno"`
}

// Article is *******************************
//
//	ARTICLE CITATION
//	*******************************
//
//	Article citations within a 'host' document
//
//	After patent citations the most common citations are articles within serials
//	(periodicals, magazines), books and electronic (eg. internet) sources).
//	This is a very complex and varied area to standardise. The tag set below is drawn
//	from a number of sources as is the order of the tags (which in any case can be
//	changed depending on the stylesheet used).
//
//	EPO and PatXML usage:
//
//	id="ncit0001" or id="sr-ncit0001"
//	num="0001"
//	npl-type="s"
//
//	The order of tags is (generally) that of WIPO ST.14 / ISO 690 layout:
//
//	Examples:
//
//	DROP, J.G. Integrated Circuit Personalization at the Module Level. IBM tech. dis. bull.
//	October 1974, Vol.17, No.5, pages 1344 and 1345, ISSN 2345-6789.
//	[XPnnnnnnnnnnn].
//
//	As a *Search Report* citation the markup is:
//
//	<citation>
//	<nplcit id='ncit0012' num='0012' npl-type='s' file='XP1234456'>
//	<article>
//	<author>
//	<name>DROP, J.G.</name>
//	</author>
//	<atl>Integrated Circuit Personalization at the Module Level</atl>
//	<serial>
//	<sertitle>IBM Tech. Dis. Bull.</sertitle>
//	<pubdate>October 1974</pubdate>
//	<vid>17</vid>
//	<ino>5</ino>
//	<issn>2345-6789</issn>
//	</serial>
//	<refno id='XP1'>XP1234456</refno>
//	</article>
//	<rel-passage>
//	<passage>p. 1344 and 1345</passage>
//	</rel-passage>
//	</nplcit>
//	</citation>
//
//	Outside the SR it would be (after </serial>):
//	<location>
//	<pp>p. 1344 and 1345</pp>
//	</location>
//
//	BIOLOGICAL ABSTRACTS, vol. 1, 1996 Philadelphia, PA, US; abstract no. 193987,
//	SEVENIER, ROBERT ET AL: "Ethylene production and involvement during the first
//	steps of durum wheat (Triticum durum) anther culture." XP002133847
//
//	<citation>
//	<nplcit id="sr-ncit0001" num="0001" npl-type"i">
//	<article>
//	<author><name>SEVENIER, ROBERT ET AL</name><author>
//	<atl>"Ethylene production and involvement during the first
//	steps of durum wheat (Triticum durum) anther culture."</atl>
//	<serial>
//	<sertitle>BIOLOGICAL ABSTRACTS</sertitle>
//	<imprint><text>Philadelphia, PA, US</text></imprint>
//	<pubdate>1996</pubdate>
//	<vid>vol. 1</vid>
//	</serial>
//	<absno>abstract no. 193987</absno>
//	<refno>XP002133847</refno>
//	</article>
//	</nplcit>
//	</citation>
//
//	Note: it is NOT expected that the applicant will create the tagged data
//	- it can be generated from a 'pull down' data entry form (eg. in Word) or
//	generated from internal SR databases or use PatXML.
//
//	In the EPO for the SR we extract from SDMS. .
type Article *ArticleType

// ArtidType ...
type ArtidType struct {
	XMLName xml.Name `json:"-" xml:"artid"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Artid is Article unique ID - assigned by a eg. publisher to an article
type Artid *ArtidType

// BookType ...
type BookType struct {
	XMLName    xml.Name         `json:"-" xml:"book"`
	Text       *string          `json:",omitempty" xml:"text"`
	Author     []*AuthorType    `json:",omitempty" xml:"author"`
	Booktitle  []*BooktitleType `json:",omitempty" xml:"book-title"`
	Conference *ConferenceType  `json:",omitempty" xml:"conference"`
	Subtitle   *SubtitleType    `json:",omitempty" xml:"subtitle"`
	Subname    []*SubnameType   `json:",omitempty" xml:"subname"`
	Edition    *EditionType     `json:",omitempty" xml:"edition"`
	Imprint    *ImprintType     `json:",omitempty" xml:"imprint"`
	Vid        *VidType         `json:",omitempty" xml:"vid"`
	Ino        *InoType         `json:",omitempty" xml:"ino"`
	Descrip    *DescripType     `json:",omitempty" xml:"descrip"`
	Series     *SeriesType      `json:",omitempty" xml:"series"`
	Notes      *NotesType       `json:",omitempty" xml:"notes"`
	Absno      *AbsnoType       `json:",omitempty" xml:"absno"`
	Location   []*LocationType  `json:",omitempty" xml:"location"`
	Pubid      *PubidType       `json:",omitempty" xml:"pubid"`
	Bookno     *BooknoType      `json:",omitempty" xml:"bookno"`
	Class      []*ClassType     `json:",omitempty" xml:"class"`
	Keyword    []*KeywordType   `json:",omitempty" xml:"keyword"`
	Cpyrt      *CpyrtType       `json:",omitempty" xml:"cpyrt"`
	Doi        *DoiType         `json:",omitempty" xml:"doi"`
	Issn       []*IssnType      `json:",omitempty" xml:"issn"`
	Isbn       []*IsbnType      `json:",omitempty" xml:"isbn"`
	Refno      []*RefnoType     `json:",omitempty" xml:"refno"`
}

// Book is *******************************
//
//	BOOK (MONOGRAPH) CITATION
//	*******************************
//
//	Non-serial bibliographic item, i.e. an item either complete in
//	one part or complete (or intended to be completed) in a
//	finite number of separate parts. [ISO 690:1987]
//
//	As mentioned the style and manner of actual display/printing varies greatly
//	(even between standards!). Generally in the order specified by
//	WIPO ST.14 and ISO 690 and AACR2 rules for layout
//
//	EPO and PatXML usage:
//
//	id="ncit0001"
//	num="0001"
//	npl-type="b"
//
//	Example:
//
//	(citation from ST.14).
//
//	WALTON, Herrmann. Microwave Quantum Theory.
//	London: Sweet and Maxwell, 1973, Vol.2,
//	ISBN 5-1234-5678-9,
//	pages 138 to 192, especially pages 146 to 148.
//
//	As a *Search Report* citation the markup is:
//
//	<srep-citations>
//	<citation>
//	<nplcit id='ncit0013' num='0013' type='b'>
//	<book>
//	<author>
//	<name>WALTON, Herrman</name>
//	</author>
//	<book-title>Microwave quantum theory</book-title>
//	<imprint>
//	<address>
//	<text>London</text>
//	</address>
//	<name>Sweet and Maxwell</name>
//	<pubdate>1973</pubdate>
//	</imprint>
//	<vid>Vol. 2</vid>
//	<isbn>ISBN 5-1234-5678-9</isbn>
//	</book>
//	</nplcit>
//	<rel-passage>pages 138 to 192, especially pages 146 to 148</rel-passage>
//	</citation>
//	</srep-citations>
//
//	In other citations the <rel-passage> would be replaced by the <location> tag
//	after <vid>.
type Book *BookType

// KeywordType ...
type KeywordType struct {
	XMLName xml.Name `json:"-" xml:"keyword"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Keyword is Keyword; e.g., from a Thesaurus or class. scheme
//
//	(ST.32:B550)
type Keyword *KeywordType

// BooknoType ...
type BooknoType struct {
	XMLName xml.Name `json:"-" xml:"bookno"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Bookno is *******************************
//
//	Book number
type Bookno *BooknoType

// LocationType ...
type LocationType struct {
	XMLName xml.Name     `json:"-" xml:"location"`
	Text    *string      `json:",omitempty" xml:"text"`
	Serpart *SerpartType `json:",omitempty" xml:"serpart"`
	Sersect *SersectType `json:",omitempty" xml:"sersect"`
	Chapter *ChapterType `json:",omitempty" xml:"chapter"`
	Pp      *PpType      `json:",omitempty" xml:"pp"`
	Column  *ColumnType  `json:",omitempty" xml:"column"`
	Para    *ParaType    `json:",omitempty" xml:"para"`
	Line    *LineType    `json:",omitempty" xml:"line"`
}

// Location is *******************************
//
//	LOCATION
//	*******************************
//	Location of the reference within the cited work
type Location *LocationType

// LineType ...
type LineType struct {
	XMLName xml.Name     `json:"-" xml:"line"`
	Linef   []*LinefType `json:",omitempty" xml:"linef"`
	Linel   []*LinelType `json:",omitempty" xml:"linel"`
}

// Line is Referenced line within cited work
type Line *LineType

// LinelType ...
type LinelType struct {
	XMLName xml.Name `json:"-" xml:"linel"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Linel is Cited document line last
type Linel *LinelType

// LinefType ...
type LinefType struct {
	XMLName xml.Name `json:"-" xml:"linef"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Linef is Cited document line first
type Linef *LinefType

// ParaType ...
type ParaType struct {
	XMLName xml.Name     `json:"-" xml:"para"`
	Paraf   []*ParafType `json:",omitempty" xml:"paraf"`
	Paral   []*ParalType `json:",omitempty" xml:"paral"`
}

// Para is Referenced paragraph within cited work
type Para *ParaType

// ParalType ...
type ParalType struct {
	XMLName xml.Name `json:"-" xml:"paral"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Paral is Cited paragraph last
type Paral *ParalType

// ParafType ...
type ParafType struct {
	XMLName xml.Name `json:"-" xml:"paraf"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Paraf is Cited paragraph first
type Paraf *ParafType

// ColumnType ...
type ColumnType struct {
	XMLName xml.Name    `json:"-" xml:"column"`
	Colf    []*ColfType `json:",omitempty" xml:"colf"`
	Coll    []*CollType `json:",omitempty" xml:"coll"`
}

// Column is Cited document column numbers
type Column *ColumnType

// CollType ...
type CollType struct {
	XMLName xml.Name `json:"-" xml:"coll"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Coll is Cited document column last
type Coll *CollType

// ColfType ...
type ColfType struct {
	XMLName xml.Name `json:"-" xml:"colf"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Colf is Cited document column first
type Colf *ColfType

// PpType ...
type PpType struct {
	XMLName xml.Name   `json:"-" xml:"pp"`
	Ppf     []*PpfType `json:",omitempty" xml:"ppf"`
	Ppl     []*PplType `json:",omitempty" xml:"ppl"`
}

// Pp is Cited document page numbers
type Pp *PpType

// PplType ...
type PplType struct {
	XMLName xml.Name `json:"-" xml:"ppl"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Ppl is Cited document page last
type Ppl *PplType

// PpfType ...
type PpfType struct {
	XMLName xml.Name `json:"-" xml:"ppf"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Ppf is Cited document page first
type Ppf *PpfType

// ChapterType ...
type ChapterType struct {
	XMLName xml.Name `json:"-" xml:"chapter"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Chapter is Chapter; normally in a book. Example: Chapter 2
type Chapter *ChapterType

// SersectType ...
type SersectType struct {
	XMLName xml.Name `json:"-" xml:"sersect"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Sersect is Serial section or book; or the book section
type Sersect *SersectType

// SerpartType ...
type SerpartType struct {
	XMLName xml.Name `json:"-" xml:"serpart"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Serpart is Part within a serial or book; or the book part
type Serpart *SerpartType

// Absno is Abstract number
type Absno *AbsnoType

// AbsnoType ...
type AbsnoType struct {
	XMLName xml.Name `json:"-" xml:"absno"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// SeriesType ...
type SeriesType struct {
	XMLName xml.Name  `json:"-" xml:"series"`
	Text    *string   `json:",omitempty" xml:"text"`
	Mst     *MstType  `json:",omitempty" xml:"mst"`
	Msn     *MsnType  `json:",omitempty" xml:"msn"`
	Issn    *IssnType `json:",omitempty" xml:"issn"`
}

// Series is *******************************
//
//	SERIES
//	*******************************
//	Series statement
type Series *SeriesType

// MsnType ...
type MsnType struct {
	XMLName xml.Name `json:"-" xml:"msn"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Msn is Monographic series number
type Msn *MsnType

// MstType ...
type MstType struct {
	XMLName xml.Name `json:"-" xml:"mst"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Mst is Monographic series title
type Mst *MstType

// EditionType ...
type EditionType struct {
	XMLName xml.Name `json:"-" xml:"edition"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Edition is Edition statement
//
//	eg. 2nd edition
type Edition *EditionType

// SubtitleType ...
type SubtitleType struct {
	XMLName xml.Name `json:"-" xml:"subtitle"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Subtitle is *******************************
//
//	Book subtitle
type Subtitle *SubtitleType

// ConferenceType ...
type ConferenceType struct {
	XMLName     xml.Name           `json:"-" xml:"conference"`
	Text        *string            `json:",omitempty" xml:"text"`
	Conftitle   *ConftitleType     `json:",omitempty" xml:"conftitle"`
	Date        int                `json:",omitempty" xml:"date"`
	Confdate    *ConfdateType      `json:",omitempty" xml:"confdate"`
	Confno      *ConfnoType        `json:",omitempty" xml:"confno"`
	Confplace   *ConfplaceType     `json:",omitempty" xml:"confplace"`
	Confsponsor []*ConfsponsorType `json:",omitempty" xml:"confsponsor"`
}

// Conference is *******************************
//
//	CONFERENCE CITATION
//	*******************************
//
//	There is no standard way of citing conference proceedings; date of the conf. may
//	come before or after place, for example. The tags are specified in a set order
//	where it is not possible or correct then simply use <text>
//
//	Note: not in current version of PatXML
type Conference *ConferenceType

// ConfdateType ...
type ConfdateType struct {
	XMLName xml.Name `json:"-" xml:"confdate"`
	*RangedateType
}

// RangedateType ...
type RangedateType struct {
	XMLName xml.Name     `json:"-" xml:"rangedate"`
	Sdate   []*SdateType `json:",omitempty" xml:"sdate"`
	Edate   []*EdateType `json:",omitempty" xml:"edate"`
	Time    []*TimeType  `json:",omitempty" xml:"time"`
}

// ConfsponsorType ...
type ConfsponsorType struct {
	XMLName     xml.Name           `json:"-" xml:"confsponsor"`
	Addressbook []*AddressbookType `json:",omitempty" xml:"addressbook"`
}

// Confsponsor is Conference sponsor
type Confsponsor *ConfsponsorType

// ConfplaceType ...
type ConfplaceType struct {
	XMLName xml.Name       `json:"-" xml:"confplace"`
	Address []*AddressType `json:",omitempty" xml:"address"`
}

// Confplace is Conference place
type Confplace *ConfplaceType

// ConfnoType ...
type ConfnoType struct {
	XMLName xml.Name `json:"-" xml:"confno"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Confno is Conference number
type Confno *ConfnoType

// ConftitleType ...
type ConftitleType struct {
	XMLName xml.Name `json:"-" xml:"conftitle"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Conftitle is Conference title
type Conftitle *ConftitleType

// BooktitleType ...
type BooktitleType struct {
	XMLName xml.Name `json:"-" xml:"book-title"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Booktitle is The title of the cited book
type Booktitle *BooktitleType

// SerialType ...
type SerialType struct {
	XMLName   xml.Name       `json:"-" xml:"serial"`
	Newsgroup *NewsgroupType `json:",omitempty" xml:"newsgroup"`
	Sertitle  *SertitleType  `json:",omitempty" xml:"sertitle"`
	Alttitle  *AlttitleType  `json:",omitempty" xml:"alttitle"`
	Subname   []*SubnameType `json:",omitempty" xml:"subname"`
	Issue     *IssueType     `json:",omitempty" xml:"issue"`
	Imprint   *ImprintType   `json:",omitempty" xml:"imprint"`
	Pubdate   *PubdateType   `json:",omitempty" xml:"pubdate"`
	Descrip   *DescripType   `json:",omitempty" xml:"descrip"`
	Notes     *NotesType     `json:",omitempty" xml:"notes"`
	Pubid     *PubidType     `json:",omitempty" xml:"pubid"`
	Vid       *VidType       `json:",omitempty" xml:"vid"`
	Ino       *InoType       `json:",omitempty" xml:"ino"`
	Doi       *DoiType       `json:",omitempty" xml:"doi"`
	Issn      *IssnType      `json:",omitempty" xml:"issn"`
	Isbn      *IsbnType      `json:",omitempty" xml:"isbn"`
	Cpyrt     *CpyrtType     `json:",omitempty" xml:"cpyrt"`
}

// Serial is Serial citation data:
//
//	Serial: Publication, in any medium, issued in successive
//	parts, usually having numeric or chronological designations,
//	and intended to be continued indefinitely. [Adapted from ISO 3297:1986]
//
//	This describes the volume or issue as a whole and not
//	a particular article within it.
type Serial *SerialType

// CpyrtType ...
type CpyrtType struct {
	XMLName xml.Name `json:"-" xml:"cpyrt"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Cpyrt is Copyright info. Copyright of publisher of serial
type Cpyrt *CpyrtType

// IsbnType ...
type IsbnType struct {
	XMLName xml.Name `json:"-" xml:"isbn"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Isbn is International Standard Book Number
type Isbn *IsbnType

// IssnType ...
type IssnType struct {
	XMLName xml.Name `json:"-" xml:"issn"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Issn is International Standard Serial Number
type Issn *IssnType

// InoType ...
type InoType struct {
	XMLName xml.Name `json:"-" xml:"ino"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Ino is Issue number
type Ino *InoType

// DoiType ...
type DoiType struct {
	XMLName xml.Name `json:"-" xml:"doi"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Doi is Digital Object Identifier
type Doi *DoiType

// VidType ...
type VidType struct {
	XMLName xml.Name `json:"-" xml:"vid"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Vid is Volume id/number
type Vid *VidType

// PubidType ...
type PubidType struct {
	XMLName xml.Name `json:"-" xml:"pubid"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Pubid is Publisher's unique id
type Pubid *PubidType

// NotesType ...
type NotesType struct {
	XMLName xml.Name `json:"-" xml:"notes"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Notes is Notes about the serial; e.g. Continues Journal of XYZ 1910-1998, published in
//
//	French and English, etc.
type Notes *NotesType

// DescripType ...
type DescripType struct {
	XMLName xml.Name `json:"-" xml:"descrip"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Descrip is This element is used for the physical description
//
//	of a book or serial; it pagination, size, whether it is illustrated, etc
//	- generally NOT used in citations in patents. Therefore there is no
//	detailed breakdown of the possible lower elements such as physical size.
//
//	Example: xxvi, 233 p.: ill; 27cm
type Descrip *DescripType

// ImprintType ...
type ImprintType struct {
	XMLName xml.Name       `json:"-" xml:"imprint"`
	Text    *string        `json:",omitempty" xml:"text"`
	Address *AddressType   `json:",omitempty" xml:"address"`
	Name    *NameType      `json:",omitempty" xml:"name"`
	Pubdate []*PubdateType `json:",omitempty" xml:"pubdate"`
}

// Imprint is Imprint:
//
//	Publication / creation data
//	Place of publication : publisher, date(s) of publication
//	usually only date of publication is used for journal citations
type Imprint *ImprintType

// PubdateType ...
type PubdateType struct {
	XMLName xml.Name `json:"-" xml:"pubdate"`
	*RangedateType
}

// Pubdate is Publication date used in npl citations,
//
//	may be structured or unstructured
type Pubdate *PubdateType

// TimeType ...
type TimeType struct {
	XMLName xml.Name `json:"-" xml:"time"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Time is Time; format HHMM
type Time *TimeType

// EdateType ...
type EdateType struct {
	XMLName xml.Name `json:"-" xml:"edate"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Edate is End date used in pubdate
type Edate *EdateType

// SdateType ...
type SdateType struct {
	XMLName xml.Name `json:"-" xml:"sdate"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Sdate is Start date used in pubdate
type Sdate *SdateType

// IssueType ...
type IssueType struct {
	XMLName xml.Name `json:"-" xml:"issue"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Issue is Issue designation;
//
//	Examples:
//	- Annual
//	- 1971-
//	- 1890-1972
type Issue *IssueType

// AlttitleType ...
type AlttitleType struct {
	XMLName xml.Name `json:"-" xml:"alttitle"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Alttitle is Alternate title for serial; e.g. BMJ = British Medical Journal
type Alttitle *AlttitleType

// NewsgroupType ...
type NewsgroupType struct {
	XMLName xml.Name `json:"-" xml:"newsgroup"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// SertitleType ...
type SertitleType struct {
	XMLName xml.Name `json:"-" xml:"sertitle"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Sertitle is Serial title; the host document:
//
//	host document: Document containing contributions or separately
//	identifiable component parts that are not physically or
//	bibliographically independent. [ISO 690:1987]
type Sertitle *SertitleType

// AtlType ...
type AtlType struct {
	XMLName xml.Name `json:"-" xml:"atl"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Atl is Article title
type Atl *AtlType

// Dstring ...
type Dstring struct {
	XMLName xml.Name `json:"-" xml:"dtext"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Dtext is Descriptive text
type Dtext *Dstring

// EadType ...
type EadType struct {
	XMLName xml.Name `json:"-" xml:"ead"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Ead is Electronic address use for other than email
type Ead *EadType

// UrlType ...
type UrlType struct {
	XMLName xml.Name `json:"-" xml:"url"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Url is Universal Resource Locator; e.g. www.wipo.int
type Url *UrlType

// EmailType ...
type EmailType struct {
	XMLName xml.Name `json:"-" xml:"email"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Email is Email address
type Email *EmailType

// FaxType ...
type FaxType struct {
	XMLName xml.Name `json:"-" xml:"fax"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Fax is Fax number
type Fax *FaxType

// PhoneType ...
type PhoneType struct {
	XMLName xml.Name `json:"-" xml:"phone"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Phone is Telephone number
type Phone *PhoneType

// Address is Address components:
//
//	Address formats differ from country to country
//	If no structure possible use text
type Address *AddressType

// AddressType ...
type AddressType struct {
	XMLName      xml.Name          `json:"-" xml:"address"`
	Address1     *Address1Type     `json:",omitempty" xml:"address-1"`
	Address2     *Address2Type     `json:",omitempty" xml:"address-2"`
	Address3     *Address3Type     `json:",omitempty" xml:"address-3"`
	Mailcode     *MailcodeType     `json:",omitempty" xml:"mailcode"`
	Pobox        *PoboxType        `json:",omitempty" xml:"pobox"`
	Room         *RoomType         `json:",omitempty" xml:"room"`
	Addressfloor *AddressfloorType `json:",omitempty" xml:"address-floor"`
	Building     *BuildingType     `json:",omitempty" xml:"building"`
	Street       *StreetType       `json:",omitempty" xml:"street"`
	City         *CityType         `json:",omitempty" xml:"city"`
	County       *CountyType       `json:",omitempty" xml:"county"`
	State        *StateType        `json:",omitempty" xml:"state"`
	Postcode     *PostcodeType     `json:",omitempty" xml:"postcode"`
	Country      string            `json:",omitempty" xml:"country"`
	Text         *string           `json:",omitempty" xml:"text"`
}

// PostcodeType ...
type PostcodeType struct {
	XMLName xml.Name `json:"-" xml:"postcode"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Postcode is Postal code or zip code
type Postcode *PostcodeType

// StateType ...
type StateType struct {
	XMLName xml.Name `json:"-" xml:"state"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// State is Region of country; e.g., state, province, etc.
type State *StateType

// CountyType ...
type CountyType struct {
	XMLName xml.Name `json:"-" xml:"county"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// County is County, parish, department, etc (mainly UK, USA)
type County *CountyType

// CityType ...
type CityType struct {
	XMLName xml.Name `json:"-" xml:"city"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// City is City or town name
type City *CityType

// StreetType ...
type StreetType struct {
	XMLName xml.Name `json:"-" xml:"street"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Street is Street may contain house number or name
type Street *StreetType

// BuildingType ...
type BuildingType struct {
	XMLName xml.Name `json:"-" xml:"building"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Building is Building information in address; e.g., Hoffman building
type Building *BuildingType

// AddressfloorType ...
type AddressfloorType struct {
	XMLName xml.Name `json:"-" xml:"address-floor"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Addressfloor is Address floor; e.g., 10th
type Addressfloor *AddressfloorType

// RoomType ...
type RoomType struct {
	XMLName xml.Name `json:"-" xml:"room"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Room is Address room; e.g., Room 55B
type Room *RoomType

// PoboxType ...
type PoboxType struct {
	XMLName xml.Name `json:"-" xml:"pobox"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Pobox is Post Office Box number
type Pobox *PoboxType

// MailcodeType ...
type MailcodeType struct {
	XMLName xml.Name `json:"-" xml:"mailcode"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Mailcode is Organizational mail code
type Mailcode *MailcodeType

// Address3Type ...
type Address3Type struct {
	XMLName xml.Name `json:"-" xml:"address-3"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Address3 is Address, third line
type Address3 *Address3Type

// Address2Type ...
type Address2Type struct {
	XMLName xml.Name `json:"-" xml:"address-2"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Address2 is Address, second line
type Address2 *Address2Type

// Address1Type ...
type Address1Type struct {
	XMLName xml.Name `json:"-" xml:"address-1"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Address1 is Address, first line
type Address1 *Address1Type

// NameGroup ...
type NameGroup struct {
	XMLName          xml.Name `json:"-" xml:"nameGroup"`
	Name             *NameType
	Prefix           *PrefixType
	Lastname         *LastnameType
	Firstname        *FirstnameType
	Middlename       *MiddlenameType
	Suffix           *SuffixType
	Iid              *IidType
	Role             *RoleType
	Orgname          *OrgnameType
	Department       *DepartmentType
	Synonym          []*SynonymType
	Registerednumber *RegisterednumberType
}

// RegisterednumberType ...
type RegisterednumberType struct {
	XMLName xml.Name `json:"-" xml:"registered-number"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Registerednumber is Registered number
type Registerednumber *RegisterednumberType

// SynonymType ...
type SynonymType struct {
	XMLName xml.Name `json:"-" xml:"synonym"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Synonym is Synonym
type Synonym *SynonymType

// DepartmentType ...
type DepartmentType struct {
	XMLName xml.Name `json:"-" xml:"department"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Department is Department, division, section, etc. name
type Department *DepartmentType

// SuffixType ...
type SuffixType struct {
	XMLName xml.Name `json:"-" xml:"suffix"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Suffix is Name suffix (e.g., II, Jr., Dip., Ing., BA, etc.)
type Suffix *SuffixType

// PrefixType ...
type PrefixType struct {
	XMLName xml.Name `json:"-" xml:"prefix"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Prefix is Title: e.g., Mr., Mrs., Dr. etc
type Prefix *PrefixType

// RoleType ...
type RoleType struct {
	XMLName xml.Name `json:"-" xml:"role"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Role is Role; e.g., President, Chairman, etc.
type Role *RoleType

// IidType ...
type IidType struct {
	XMLName xml.Name `json:"-" xml:"iid"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Iid is Individual id
type Iid *IidType

// OrgnameType ...
type OrgnameType struct {
	XMLName xml.Name `json:"-" xml:"orgname"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Orgname is Organisation name or company name
type Orgname *OrgnameType

// MiddlenameType ...
type MiddlenameType struct {
	XMLName xml.Name `json:"-" xml:"middle-name"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Middlename is Middle name(s) or initial(s)
type Middlename *MiddlenameType

// FirstnameType ...
type FirstnameType struct {
	XMLName xml.Name `json:"-" xml:"first-name"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Firstname is First or given name(s), initial(s)
type Firstname *FirstnameType

// LastnameType ...
type LastnameType struct {
	XMLName xml.Name `json:"-" xml:"last-name"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Lastname is Last, family, surname
type Lastname *LastnameType

// RelpassageType ...
type RelpassageType struct {
	XMLName   xml.Name       `json:"-" xml:"rel-passage"`
	Text      *string        `json:",omitempty" xml:"text"`
	Passage   []*PassageType `json:",omitempty" xml:"passage"`
	Category  *CategoryType  `json:",omitempty" xml:"category"`
	Relclaims *string        `json:",omitempty" xml:"rel-claims"`
}

// Relpassage is Relevant passage group within patent; most used in search reports. With regards to passage, references
//
//	other than location included for EPO internal use only
type Relpassage *RelpassageType

// string ...
//type string struct {
//	XMLName xml.Name `json:"-" xml:"rel-claims"`
//	Value   string   `json:",omitempty" xml:",chardata"`
//}

// Relclaims is Relevant claims
//
//	see example above
// type Relclaims *string

// CategoryType ...
type CategoryType struct {
	XMLName xml.Name `json:"-" xml:"category"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Category is Category - see example above
//
//	Categories indicating cited documents (references) of particular relevance, for the EPO:
//
//	Category X: particularly relevant if taken alone;
//	Y: particularly relevant if taken combined with another document of the same category
//	A: technological background
//	O: non-written disclosure
//	P: intermediate document
//	T: theory or principle underlying the invention
//	E: earlier patent document, but published on ,or after the filing date;
//	D: document cited in the application
//	L: document cited for other reasons
//
//	&: member of the same patent family, corresponding document
type Category *CategoryType

// PassageType ...
type PassageType struct {
	XMLName  xml.Name `json:"-" xml:"passage"`
	Pp       string   `json:",omitempty" xml:"pp"`
	Ppf      string   `json:",omitempty" xml:"ppf"`
	Ppl      string   `json:",omitempty" xml:"ppl"`
	Column   string   `json:",omitempty" xml:"column"`
	Colf     string   `json:",omitempty" xml:"colf"`
	Coll     string   `json:",omitempty" xml:"coll"`
	Para     string   `json:",omitempty" xml:"para"`
	Paraf    string   `json:",omitempty" xml:"paraf"`
	Paral    string   `json:",omitempty" xml:"paral"`
	Line     string   `json:",omitempty" xml:"line"`
	Linef    string   `json:",omitempty" xml:"linef"`
	Linel    string   `json:",omitempty" xml:"linel"`
	Claim    string   `json:",omitempty" xml:"claim"`
	Figure   string   `json:",omitempty" xml:"figure"`
	Example  string   `json:",omitempty" xml:"example"`
	Table    string   `json:",omitempty" xml:"table"`
	Sequence string   `json:",omitempty" xml:"sequence"`
	Compound string   `json:",omitempty" xml:"compound"`
	Bookmark string   `json:",omitempty" xml:"bookmark"`
}

// Passage is Passage within the cited patent literature. References included for EPO internal use only
type Passage *PassageType

// Date is Date: components of a date. Format: YYYYMMDD
type Date int

// ICEdatetype ...
type ICEdatetype *IntType

// KindType ...
//type KindType struct {
//	XMLName xml.Name `json:"-" xml:"kind"`
//	Value   string   `json:",omitempty" xml:",chardata"`
//}

// Kind is Document kind code; e.g., A1
//
//	(INID 13, ST.32:B130)
//type Kind *KindType

// DocnumberType ...
type DocnumberType struct {
	XMLName xml.Name `json:"-" xml:"doc-number"`
	Value   string   `json:",omitempty" xml:",chardata"`
}

// Docnumber is The number of the referenced patent (or application) document
type Docnumber *DocnumberType

// Country is Country: use ST.3 country code; e.g. DE, FR, GB, NL, etc.
//
//	Also includes EP, WO. Always in upper case. Also can use "stateless"
type Country string

// CountryType is Zimbabwe
type CountryType string

// string ...
//type string struct {
//	XMLName xml.Name `json:"-" xml:"text"`
//	Value   string   `json:",omitempty" xml:",chardata"`
//}

// Text is If no structure is possible, enter text (without markup)
// type Text *string

// PreAttlist ...
type PreAttlist struct {
	XMLName         xml.Name `json:"-" xml:"pre.attlist"`
	XmlSpaceAttr    string   `json:",omitempty" xml:"xml:space,attr,omitempty"`
	IdAttr          string   `json:",omitempty" xml:"id,attr,omitempty"`
	ListingtypeAttr string   `json:",omitempty" xml:"listing-type,attr"`
}

// PreType ...
type PreType struct {
	XMLName        xml.Name `json:"-" xml:"pre"`
	ExchPreAttlist *PreAttlist
	Value          string `json:",omitempty" xml:",chardata"`
}

// Pre is *******************************
//
//	PRE
//	*******************************
//	- This element is one method to identify content consisting of text objects that
//	require preservation (pre) of their whitespace in order to preserve internal
//	logical relationships.
//	(e.g., sequence listing fragments, computer program listings)
//	- Not at present used by the EPO; to be discussed ?**
type Pre *PreType

// BrType ...
type BrType struct {
	XMLName xml.Name `json:"-" xml:"br"`
}

// Br is br - break, line break within a paragraph, etc
type Br *BrType

// BType ...
type BType struct {
	XMLName   xml.Name         `json:"-" xml:"b"`
	I         []*IType         `json:",omitempty" xml:"i"`
	U         []*UType         `json:",omitempty" xml:"u"`
	O         []*OType         `json:",omitempty" xml:"o"`
	Sup       []*SupType       `json:",omitempty" xml:"sup"`
	Sub       []*SubType       `json:",omitempty" xml:"sub"`
	Smallcaps []*SmallcapsType `json:",omitempty" xml:"smallcaps"`
}

// B is *********************************
//   - FORMATTING TAGS WITHIN <p>
//     *********************************
//     Bold formatting for text
type B *BType

// IType ...
type IType struct {
	XMLName   xml.Name         `json:"-" xml:"i"`
	B         []*BType         `json:",omitempty" xml:"b"`
	U         []*UType         `json:",omitempty" xml:"u"`
	O         []*OType         `json:",omitempty" xml:"o"`
	Sup       []*SupType       `json:",omitempty" xml:"sup"`
	Sub       []*SubType       `json:",omitempty" xml:"sub"`
	Smallcaps []*SmallcapsType `json:",omitempty" xml:"smallcaps"`
}

// I is Italic formatting for text
type I *IType

// SmallcapsType ...
type SmallcapsType struct {
	XMLName xml.Name `json:"-" xml:"smallcaps"`
	B       []*BType `json:",omitempty" xml:"b"`
	U       []*UType `json:",omitempty" xml:"u"`
	I       []*IType `json:",omitempty" xml:"i"`
	O       []*OType `json:",omitempty" xml:"o"`
}

// Smallcaps is Small capitals
type Smallcaps *SmallcapsType

// SupType ...
type SupType struct {
	XMLName xml.Name    `json:"-" xml:"sup"`
	B       []*BType    `json:",omitempty" xml:"b"`
	U       []*UType    `json:",omitempty" xml:"u"`
	I       []*IType    `json:",omitempty" xml:"i"`
	O       []*OType    `json:",omitempty" xml:"o"`
	Sup2    []*Sup2Type `json:",omitempty" xml:"sup2"`
	Sub2    []*Sub2Type `json:",omitempty" xml:"sub2"`
}

// Sup is Superscripted text
type Sup *SupType

// SubType ...
type SubType struct {
	XMLName xml.Name    `json:"-" xml:"sub"`
	B       []*BType    `json:",omitempty" xml:"b"`
	U       []*UType    `json:",omitempty" xml:"u"`
	I       []*IType    `json:",omitempty" xml:"i"`
	O       []*OType    `json:",omitempty" xml:"o"`
	Sup2    []*Sup2Type `json:",omitempty" xml:"sup2"`
	Sub2    []*Sub2Type `json:",omitempty" xml:"sub2"`
}

// Sub is Subscripted text
type Sub *SubType

// Sub2Type ...
type Sub2Type struct {
	XMLName xml.Name `json:"-" xml:"sub2"`
	B       []*BType `json:",omitempty" xml:"b"`
	U       []*UType `json:",omitempty" xml:"u"`
	I       []*IType `json:",omitempty" xml:"i"`
	O       []*OType `json:",omitempty" xml:"o"`
}

// Sub2 is Subscripted text 2nd level
type Sub2 *Sub2Type

// Sup2Type ...
type Sup2Type struct {
	XMLName xml.Name `json:"-" xml:"sup2"`
	B       []*BType `json:",omitempty" xml:"b"`
	U       []*UType `json:",omitempty" xml:"u"`
	I       []*IType `json:",omitempty" xml:"i"`
	O       []*OType `json:",omitempty" xml:"o"`
}

// Sup2 is Superscripted text 2nd level
type Sup2 *Sup2Type

// Exchangedocuments ...
type Exchangedocuments struct {
	XMLName               xml.Name `json:"-" xml:"exchange-documents"`
	CountryAttr           string   `json:",omitempty" xml:"country,attr,omitempty"`
	DateproducedAttr      *IntType `json:",omitempty" xml:"date-produced,attr,omitempty"`
	DateofexchangeAttr    *IntType `json:",omitempty" xml:"date-of-exchange,attr,omitempty"`
	DtdversionAttr        string   `json:",omitempty" xml:"dtd-version,attr,omitempty"`
	FileAttr              string   `json:",omitempty" xml:"file,attr,omitempty"`
	NoofdocumentsAttr     *IntType `json:",omitempty" xml:"no-of-documents,attr,omitempty"`
	OriginatingofficeAttr string   `json:",omitempty" xml:"originating-office,attr,omitempty"`
	StatusAttr            string   `json:",omitempty" xml:"status,attr,omitempty"`
	ExchExchangedocument  []string `json:",omitempty" xml:"exchange-document"`
}
